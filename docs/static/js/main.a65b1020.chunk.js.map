{"version":3,"sources":["logo.png","Components/Routes/SkillList/index.module.less","Components/Routes/AbilityList/index.module.less","Components/Routes/Home/pay.png","Components/Header/index.tsx","Components/Card/Card.tsx","Components/Pill/Pill.tsx","consts.ts","utils.ts","Components/Poster/index.tsx","Components/Routes/Home/index.tsx","Components/UnitListCard/index.tsx","Components/Routes/UnitList/index.tsx","Components/SkillInfluenceTable/index.tsx","Components/AbilityConfigTable/index.tsx","Components/DotAnimation/index.tsx","Components/Routes/Unit/index.tsx","Components/Routes/UnitModal/index.tsx","Components/Routes/QuestList/index.tsx","Components/Routes/Quest/index.tsx","Components/ClassListCard/index.tsx","Components/Routes/ClassList/index.tsx","Components/DescriptionInput/index.tsx","Components/Routes/SkillList/index.tsx","Components/Routes/AbilityList/index.tsx","Components/Routes/EmojiList/index.tsx","Components/Router.tsx","App.tsx","serviceWorker.ts","index.tsx","Components/Routes/EmojiList/index.module.less","Components/DescriptionInput/index.module.less","Components/Poster/index.module.less","Components/Routes/Quest/index.module.less","Components/Routes/Home/index.module.less"],"names":["module","exports","__webpack_require__","p","drawerTrigger","skillListContainer","tagBar","abilityListContainer","Header","SubMenu","Item","withRouter","_React$Component","HeaderBar","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","active","inherits","createClass","key","value","setState","props","location","pathname","split","nextProps","react","className","Link","to","alt","src","logo","menu","mode","selectedKeys","title","React","ShadowedCard","react_default","a","createElement","es_card","assign","Component","Pill","type","bordered","colorType","onMouseEnter","onMouseLeave","onFocus","onClick","children","STATIC_URL","BASE_SERVER_URL","PLAYER_DOT_URL","EMOJI_URL","ICO_URL","ENEMY_DOT_URL","ENEMY_CHANGE_COND","0","1","2","3","4","5","BONUS_TYPE","DefaultGetter","obj","index","6","7","8","9","Poster","selectedPoster","selectedYear","years","handleYearChange","e","target","handlePosterChange","poster","_this2","posters","slice","forEach","year","find","y","push","_this3","styles","container","es_radio","Group","onChange","map","Button","posterNameContainer","filter","posterBreadcrumb","classNames","posterBreadcrumbText","defineProperty","posterBreadcrumbDivider","BASE_GAME_URL","Content","status","Home","files","file","time","moment","UpdateTime","outDated","duration","diff","days","col","Name","md","tooltip","format","Pill_Pill_Pill","updateTime","fromNow","react_apollo_esm","query","gql","_templateObject","_ref","loading","data","error","content","logoblock","topLogo","Card_ShadowedCard","badge","serverStatus","text","row","filesToPills","uploadFiles","beg","popover","placement","payImage","width","Components_Poster","replace","UnitListCard","success","conneName","card","ConneName","nickName","NickName","flashSuccess","setTimeout","_this$props","showUnit","setTextSearcher","CardID","span","Kind","Rare","bind","Race","Assign","Identity","Class","ClassInit","Illust","stopPropagation","mutation","UnitListCard_templateObject","onCompleted","updateCardMeta","spin","spinning","icon","style","cursor","theme","input","join","variables","Search","UnitList","sorter","order","search","currentPage","setSorter","genSorter","es_button","getParam","keys","st","cardSorter","cardA","cardB","_this$state","paramA","paramB","cardFilter","searchString","includes","param","_searchString$split","_searchString$split2","slicedToArray","parsedValue","sourceValue","Number","parseInt","JSON","stringify","setSearch","event","cardID","history","modal","nextStates","_","isEqual","UnitList_templateObject","UnitList_Content","placeholder","enterButton","affix","cards","pagination","defaultCurrent","defaultPageSize","page","total","marginBottom","sort","UnitListCard_UnitListCard","SkillInfluenceTable","skill","influences","InfluenceConfig","config","description","influence","ID","Data_InfluenceType","Description","Data_MulValue","Data_MulValue2","Data_MulValue3","Data_AddValue","_HoldRatioUpperLimit","_Expression","_ExpressionActivate","Type_Collision","Type_CollisionState","Data_Target","AbilityConfigTable","configs","configMetas","objectSpread","c","_InfluenceType","_Param1","_Param2","_Param3","_Param4","_Command","_ActivateCommand","_InvokeType","_TargetType","DotAnimationSingleEntry","canvas","gif","canvasWidth","canvasHeight","top","bottom","left","right","blankWidth","blankHeight","tickNum","dot","Length","sprites","Entries","EntryID","Sprites","sprite","X","Y","Width","Height","OriginX","OriginY","frames","PatternNo","pat","Sprite","Data","Time","Math","max","min","height","GIF","workers","quality","workerScript","background","transparent","image","Image","crossOrigin","ctx","getContext","currentTick","currentFrame","gifStatus","onload","imageLoop","window","requestAnimationFrame","frameChanged","clearRect","drawImage","tempCanvas","document","tempCtx","fillStyle","fillRect","addFrame","copy","delay","on","blob","url","URL","createObjectURL","href","display","download","click","render","ref","DotAnimation","_this4","entry","DotAnimation_DotAnimationSingleEntry","TabPane","Unit","harlemMode","getStatus","hpMod","MaxHPMod","atkMod","AtkMod","defMod","DefMod","costDec","CostDecValue","costMod","CostModValue","stat","classDataToUnit","ClassCC","ClassEvo","ClassEvo2a","_AwakePattern","ClassEvo2b","InitHP","MaxHP","InitAtk","MaxAtk","InitDef","MaxDef","MaxLevel","MaxLevelUnit","cost","Cost","range","AtkArea","block","BlockNum","Explanation","maxLevelUnit","AttackWait","countMinMax","maxLevel","mod","ceil","hp","atk","def","getGender","kind","switchHarlem","body","overflowY","id","match","params","Unit_templateObject","_ref2","Unit_Content","isEmpty","react_slick_lib_default","dots","ImageCG","toConsumableArray","ImageStand","img","tabs","defaultActiveKey","HarlemTextR","HarlemTextA","tab","dangerouslySetInnerHTML","__html","p1","rowSpan","toString","MagicResistance","BonusType","get","BonusNum","BonusType2","divider","BonusNum2","BonusType3","BonusNum3","AbilityEvoInfo","AbilityID","AbilityInitInfo","Type","ability","Components_AbilityConfigTable","Config","AbilityName","Text","SkillInit","SkillName","SkillCC","SkillEvo","skills","ClassLV0SkillID","ClassLV1SkillID","Components_SkillInfluenceTable","ContTimeMax","WaitTime","LevelMax","PowerMax","Error","classData","ClassAbilityConfig1","ClassAbilityPower1","Dots","fontWeight","color","entryIndex","backgroundImage","backgroundPositionX","backgroundPositionY","DotAnimation_DotAnimation","UnitModal","visible","handleCancel","goBack","footer","onCancel","Unit_Unit","Panel","collapse","MISSION_TYPE","Story","Emergency","Reproduce","DailyReproduce","Subjugation","DevilAdvent","Harlem","Daily","Challenge","Tutorial","Raid","QuestList","show","changeShow","checked","questID","QuestList_Content","es_switch","checkedChildren","unCheckedChildren","QuestList_templateObject","missions","mission","MissionID","header","_templateObject2","Quests","quest","QuestID","showQuest","Charisma","ActionPoint","_templateObject3","_ref3","quests","Quest","treasureDrop","showDuplicated","pushDrop","handleDuplicatedChange","Quest_templateObject","Quest_Content","questContainer","questTitle","tag","gutter","questInfo","sm","Map","Message","questInfoList","questInfoListName","RankExp","Gold","Treasure1","Treasure2","Treasure3","Treasure4","Treasure5","treasure","margin","tableActions","Quest_EnemyTable","battleTalks","onDrop","EventArcs","arc","textAlign","_TalkerName","_TalkText","EnemyTable","trGen","enemy","drops","isChange","undefined","Param_ChangeParam","PatternID","Loop","Types","TypeAttack","MagicAttack","getAttackSpeed","ATTACK_RANGE","HP","ATTACK_POWER","ARMOR_DEFENSE","MAGIC_DEFENSE","Param_ResistanceAssassin","PrizeCardID","Param_ChangeCondition","DotLength","attackSpeed","ATTACK_SPEED","entries","EntryNo","enemies","Enemies","Mission","mapLevel","Level","parsedEnemies","parseEnemy","enemyID","EnemyID","duplicated","changes","newEnemy","Changes","enemyChange","colSpan","command","EntryCommand","exec","s","recordIndex","talk","BattleTalks","RecordIndex","ClassListCard","class","classID","unitClass","classes","res","objectWithoutProperties","ClassID","notBase","JobChange","getClass","JobChangeMaterial1","JobChangeMaterial2","JobChangeMaterial3","mat","Data_ExtraAwakeOrb1","Data_ExtraAwakeOrb2","AwakeType1","AwakeType2","ClassListCard_templateObject","updateClassMeta","ClassList","classFilter","ClassList_templateObject","findIndex","index1","index2","ClassList_Content","es_alert","message","showIcon","ClassList_Search","marginTop","abilityConfigMetas","ClassListCard_ClassListCard","current","DescriptionInput","editing","update","flash","enableEdit","addEventListener","outerClick","contains","handleUpdate","removeEventListener","DescriptionInput_templateObject","mutationFunction","updateDescription","influenceItem","align","onToggleFilter","IDTag","Fragment","influenceInput","autoFocus","actionCol","valueCol","SkillList","IDFilter","drawerVisible","handleIDFilterChange","newFilter","skillFilter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","v","_iterator","Symbol","iterator","next","done","_ret","err","return","handleToggleDrawer","fiteredID","findIDindex","SkillList_templateObject","maxInfluenceID","drawer","onClose","skillInfluenceMetas","dummy","DescriptionInput_DescriptionInput","handleToggleFilter","SkillList_Content","closable","SkillList_Search","CardHave","AbilityList","abilityFilter","AbilityList_templateObject","maxID","abilities","AbilityList_Content","AbilityList_Search","EmojiList","currentEmoji","_id","name","emoji","group","modalVisible","currentImage","isImg","_img$split","ext","indexOf","EmojiList_templateObject","refetch","EmojiList_Content","emojis","deleteIconContainer","EmojiList_templateObject2","removeEmoji","popconfirm","onConfirm","then","deleteIcon","emojiDrawer","imageContainer","imageBox","imageCover","imageActionContainer","imageAction","EmojiList_templateObject3","removeEmojiItem","Router","previousLocation","action","isModal","Switch","Route","path","component","exact","locale","client","ApolloClient","link","ApolloLink","from","onError","graphQLErrors","networkError","locations","console","log","createUploadLink","uri","credentials","cache","InMemoryCache","App","HashRouter","locale_provider","zhCN","layout","Components_Header","Components_Router","Boolean","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister","cardDivider","postContainer"],"mappings":"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","file":"static/js/main.a65b1020.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.509ca4a9.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawerTrigger\":\"src-Components-Routes-SkillList-index-module__drawerTrigger--d9igM\",\"skillListContainer\":\"src-Components-Routes-SkillList-index-module__skillListContainer--wrNs-\",\"tagBar\":\"src-Components-Routes-SkillList-index-module__tagBar--C7Pyw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawerTrigger\":\"src-Components-Routes-AbilityList-index-module__drawerTrigger--1ubdu\",\"abilityListContainer\":\"src-Components-Routes-AbilityList-index-module__abilityListContainer--3xfdd\",\"tagBar\":\"src-Components-Routes-AbilityList-index-module__tagBar--15A3_\"};","module.exports = __webpack_public_path__ + \"static/media/pay.f5dab129.png\";","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Layout, Menu } from 'antd';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport logo from '../../logo.png';\n\nconst { Header } = Layout;\nconst { SubMenu, Item } = Menu;\n\ninterface HeaderBarStates {\n  active: string;\n}\n\nexport default withRouter(\n  class HeaderBar extends React.Component<\n    RouteComponentProps<any>,\n    HeaderBarStates\n  > {\n    public state = {\n      active: '/',\n    };\n    public componentDidMount() {\n      this.setState({\n        active: this.props.location.pathname.split('/')[1],\n      });\n    }\n    public componentWillReceiveProps(nextProps: any) {\n      this.setState({\n        active: nextProps.location.pathname.split('/')[1],\n      });\n    }\n    public render() {\n      return (\n        <Header className=\"header\">\n          <Link to=\"/\">\n            <img alt=\"logo\" src={logo} className=\"logo\" />\n          </Link>\n          <Menu\n            mode=\"horizontal\"\n            className=\"headerMenu\"\n            selectedKeys={[this.state.active]}\n          >\n            <Item key=\"unit\">\n              <Link to=\"/unit\">单位</Link>\n            </Item>\n            <Item key=\"quest\">\n              <Link to=\"/quest\">关卡</Link>\n            </Item>\n            <SubMenu title=\"其他属性\">\n              <Item key=\"class\">\n                <Link to=\"/class\">职业</Link>\n              </Item>\n              <Item key=\"skill\">\n                <Link to=\"/skill\">技能</Link>\n              </Item>\n              <Item key=\"ability\">\n                <Link to=\"/ability\">被动</Link>\n              </Item>\n            </SubMenu>\n            <Item key=\"emoji\">\n              <Link to=\"/emoji\">机器狗</Link>\n            </Item>\n          </Menu>\n        </Header>\n      );\n    }\n  },\n);\n","import React from 'react';\nimport { Card } from 'antd';\nimport { CardProps } from 'antd/lib/card';\nimport './Card.less';\n\nexport default class ShadowedCard extends React.Component<\n  CardProps\n> {\n  public render() {\n    return <Card {...this.props} className=\"card\" />;\n  }\n}\n","import * as React from 'react';\nimport './Pill.less';\n\nexport interface PillProps {\n  bordered?: boolean;\n  type?: string;\n  onMouseEnter?: () => void;\n  onMouseLeave?: () => void;\n  onFocus?: () => void;\n  onClick?: () => void;\n}\n\nexport default class Pill extends React.Component<PillProps> {\n  private colorType(type: string | undefined) {\n    switch (type) {\n      case 'danger':\n        return 'pill-color-danger';\n      default:\n        return 'pill-color-default';\n    }\n  }\n  public render() {\n    return (\n      <div\n        className={`pill ${this.props.bordered &&\n          'pill-bordered'} ${this.colorType(this.props.type)}`}\n        onMouseEnter={this.props.onMouseEnter}\n        onMouseLeave={this.props.onMouseLeave}\n        onFocus={this.props.onFocus}\n        onClick={this.props.onClick}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n","import { DefaultGetter } from './utils';\nexport const BASE_SERVER_URL = 'https://aigisapi.naberi.us';\n// export const BASE_SERVER_URL = 'http://localhost:4000';\nexport const BASE_GAME_URL = 'http://assets.millennium-war.net';\nexport const GAME_POSTER_URL = BASE_GAME_URL + '/00/html/image';\nexport const API_URL = BASE_SERVER_URL + '/graphql';\nexport const STATIC_URL = BASE_SERVER_URL + '/static';\nexport const PLAYER_DOT_URL = STATIC_URL + '/playerdot';\nexport const EMOJI_URL = STATIC_URL + '/cqp';\nexport const ICO_URL = STATIC_URL + '/ico';\nexport const ENEMY_DOT_URL = STATIC_URL + '/enemydot';\nexport const ENEMY_CHANGE_COND: { [k: number]: string } = {\n  0: '条件切换',\n  1: '阻挡切换',\n  2: '死亡切换',\n  3: '半血切换',\n  4: '一次性攻击切换',\n  5: '血量99%切换',\n};\nexport const BONUS_TYPE = new DefaultGetter({\n  1: 'HP +',\n  2: '攻击 +',\n  3: '防御 +',\n  4: '射程 +',\n  5: '魔抗 +',\n  6: '后摇 -',\n  7: '技能持续 +',\n  8: '技能再动 -',\n  9: '物理攻击回避 +',\n});\n","export class DefaultGetter {\r\n  private obj: any;\r\n  public constructor(obj: any) {\r\n    this.obj = obj;\r\n  }\r\n  public get(index: string | number) {\r\n    if (index in this.obj) {\r\n      return this.obj[index];\r\n    } else {\r\n      return index;\r\n    }\r\n  }\r\n}\r\n","import * as React from 'react';\nimport { Radio } from 'antd';\nimport classNames from 'classnames';\nimport styles from './index.module.less';\nimport { GAME_POSTER_URL } from '../../consts';\n\ninterface PosterProps {\n  posters: string[];\n}\n\ninterface PosterStates {\n  selectedPoster: string;\n  selectedYear: string;\n}\n\nclass Poster extends React.Component<PosterProps, PosterStates> {\n  public state = {\n    selectedPoster: '',\n    selectedYear: '',\n  };\n\n  private years: string[] = [];\n\n  public componentDidMount() {\n    const { posters } = this.props;\n    this.setState({\n      selectedPoster: posters[posters.length - 1],\n      selectedYear: posters[posters.length - 1].slice(0, 4),\n    });\n    posters.forEach(poster => {\n      const year = poster.slice(0, 4);\n      if (!this.years.find(y => y === year)) {\n        this.years.push(year);\n      }\n    });\n  }\n\n  private handleYearChange = (e: any) => {\n    this.setState({ selectedYear: e.target.value });\n  };\n\n  private handlePosterChange = (poster: string) => {\n    this.setState({ selectedPoster: poster });\n  };\n\n  public render() {\n    return (\n      <div className={styles.container}>\n        <Radio.Group\n          onChange={this.handleYearChange}\n          value={this.state.selectedYear}\n        >\n          {this.years.map(year => (\n            <Radio.Button value={year} key={year}>\n              {year}\n            </Radio.Button>\n          ))}\n        </Radio.Group>\n        <div className={styles.posterNameContainer}>\n          {this.props.posters\n            .filter(poster => poster.slice(0, 4) === this.state.selectedYear)\n            .map(poster => (\n              <span className={styles.posterBreadcrumb} key={poster}>\n                <span\n                  className={classNames(styles.posterBreadcrumbText, {\n                    [styles.active]: this.state.selectedPoster === poster,\n                  })}\n                  onClick={() => this.handlePosterChange(poster)}\n                >\n                  {poster.slice(4)}\n                </span>\n                <span className={styles.posterBreadcrumbDivider}>/</span>\n              </span>\n            ))}\n        </div>\n        <img\n          className={styles.poster}\n          alt={this.state.selectedPoster}\n          src={`${GAME_POSTER_URL}/event${this.state.selectedPoster}.jpg`}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Poster;\n","import * as React from 'react';\nimport { Layout, Row, Col, Tooltip, Badge, Popover } from 'antd';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport moment from 'moment';\nimport Card from '../../Card';\nimport Pill from '../../Pill';\nimport Poster from '../../Poster';\nimport logo from '../../../logo.png';\nimport payImage from './pay.png';\nimport styles from './index.module.less';\n\nconst { Content } = Layout;\n\nconst status = {\n  0: 'success',\n  1: 'processing',\n  2: 'error',\n};\n\ninterface Data {\n  uploadFiles: Array<{\n    UpdateTime: number;\n    Name: string;\n  }>;\n  serverStatus: number;\n  posters: string[];\n}\n\nexport default class Home extends React.Component {\n  private filesToPills(files: any[]) {\n    return files.map(file => {\n      const time = moment(file.UpdateTime);\n      const outDated = moment.duration(moment().diff(time)).days() >= 6;\n      return (\n        <Col key={file.Name} md={12}>\n          <Tooltip title={time.format('YYYY-MM-DD HH:mm:ss ddd')}>\n            <Pill bordered={!outDated} type={outDated ? 'danger' : 'default'}>\n              {file.Name}\n              <small className={styles.updateTime}>{time.fromNow()}</small>\n            </Pill>\n          </Tooltip>\n        </Col>\n      );\n    });\n  }\n  public render() {\n    return (\n      <Query<Data>\n        query={gql`\n          query {\n            uploadFiles {\n              UpdateTime\n              Name\n            }\n            serverStatus\n            posters\n          }\n        `}\n      >\n        {({ loading, error, data }) => {\n          return (\n            <Content className={styles.content}>\n              <div className={styles.logoblock}>\n                <img alt=\"logo\" src={logo} className={styles.topLogo} />\n                <h1>Naberius</h1>\n              </div>\n              <Card loading={loading}>\n                {!loading && data && (\n                  <div>\n                    <Badge\n                      status={(status as any)[data.serverStatus]}\n                      text=\"状态\"\n                    />\n                    <Row>{this.filesToPills(data.uploadFiles)}</Row>\n                  </div>\n                )}\n              </Card>\n              <div className={styles.beg}>\n                <Popover\n                  placement=\"bottom\"\n                  content={\n                    <img\n                      alt=\"唯一指定邮箱minalinskyx@hotmail.com，您pay吗\"\n                      src={payImage}\n                      width={500}\n                    />\n                  }\n                >\n                  <del>我就不要脸了要饭了你打我啊！</del>\n                </Popover>\n              </div>\n              {!loading && data && data.posters.length !== 0 && (\n                <Poster\n                  posters={data.posters.map((poster: string) =>\n                    poster.replace('event', ''),\n                  )}\n                />\n              )}\n            </Content>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Row, Col, Icon, Input, Spin } from 'antd';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\n\ninterface UnitListCardProps {\n  card: any;\n  showUnit: (cardID: number) => void;\n  setTextSearcher: (search: string, event: any) => void;\n}\n\ninterface UnitListCardStates {\n  active: boolean;\n  success: boolean;\n  conneName: string;\n  nickName: string[];\n}\n\nexport default class UnitListCard extends React.Component<\n  UnitListCardProps,\n  UnitListCardStates\n> {\n  public state = {\n    active: false,\n    success: false,\n    conneName: this.props.card.ConneName,\n    nickName: this.props.card.NickName || [],\n  };\n\n  public flashSuccess = () => {\n    this.setState({ success: true });\n    setTimeout(() => {\n      this.setState({ success: false });\n    }, 1000);\n  };\n\n  public render() {\n    const { card, showUnit, setTextSearcher } = this.props;\n    return (\n      <Row className=\"list-card\" onClick={() => showUnit(card.CardID)}>\n        <Col span={2}>{card.CardID}</Col>\n        <Col span={2}>\n          <span className={`gender gender-${card.Kind}`} />\n        </Col>\n        <Col span={2}>\n          <span\n            className={`rarity-circle rarity-circle-${card.Rare} filter`}\n            onClick={setTextSearcher.bind(null, `稀有:${card.Rare}`)}\n          />\n        </Col>\n        <Col span={5} className=\"important\">\n          {card.Name}\n        </Col>\n        <Col span={3} className=\"filter\">\n          {card.Race && (\n            <span onClick={setTextSearcher.bind(null, `种族:${card.Race}`)}>\n              &lt;{card.Race}&gt;\n            </span>\n          )}\n          {card.Assign && (\n            <span onClick={setTextSearcher.bind(null, `出身:${card.Assign}`)}>\n              &lt;{card.Assign}&gt;\n            </span>\n          )}\n          {card.Identity && (\n            <span onClick={setTextSearcher.bind(null, `不死:${card.Identity}`)}>\n              &lt;{card.Identity}&gt;\n            </span>\n          )}\n        </Col>\n        <Col\n          span={5}\n          className=\"filter\"\n          onClick={setTextSearcher.bind(\n            null,\n            `职业:${card.Class.ClassInit.Name}`,\n          )}\n        >\n          {card.Class.ClassInit.Name}\n        </Col>\n        <Col\n          span={5}\n          className=\"filter\"\n          onClick={setTextSearcher.bind(null, `画师:${card.Illust}`)}\n        >\n          {card.Illust}\n        </Col>\n        <div\n          className={\n            `list-card-addon ` +\n            (this.state.active && 'active ') +\n            (this.state.success && 'success')\n          }\n          onClick={e => {\n            e.stopPropagation();\n          }}\n        >\n          <Mutation<\n            null,\n            {\n              CardID: number;\n              ConneName: string;\n              NickName: string[];\n            }\n          >\n            mutation={gql`\n              mutation updateCardMeta(\n                $CardID: Int!\n                $ConneName: String\n                $NickName: [String]\n              ) {\n                updateCardMeta(\n                  CardID: $CardID\n                  ConneName: $ConneName\n                  NickName: $NickName\n                ) {\n                  ConneName\n                  NickName\n                }\n              }\n            `}\n            onCompleted={this.flashSuccess}\n          >\n            {(updateCardMeta, { loading }) => (\n              <Spin spinning={loading}>\n                <Row>\n                  <Col span={2}>\n                    <Icon\n                      onClick={() =>\n                        this.setState({ active: !this.state.active })\n                      }\n                      style={{ cursor: 'pointer' }}\n                      type={this.state.active ? 'right-circle' : 'left-circle'}\n                      theme=\"outlined\"\n                    />\n                  </Col>\n                  <Col span={10}>\n                    <span className=\"label\">昵称:</span>\n                    <Input\n                      value={this.state.nickName.join(',')}\n                      onChange={e =>\n                        this.setState({\n                          nickName: e.target.value.split(/[,， ]/),\n                        })\n                      }\n                    />\n                  </Col>\n                  <Col span={10}>\n                    <span className=\"label\">圆爹名:</span>\n                    <Input\n                      value={this.state.conneName}\n                      onChange={e =>\n                        this.setState({ conneName: e.target.value })\n                      }\n                    />\n                  </Col>\n                  <Col span={2}>\n                    <Icon\n                      type=\"check-circle\"\n                      theme=\"filled\"\n                      style={{ cursor: 'pointer' }}\n                      onClick={() =>\n                        updateCardMeta({\n                          variables: {\n                            CardID: card.CardID,\n                            ConneName: this.state.conneName,\n                            NickName: this.state.nickName,\n                          },\n                        })\n                      }\n                    />\n                  </Col>\n                </Row>\n              </Spin>\n            )}\n          </Mutation>\n        </div>\n      </Row>\n    );\n  }\n}\n","import React from 'react';\nimport _ from 'lodash';\nimport { RouteComponentProps } from 'react-router-dom';\nimport {\n  Layout,\n  Input,\n  Row,\n  Col,\n  Spin,\n  Icon,\n  Affix,\n  Pagination,\n  Button,\n} from 'antd';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport UnitListCard from '../../UnitListCard';\nimport './index.less';\n\nconst { Content } = Layout;\nconst { Search } = Input;\n\ninterface Data {\n  cards: Array<{\n    CardID: number;\n    Name: string;\n    Rare: number;\n    Kind: number;\n    Illust: number;\n    Race: number;\n    Assign: number;\n    Identity: number;\n    NickName: string;\n    ConneName: string;\n    Class: {\n      ClassInit: {\n        Name: string;\n      };\n    };\n  }>;\n}\n\ninterface UnitListStates {\n  sorter: string;\n  order: boolean;\n  search: string;\n  currentPage: number;\n}\n\nexport default class UnitList extends React.Component<\n  RouteComponentProps<any>,\n  UnitListStates\n> {\n  public state = {\n    sorter: 'CardID',\n    order: true,\n    search: '',\n    currentPage: 1,\n  };\n\n  public shouldComponentUpdate(\n    nextProps: RouteComponentProps<any>,\n    nextStates: UnitListStates,\n  ) {\n    return !_.isEqual(nextStates, this.state);\n  }\n  public setSorter = (sorter: string) => {\n    if (sorter === this.state.sorter) {\n      this.setState({ order: !this.state.order });\n    } else {\n      this.setState({\n        sorter,\n        order: true,\n      });\n    }\n  };\n  public genSorter = (title: string, sorter: string) => {\n    return (\n      <Button type=\"link\" onClick={() => this.setSorter(sorter)}>\n        {title}{' '}\n        {this.state.sorter === sorter && (\n          <Icon type={this.state.order ? 'caret-down' : 'caret-up'} />\n        )}\n      </Button>\n    );\n  };\n\n  public getParam = (target: any, keys: any) => {\n    keys.split('.').forEach((st: string) => (target = target[st]));\n    return target;\n  };\n\n  public cardSorter = (cardA: any, cardB: any) => {\n    const { sorter, order } = this.state;\n    const paramA = this.getParam(cardA, sorter);\n    const paramB = this.getParam(cardB, sorter);\n    if (typeof paramA === 'number') {\n      return order ? paramA - paramB : paramB - paramA;\n    } else {\n      if (paramA > paramB) {\n        return order ? 1 : -1;\n      } else if (paramA < paramB) {\n        return order ? -1 : 1;\n      } else {\n        return 0;\n      }\n    }\n  };\n\n  public cardFilter = (card: any) => {\n    const searchString = this.state.search;\n    if (searchString.includes(':')) {\n      const [key, value] = searchString.split(':');\n      let parsedValue: number | string = value;\n      let param: string;\n      switch (key) {\n        case '稀有':\n          param = 'Rare';\n          break;\n        case '名称':\n          param = 'Name';\n          break;\n        case '种族':\n          param = 'Race';\n          break;\n        case '出身':\n          param = 'Assign';\n          break;\n        case '不死':\n          param = 'Identity';\n          break;\n        case '职业':\n          param = 'Class.ClassInit.Name';\n          break;\n        case '画师':\n          param = 'Illust';\n          break;\n        default:\n          param = '';\n      }\n      const sourceValue = this.getParam(card, param);\n      if (typeof sourceValue === 'number') {\n        parsedValue = Number.parseInt(value, 10);\n      }\n      return sourceValue === parsedValue;\n    }\n    return JSON.stringify(card).includes(this.state.search);\n  };\n\n  /**\n   * 点击搜索按钮的回调\n   */\n  public setSearch = (search: string) => {\n    this.setState({ search, currentPage: 1 });\n  };\n\n  public setTextSearcher = (search: string, event: Event) => {\n    event.stopPropagation();\n    this.setSearch(search);\n  };\n\n  public showUnit = (cardID: number) => {\n    this.props.history.push({\n      pathname: `/unit/${cardID}`,\n      state: { modal: true },\n    });\n  };\n\n  public render() {\n    return (\n      <Query<Data>\n        query={gql`\n          query {\n            cards {\n              CardID\n              Name\n              Rare\n              Kind\n              Illust\n              Race\n              Assign\n              Identity\n              NickName\n              ConneName\n              Class {\n                ClassInit {\n                  Name\n                }\n              }\n            }\n          }\n        `}\n      >\n        {({ loading, error, data }) => {\n          return (\n            <div>\n              <Spin spinning={loading}>\n                <Content className=\"unitListContent\">\n                  <Search\n                    placeholder=\"搜索单位\"\n                    value={this.state.search}\n                    onChange={event => {\n                      this.setSearch(event.target.value);\n                    }}\n                    enterButton\n                  />\n                  <div>\n                    <Affix>\n                      <Row className=\"sorter-block\">\n                        <Col span={2}>{this.genSorter('#', 'CardID')}</Col>\n                        <Col span={2}>{this.genSorter('性别', 'Kind')}</Col>\n                        <Col span={2}>{this.genSorter('稀有', 'Rare')}</Col>\n                        <Col span={5}>{this.genSorter('名称', 'Name')}</Col>\n                        <Col span={3}>{this.genSorter('种族', 'Race')}</Col>\n                        <Col span={5}>\n                          {this.genSorter('职业', 'Class.ClassInit.Name')}\n                        </Col>\n                        <Col span={5}>{this.genSorter('画师', 'Illust')}</Col>\n                      </Row>\n                    </Affix>\n                    {data && data.cards && (\n                      <Pagination\n                        defaultCurrent={1}\n                        defaultPageSize={50}\n                        onChange={page => this.setState({ currentPage: page })}\n                        total={data.cards.filter(this.cardFilter).length}\n                        style={{ marginBottom: 16 }}\n                      />\n                    )}\n                    {data &&\n                      data.cards &&\n                      data.cards\n                        .slice()\n                        .sort(this.cardSorter)\n                        .filter(this.cardFilter)\n                        .slice(\n                          50 * (this.state.currentPage - 1),\n                          50 * this.state.currentPage,\n                        )\n                        .map((card: any) => {\n                          return (\n                            <UnitListCard\n                              key={card.CardID}\n                              card={card}\n                              showUnit={this.showUnit}\n                              setTextSearcher={this.setTextSearcher}\n                            />\n                          );\n                        })}\n                    {data && data.cards && (\n                      <Pagination\n                        defaultCurrent={1}\n                        defaultPageSize={50}\n                        onChange={page => this.setState({ currentPage: page })}\n                        total={data.cards.filter(this.cardFilter).length}\n                      />\n                    )}\n                  </div>\n                </Content>\n              </Spin>\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n","import * as React from 'react';\n\nconst SkillInfluenceTable = ({ skill, influences }: any) => (\n  <div className=\"ant-table ant-table-bordered ant-table-middle\">\n    <div className=\"ant-table-content\">\n      <div className=\"ant-table-body\">\n        <table>\n          <thead className=\"ant-table-thead\">\n            <tr>\n              <th>类型</th>\n              <th>効果%</th>\n              <th>差分%</th>\n              <th>固定%</th>\n              <th>効果加算</th>\n              <th>固定%上限</th>\n              <th>条件式</th>\n              <th>発動条件式</th>\n              <th>冲突</th>\n              <th>冲突状态</th>\n              <th>対象</th>\n            </tr>\n          </thead>\n          <tbody className=\"ant-table-tbody\">\n            {skill.InfluenceConfig.map((config: any, index: number) => {\n              // no configs in unit page\n              const description = influences\n                ? influences.find(\n                    (influence: any) =>\n                      influence.ID === config.Data_InfluenceType,\n                  )\n                : config;\n              return (\n                <tr key={index}>\n                  <td>\n                    {config.Data_InfluenceType}\n                    {description &&\n                      description.Description &&\n                      ` / ${description.Description}`}\n                  </td>\n                  <td>{config.Data_MulValue}</td>\n                  <td>{config.Data_MulValue2}</td>\n                  <td>{config.Data_MulValue3}</td>\n                  <td>{config.Data_AddValue}</td>\n                  <td>{config._HoldRatioUpperLimit}</td>\n                  <td>{config._Expression}</td>\n                  <td>{config._ExpressionActivate}</td>\n                  <td>{config.Type_Collision}</td>\n                  <td>{config.Type_CollisionState}</td>\n                  <td>{config.Data_Target}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n);\n\nexport default SkillInfluenceTable;\n","import * as React from 'react';\n\nconst AbilityConfigTable = ({ configs, configMetas, style }: any) => (\n  <div\n    className=\"ant-table ant-table-bordered ant-table-middle\"\n    style={{ ...style }}\n  >\n    <div className=\"ant-table-content\">\n      <div className=\"ant-table-body\">\n        <table>\n          <thead className=\"ant-table-thead\">\n            <tr>\n              <th>类型</th>\n              <th>p1</th>\n              <th>p2</th>\n              <th>p3</th>\n              <th>p4</th>\n              <th>cmd</th>\n              <th>発動条件</th>\n              <th>発動種別</th>\n              <th>対象種別</th>\n            </tr>\n          </thead>\n          <tbody className=\"ant-table-tbody\">\n            {configs.map((config: any, index: number) => {\n              // no configs in unit page\n              const description = configMetas\n                ? configMetas.find((c: any) => c.ID === config._InfluenceType)\n                : config;\n              return (\n                <tr key={index}>\n                  <td>\n                    {config._InfluenceType}\n                    {description &&\n                      description.Description &&\n                      ` / ${description.Description}`}\n                  </td>\n                  <td>{config._Param1}</td>\n                  <td>{config._Param2}</td>\n                  <td>{config._Param3}</td>\n                  <td>{config._Param4}</td>\n                  <td>{config._Command}</td>\n                  <td>{config._ActivateCommand}</td>\n                  <td>{config._InvokeType}</td>\n                  <td>{config._TargetType}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n);\n\nexport default AbilityConfigTable;\n","import * as React from 'react';\nimport { Tooltip } from 'antd';\nimport * as GIF from 'gif.js';\nimport { PLAYER_DOT_URL } from '../../consts';\n\ninterface DotAnimationSingleEntryProps {\n  dot: any;\n  image: string;\n  EntryID: number;\n  cardID: number;\n}\n\nclass DotAnimationSingleEntry extends React.Component<\n  DotAnimationSingleEntryProps\n> {\n  public canvas?: HTMLCanvasElement;\n  public gif: any;\n  public componentDidMount() {\n    let top = 0;\n    let bottom = 0;\n    let left = 0;\n    let right = 0;\n    let canvasWidth = 0;\n    let canvasHeight = 0;\n    let blankWidth = 99999;\n    let blankHeight = 99999;\n    const tickNum: number = this.props.dot.Length;\n    interface Sprite {\n      X: number;\n      Y: number;\n      Width: number;\n      Height: number;\n      OriginX: number;\n      OriginY: number;\n    }\n    const sprites: Sprite[] = this.props.dot.Entries[\n      this.props.EntryID\n    ].Sprites.map((sprite: any) => ({\n      X: sprite.X,\n      Y: sprite.Y,\n      Width: sprite.Width,\n      Height: sprite.Height,\n      OriginX: sprite.OriginX > 1000 ? 0 : sprite.OriginX,\n      OriginY: sprite.OriginY > 1000 ? 0 : sprite.OriginY,\n    }));\n\n    // map sprite to frames\n    let frames: Array<{\n      Sprite: Sprite;\n      Time: number;\n    }> = this.props.dot.Entries[this.props.EntryID].PatternNo.map(\n      (pat: any) => {\n        return { Sprite: sprites[pat.Data], Time: pat.Time };\n      },\n    );\n\n    // get frame length\n    frames = frames\n      .map((pat, index) => ({\n        ...pat,\n        Time:\n          index === frames.length - 1\n            ? tickNum - pat.Time\n            : frames[index + 1].Time - pat.Time,\n      }))\n      .filter(pat => pat.Time !== 0);\n\n    // count the container size of images\n    sprites.forEach(sprite => {\n      left = Math.max(left, sprite.OriginX);\n      right = Math.min(right, sprite.OriginX - sprite.Width);\n\n      top = Math.max(top, sprite.OriginY);\n      bottom = Math.min(bottom, sprite.OriginY - sprite.Height);\n    });\n    canvasWidth = left - right;\n    canvasHeight = top - bottom;\n\n    // count the top-left blank block size\n    sprites.forEach(sprite => {\n      blankWidth = Math.min(blankWidth, canvasWidth - sprite.OriginX);\n      blankHeight = Math.min(blankHeight, canvasHeight - sprite.OriginY);\n    });\n    this.canvas!.width = canvasWidth;\n    this.canvas!.height = canvasHeight;\n\n    // use #08D422 as transparent color\n    // just a random color\n    this.gif = new GIF({\n      workers: 2,\n      quality: 1,\n      workerScript: '/gif.worker.js',\n      width: canvasWidth,\n      height: canvasHeight,\n      background: '#08D422',\n      transparent: '0x08D422',\n    });\n\n    // load image\n    const image = new Image();\n    image.crossOrigin = 'anonymous';\n    image.src = this.props.image;\n    const ctx = this.canvas!.getContext('2d') as CanvasRenderingContext2D;\n\n    let currentTick = 0;\n    let currentFrame = -1;\n\n    let gifStatus = true;\n\n    const imageLoop = () => {\n      // request next tick\n      window.requestAnimationFrame(imageLoop);\n      let frameChanged = false;\n      // when tick goes 0, shift to next frame\n      if (currentTick === 0) {\n        currentFrame += 1;\n        frameChanged = true;\n        if (currentFrame === frames.length) {\n          currentFrame = 0;\n          gifStatus = false;\n        }\n        // set tick to frame length\n        currentTick = frames[currentFrame].Time;\n      }\n      // minus in every tick\n      currentTick--;\n      // draw the sprite\n      const sprite = frames[currentFrame].Sprite;\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.drawImage(\n        image,\n        sprite.X,\n        sprite.Y,\n        sprite.Width,\n        sprite.Height,\n        canvasWidth - sprite.OriginX - blankWidth,\n        canvasHeight - sprite.OriginY - blankHeight,\n        sprite.Width,\n        sprite.Height,\n      );\n      if (gifStatus && frameChanged) {\n        // copy canvas image to a temp canvas and add background\n        const tempCanvas = document.createElement('canvas');\n        tempCanvas.height = canvasHeight;\n        tempCanvas.width = canvasWidth;\n        const tempCtx = tempCanvas.getContext('2d') as CanvasRenderingContext2D;\n        // fill the 'transparent' background\n        tempCtx.fillStyle = '#08D422';\n        tempCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n        tempCtx.drawImage(this.canvas!, 0, 0);\n        this.gif.addFrame(tempCtx, {\n          copy: true,\n          delay: frames[currentFrame].Time * (1000 / 60),\n        });\n      }\n    };\n\n    image.onload = imageLoop;\n  }\n\n  public render() {\n    return (\n      <div>\n        <Tooltip title=\"点击下载gif\">\n          <canvas\n            onClick={() => {\n              this.gif.on('finished', (blob: Blob) => {\n                // crate a anchor\n                const url: string = URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                a.href = url;\n                a.style.display = 'none';\n                a.download = `${this.props.cardID}-${this.props.dot.Name}-${\n                  this.props.EntryID\n                }.gif`;\n                // and click it\n                a.click();\n              });\n              this.gif.render();\n            }}\n            style={{ cursor: 'pointer' }}\n            ref={ref => ref && (this.canvas = ref)}\n          />\n        </Tooltip>\n      </div>\n    );\n  }\n}\n\ninterface DotAnimationProps {\n  dot: any;\n  cardID: number;\n}\n\nexport default class DotAnimation extends React.Component<DotAnimationProps> {\n  public render() {\n    return (\n      <div>\n        {this.props.dot.Entries.map((entry: any, index: number) => (\n          <DotAnimationSingleEntry\n            key={entry.Name}\n            dot={this.props.dot}\n            image={PLAYER_DOT_URL + `/${this.props.cardID}.png`}\n            cardID={this.props.cardID}\n            EntryID={index}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Query } from 'react-apollo';\nimport { Spin, Popover, Layout, Tabs, Divider } from 'antd';\nimport _ from 'lodash';\nimport Slider from 'react-slick';\nimport { RouteComponentProps } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport SkillInfluenceTable from '../../SkillInfluenceTable';\nimport AbilityConfigTable from '../../AbilityConfigTable';\nimport DotAnimation from '../../DotAnimation';\nimport {\n  BASE_GAME_URL,\n  ICO_URL,\n  PLAYER_DOT_URL,\n  BONUS_TYPE,\n} from '../../../consts';\nimport './index.less';\n\nconst { Content } = Layout;\nconst { TabPane } = Tabs;\n\ninterface ClassData {\n  Name: string;\n  InitHP: number;\n  MaxHP: number;\n  InitDef: number;\n  MaxDef: number;\n  InitAtk: number;\n  MaxAtk: number;\n  AtkArea: number;\n  BlockNum: number;\n  MaxLevel: number;\n  MaxLevelUnit: number;\n  Explanation: string;\n  Cost: number;\n  AttackWait: string;\n  ClassAbilityConfig1: Array<{\n    _InvokeType: number;\n    _TargetType: number;\n    _InfluenceType: number;\n    _Param1: number;\n    _Param2: number;\n    _Param3: number;\n    _Param4: number;\n    _Command: string;\n    _ActivateCommand: string;\n    Description: string;\n  }>;\n  ClassAbilityPower1: number;\n}\n\ninterface SkillData {\n  SkillName: string;\n  WaitTime: number;\n  ContTimeMax: number;\n  PowerMax: number;\n  LevelMax: number;\n  Text: string;\n  InfluenceConfig: {\n    Type_Collision: number;\n    Type_CollisionState: number;\n    Type_ChangeFunction: number;\n    Data_Target: number;\n    Data_InfluenceType: number;\n    Data_MulValue: number;\n    Data_MulValue2: number;\n    Data_MulValue3: number;\n    Data_AddValue: number;\n    _HoldRatioUpperLimit: number;\n    _Expression: string;\n    _ExpressionActivate: string;\n    Description: string;\n  };\n}\n\ninterface AbilityData {\n  AbilityID: number;\n  Text: string;\n  AbilityName: string;\n  Config: {\n    _InvokeType: number;\n    _TargetType: number;\n    _InfluenceType: number;\n    _Param1: number;\n    _Param2: number;\n    _Param3: number;\n    _Param4: number;\n    _Command: string;\n    _ActivateCommand: string;\n    Description: string;\n  };\n}\n\ninterface Data {\n  card: {\n    CardID: number;\n    _AwakePattern: number;\n    HarlemTextR: string[];\n    HarlemTextA: string[];\n    Name: number;\n    Rare: number;\n    Kind: number;\n    MaxHPMod: number;\n    AtkMod: number;\n    DefMod: number;\n    CostModValue: number;\n    CostDecValue: number;\n    MagicResistance: number;\n    BonusType: number;\n    BonusNum: number;\n    BonusType2: number;\n    BonusNum2: number;\n    BonusType3: number;\n    BonusNum3: number;\n    Race: number;\n    Assign: number;\n    Identity: number;\n    Illust: number;\n    Dots: Array<{\n      Name: string;\n      Length: number;\n      Entries: Array<{\n        Name: string;\n        Sprites: Array<{\n          X: number;\n          Y: number;\n          Width: number;\n          Height: number;\n          OriginX: number;\n          OriginY: number;\n        }>;\n        PatternNo: {\n          Time: number;\n          Data: number;\n        };\n      }>;\n      Image: string;\n    }>;\n    Class: {\n      ClassInit: ClassData;\n      ClassCC: ClassData;\n      ClassEvo: ClassData;\n      ClassEvo2a: ClassData;\n      ClassEvo2b: ClassData;\n    };\n    ImageCG: string[];\n    ImageStand: string[];\n    AbilityEvoInfo: AbilityData;\n    AbilityInitInfo: AbilityData;\n    ClassLV0SkillID: number;\n    ClassLV1SkillID: number;\n    SkillInit: SkillData[];\n    SkillCC: SkillData[];\n    SkillEvo: SkillData[];\n  };\n}\n\ninterface UnitStates {\n  harlemMode: boolean;\n}\n\nexport default class Unit extends React.Component<\n  RouteComponentProps<{ CardID: string }>,\n  UnitStates\n> {\n  public state: UnitStates = {\n    harlemMode: false,\n  };\n  public getStatus = (card: any) => {\n    const hpMod = card.MaxHPMod / 100;\n    const atkMod = card.AtkMod / 100;\n    const defMod = card.DefMod / 100;\n    const { CostDecValue: costDec, CostModValue: costMod } = card;\n    // const rarity = card.Rare;\n    const status = [\n      {\n        stat: '初始',\n        data: classDataToUnit(card.Class.ClassInit),\n      },\n    ];\n    if (card.Class.ClassCC) {\n      status.push({\n        stat: 'CC',\n        data: classDataToUnit(card.Class.ClassCC),\n      });\n    }\n    if (card.Class.ClassEvo) {\n      status.push({\n        stat: '觉醒',\n        data: classDataToUnit(card.Class.ClassEvo),\n      });\n    }\n    if (\n      card.Class.ClassEvo2a &&\n      (card._AwakePattern === 1 || card._AwakePattern === 3)\n    ) {\n      status.push({\n        stat: '第二觉醒A',\n        data: classDataToUnit(card.Class.ClassEvo2a),\n      });\n    }\n    if (\n      card.Class.ClassEvo2b &&\n      (card._AwakePattern === 2 || card._AwakePattern === 3)\n    ) {\n      status.push({\n        stat: '第二觉醒B',\n        data: classDataToUnit(card.Class.ClassEvo2b),\n      });\n    }\n    return status;\n    function classDataToUnit({\n      InitHP,\n      MaxHP,\n      InitAtk,\n      MaxAtk,\n      InitDef,\n      MaxDef,\n      MaxLevel,\n      MaxLevelUnit,\n      Cost: cost,\n      AtkArea: range,\n      BlockNum: block,\n      Name: className,\n      Explanation,\n      MaxLevelUnit: maxLevelUnit,\n      AttackWait,\n    }: any) {\n      function countMinMax(\n        min: number,\n        max: number,\n        maxLevel: number,\n        maxLevelUnit: number,\n        mod: number,\n      ) {\n        return [\n          Math.ceil(mod * (min + (max - min) * (1 / maxLevel))),\n          Math.ceil(mod * (min + (max - min) * (maxLevelUnit / maxLevel))),\n        ];\n      }\n      return {\n        hp: countMinMax(InitHP, MaxHP, MaxLevel, MaxLevelUnit, hpMod),\n        atk: countMinMax(InitAtk, MaxAtk, MaxLevel, MaxLevelUnit, atkMod),\n        def: countMinMax(InitDef, MaxDef, MaxLevel, MaxLevelUnit, defMod),\n        cost: [cost + costMod, cost + costMod - costDec] as number[],\n        range: range as number,\n        block: block as number,\n        className: className as string,\n        maxLevelUnit: maxLevelUnit as number,\n        Explanation: Explanation as string,\n        AttackWait: AttackWait as number,\n      };\n    }\n  };\n  public getGender = (kind: number) => {\n    if (kind === 1) {\n      return <span className=\"gender genderFemale\" />;\n    } else if (kind === 0) {\n      return <span className=\"gender genderMale\" />;\n    } else {\n      return <span className=\"gender genderUnknown\" />;\n    }\n  };\n\n  public switchHarlem = () => {\n    if (!this.state.harlemMode) {\n      document.body.style.overflowY = 'hidden';\n    } else {\n      document.body.style.overflowY = 'auto';\n    }\n    this.setState({ harlemMode: !this.state.harlemMode });\n  };\n  public render() {\n    const id = this.props.match.params.CardID;\n    return (\n      <Query<Data>\n        query={gql`\n          query($id: Int!) {\n            card(CardID: $id) {\n              CardID\n              _AwakePattern\n              HarlemTextR\n              HarlemTextA\n              Name\n              Rare\n              Kind\n              MaxHPMod\n              AtkMod\n              DefMod\n              CostModValue\n              CostDecValue\n              MagicResistance\n              BonusType\n              BonusNum\n              BonusType2\n              BonusNum2\n              BonusType3\n              BonusNum3\n              Race\n              Assign\n              Identity\n              Illust\n              Dots {\n                Name\n                Length\n                Entries {\n                  Name\n                  Sprites {\n                    X\n                    Y\n                    Width\n                    Height\n                    OriginX\n                    OriginY\n                  }\n                  PatternNo {\n                    Time\n                    Data\n                  }\n                }\n                Image\n              }\n              Class {\n                ClassInit {\n                  Name\n                  InitHP\n                  MaxHP\n                  InitDef\n                  MaxDef\n                  InitAtk\n                  MaxAtk\n                  AtkArea\n                  BlockNum\n                  MaxLevel\n                  MaxLevelUnit\n                  Explanation\n                  Cost\n                  AttackWait\n                  ClassAbilityConfig1 {\n                    _InvokeType\n                    _TargetType\n                    _InfluenceType\n                    _Param1\n                    _Param2\n                    _Param3\n                    _Param4\n                    _Command\n                    _ActivateCommand\n                    Description\n                  }\n                  ClassAbilityPower1\n                }\n                ClassCC {\n                  Name\n                  InitHP\n                  MaxHP\n                  InitDef\n                  MaxDef\n                  InitAtk\n                  MaxAtk\n                  AtkArea\n                  BlockNum\n                  MaxLevel\n                  MaxLevelUnit\n                  Explanation\n                  Cost\n                  AttackWait\n                  ClassAbilityConfig1 {\n                    _InvokeType\n                    _TargetType\n                    _InfluenceType\n                    _Param1\n                    _Param2\n                    _Param3\n                    _Param4\n                    _Command\n                    _ActivateCommand\n                    Description\n                  }\n                  ClassAbilityPower1\n                }\n                ClassEvo {\n                  Name\n                  InitHP\n                  MaxHP\n                  InitDef\n                  MaxDef\n                  InitAtk\n                  MaxAtk\n                  AtkArea\n                  BlockNum\n                  MaxLevel\n                  MaxLevelUnit\n                  Explanation\n                  Cost\n                  AttackWait\n                  ClassAbilityConfig1 {\n                    _InvokeType\n                    _TargetType\n                    _InfluenceType\n                    _Param1\n                    _Param2\n                    _Param3\n                    _Param4\n                    _Command\n                    _ActivateCommand\n                    Description\n                  }\n                  ClassAbilityPower1\n                }\n                ClassEvo2a {\n                  Name\n                  InitHP\n                  MaxHP\n                  InitDef\n                  MaxDef\n                  InitAtk\n                  MaxAtk\n                  AtkArea\n                  BlockNum\n                  MaxLevel\n                  MaxLevelUnit\n                  Explanation\n                  Cost\n                  AttackWait\n                  ClassAbilityConfig1 {\n                    _InvokeType\n                    _TargetType\n                    _InfluenceType\n                    _Param1\n                    _Param2\n                    _Param3\n                    _Param4\n                    _Command\n                    _ActivateCommand\n                    Description\n                  }\n                  ClassAbilityPower1\n                }\n                ClassEvo2b {\n                  Name\n                  InitHP\n                  MaxHP\n                  InitDef\n                  MaxDef\n                  InitAtk\n                  MaxAtk\n                  AtkArea\n                  BlockNum\n                  MaxLevel\n                  MaxLevelUnit\n                  Explanation\n                  Cost\n                  AttackWait\n                  ClassAbilityConfig1 {\n                    _InvokeType\n                    _TargetType\n                    _InfluenceType\n                    _Param1\n                    _Param2\n                    _Param3\n                    _Param4\n                    _Command\n                    _ActivateCommand\n                    Description\n                  }\n                  ClassAbilityPower1\n                }\n              }\n              ImageCG\n              ImageStand\n              AbilityEvoInfo {\n                AbilityID\n                Text\n                AbilityName\n                Config {\n                  _InvokeType\n                  _TargetType\n                  _InfluenceType\n                  _Param1\n                  _Param2\n                  _Param3\n                  _Param4\n                  _Command\n                  _ActivateCommand\n                  Description\n                }\n              }\n              AbilityInitInfo {\n                AbilityID\n                Text\n                AbilityName\n                Config {\n                  _InvokeType\n                  _TargetType\n                  _InfluenceType\n                  _Param1\n                  _Param2\n                  _Param3\n                  _Param4\n                  _Command\n                  _ActivateCommand\n                  Description\n                }\n              }\n              ClassLV0SkillID\n              ClassLV1SkillID\n              SkillInit {\n                SkillName\n                WaitTime\n                ContTimeMax\n                PowerMax\n                LevelMax\n                Text\n                InfluenceConfig {\n                  Type_Collision\n                  Type_CollisionState\n                  Type_ChangeFunction\n                  Data_Target\n                  Data_InfluenceType\n                  Data_MulValue\n                  Data_MulValue2\n                  Data_MulValue3\n                  Data_AddValue\n                  _HoldRatioUpperLimit\n                  _Expression\n                  _ExpressionActivate\n                  Description\n                }\n              }\n              SkillCC {\n                SkillName\n                WaitTime\n                ContTimeMax\n                PowerMax\n                LevelMax\n                Text\n                InfluenceConfig {\n                  Type_Collision\n                  Type_CollisionState\n                  Type_ChangeFunction\n                  Data_Target\n                  Data_InfluenceType\n                  Data_MulValue\n                  Data_MulValue2\n                  Data_MulValue3\n                  Data_AddValue\n                  _HoldRatioUpperLimit\n                  _Expression\n                  _ExpressionActivate\n                  Description\n                }\n              }\n              SkillEvo {\n                SkillName\n                WaitTime\n                ContTimeMax\n                PowerMax\n                LevelMax\n                Text\n                InfluenceConfig {\n                  Type_Collision\n                  Type_CollisionState\n                  Type_ChangeFunction\n                  Data_Target\n                  Data_InfluenceType\n                  Data_MulValue\n                  Data_MulValue2\n                  Data_MulValue3\n                  Data_AddValue\n                  _HoldRatioUpperLimit\n                  _Expression\n                  _ExpressionActivate\n                  Description\n                }\n              }\n            }\n          }\n        `}\n        variables={{ id }}\n      >\n        {({ loading, error, data }) => {\n          return (\n            <Content className=\"unit-containter container\">\n              <Spin\n                spinning={loading}\n                style={{ height: '100%', width: '100%' }}\n              >\n                {data && !_.isEmpty(data) && (\n                  <div>\n                    <h1 className=\"unit-title\">\n                      <span\n                        className={`rarity-circle rarity-circle-${\n                          data.card.Rare\n                        }`}\n                      />\n                      <span className={`gender gender-${data.card.Kind}`} />\n                      <span>{data.card.Name}</span>\n                    </h1>\n                    <p>\n                      {data.card.Race && <span>&lt;{data.card.Race}&gt;</span>}\n                      {data.card.Assign && (\n                        <span>&lt;{data.card.Assign}&gt;</span>\n                      )}\n                      {data.card.Identity && (\n                        <span>&lt;{data.card.Identity}&gt;</span>\n                      )}\n                    </p>\n                    <div\n                      className={\n                        'harem-container ' + (this.state.harlemMode && 'active')\n                      }\n                    >\n                      <div className=\"ant-carousel\" onClick={this.switchHarlem}>\n                        <Slider\n                          dots\n                          className={`cg-${data.card.ImageCG.length}`}\n                        >\n                          {[...data.card.ImageStand, ...data.card.ImageCG].map(\n                            (img: string) => (\n                              <div key={img}>\n                                <img alt={img} src={`${BASE_GAME_URL}${img}`} />\n                              </div>\n                            ),\n                          )}\n                        </Slider>\n                      </div>\n                      <Tabs\n                        defaultActiveKey=\"a-0\"\n                        className={\n                          'harlem-text-tabs ' +\n                          (data.card.HarlemTextR &&\n                            `harlem-text-tabs-${data.card.HarlemTextR.length}`)\n                        }\n                        type=\"card\"\n                      >\n                        {data.card.HarlemTextA &&\n                          data.card.HarlemTextA.map(\n                            (text: string, index: number) => (\n                              <TabPane\n                                tab={`表${index + 1}`}\n                                key={`a-${index}`}\n                              >\n                                <span\n                                  dangerouslySetInnerHTML={{\n                                    __html: text\n                                      .replace(\n                                        /(＠.*\\r\\n)/g,\n                                        (match, p1) =>\n                                          `<span style=\"font-weight: bold\">${p1}</span>`,\n                                      )\n                                      .replace(/\\r\\n/g, '<br />'),\n                                  }}\n                                />\n                              </TabPane>\n                            ),\n                          )}\n                        {data.card.HarlemTextR &&\n                          data.card.HarlemTextR.map(\n                            (text: string, index: number) => (\n                              <TabPane\n                                tab={`里${index + 1}`}\n                                key={`r-${index}`}\n                              >\n                                <span\n                                  dangerouslySetInnerHTML={{\n                                    __html: text\n                                      .replace(\n                                        /(＠.*\\r\\n)/g,\n                                        (match, p1) =>\n                                          `<span style=\"font-weight: bold\">${p1}</span>`,\n                                      )\n                                      .replace(/\\r\\n/g, '<br />'),\n                                  }}\n                                />\n                              </TabPane>\n                            ),\n                          )}\n                      </Tabs>\n                      {/* {data.card.HarlemTextR[0]} */}\n                    </div>\n                    <p>\n                      Illust: <strong>{data.card.Illust}</strong>\n                    </p>\n                    <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                      <div className=\"ant-table-title\">\n                        <strong>HP补正:</strong>\n                        {data.card.MaxHPMod / 100}/<strong>攻击补正:</strong>\n                        {data.card.AtkMod / 100}/<strong>防御补正:</strong>\n                        {data.card.DefMod / 100}\n                      </div>\n                      <div className=\"ant-table-content\">\n                        <div className=\"ant-table-body\">\n                          <table>\n                            <thead className=\"ant-table-thead\">\n                              <tr>\n                                <th>状态</th>\n                                <th>职业名</th>\n                                <th>头像</th>\n                                <th>等级</th>\n                                <th>HP</th>\n                                <th>攻击力</th>\n                                <th>防御力</th>\n                                <th>魔抗</th>\n                                <th>射程</th>\n                                <th>档数</th>\n                                <th>Cost</th>\n                              </tr>\n                            </thead>\n                            <tbody className=\"ant-table-tbody\">\n                              {this.getStatus(data.card).map(stat => [\n                                <tr\n                                  className=\"ant-table-row\"\n                                  key={`${stat.stat}-1`}\n                                >\n                                  <td rowSpan={2}>{stat.stat}</td>\n                                  <td rowSpan={2}>{stat.data.className}</td>\n                                  <td rowSpan={2}>\n                                    {(() => {\n                                      let url = ICO_URL;\n                                      switch (stat.stat) {\n                                        case '初始':\n                                          url += '/0';\n                                          break;\n                                        case '觉醒':\n                                          url += '/1';\n                                          break;\n                                        case '第二觉醒A':\n                                          url += '/2';\n                                          break;\n                                        case '第二觉醒B':\n                                          url += '/3';\n                                          break;\n                                        default:\n                                          return null;\n                                      }\n                                      return (\n                                        <img\n                                          alt={data.card.CardID.toString()}\n                                          src={`${url}/${data.card.CardID}.png`}\n                                        />\n                                      );\n                                    })()}\n                                  </td>\n                                  <td>Lv1</td>\n                                  <td>{stat.data.hp[0]}</td>\n                                  <td>{stat.data.atk[0]}</td>\n                                  <td>{stat.data.def[0]}</td>\n                                  <td rowSpan={2}>\n                                    {data.card.MagicResistance}\n                                  </td>\n                                  <td rowSpan={2}>{stat.data.range}</td>\n                                  <td rowSpan={2}>{stat.data.block}</td>\n                                  <td rowSpan={2}>\n                                    {stat.data.cost[0]}({stat.data.cost[1]})\n                                  </td>\n                                </tr>,\n                                <tr\n                                  className=\"ant-table-row\"\n                                  key={`${stat.stat}-2`}\n                                >\n                                  <td>\n                                    Lv\n                                    {stat.data.maxLevelUnit}\n                                  </td>\n                                  <td>{stat.data.hp[1]}</td>\n                                  <td>{stat.data.atk[1]}</td>\n                                  <td>{stat.data.def[1]}</td>\n                                </tr>,\n                              ])}\n                            </tbody>\n                          </table>\n                        </div>\n                        <div className=\"ant-table-footer\">\n                          {data.card.BonusType !== 0 && (\n                            <span>\n                              <strong>\n                                {BONUS_TYPE.get(data.card.BonusType)}\n                              </strong>\n                              {Math.ceil(data.card.BonusNum * 1.2)}\n                            </span>\n                          )}\n                          {data.card.BonusType2 !== 0 && (\n                            <span>\n                              <Divider type=\"vertical\" />\n                              <strong>\n                                {BONUS_TYPE.get(data.card.BonusType2)}\n                              </strong>\n                              {Math.ceil(data.card.BonusNum2 * 1.2)}\n                            </span>\n                          )}\n                          {data.card.BonusType3 !== 0 && (\n                            <span>\n                              <Divider>150%</Divider>\n                              <strong>\n                                {BONUS_TYPE.get(data.card.BonusType3)}\n                              </strong>\n                              {Math.ceil(data.card.BonusNum3)}\n                            </span>\n                          )}\n                          {data.card.BonusType === 0 && <span>无好感</span>}\n                        </div>\n                      </div>\n                    </div>\n                    {data.card.AbilityEvoInfo.AbilityID !== 0 && (\n                      <div>\n                        <h2>被动</h2>\n                        <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                          <div className=\"ant-table-content\">\n                            <div className=\"ant-table-body\">\n                              <table>\n                                <thead className=\"ant-table-thead\">\n                                  <tr>\n                                    <th>状态</th>\n                                    <th>名称</th>\n                                    <th>描述</th>\n                                  </tr>\n                                </thead>\n                                <tbody className=\"ant-table-tbody\">\n                                  {[\n                                    {\n                                      ...data.card.AbilityInitInfo,\n                                      Type: '初始',\n                                    },\n                                    {\n                                      ...data.card.AbilityEvoInfo,\n                                      Type: '觉醒',\n                                    },\n                                  ]\n                                    .filter(\n                                      (ability: any) => ability.AbilityID !== 0,\n                                    )\n                                    .map((ability: any) => (\n                                      <Popover\n                                        content={\n                                          <AbilityConfigTable\n                                            configs={ability.Config}\n                                          />\n                                        }\n                                        key={ability.AbilityName}\n                                      >\n                                        <tr key={ability.AbilityName}>\n                                          <td>{ability.Type}</td>\n                                          <td>{ability.AbilityName}</td>\n                                          <td>{ability.Text}</td>\n                                        </tr>\n                                      </Popover>\n                                    ))}\n                                </tbody>\n                              </table>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    {data.card.SkillInit[0].SkillName !== 'なし' && (\n                      <div>\n                        <h2>技能</h2>\n                        <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                          <div className=\"ant-table-content\">\n                            <div className=\"ant-table-body\">\n                              <table>\n                                <thead className=\"ant-table-thead\">\n                                  <tr>\n                                    <th>状态</th>\n                                    <th>技能名</th>\n                                    <th>效果</th>\n                                    <th>持续</th>\n                                    <th>再动</th>\n                                    <th>技能等级</th>\n                                    <th>&lt;POW_I&gt;</th>\n                                  </tr>\n                                </thead>\n                                <tbody className=\"ant-table-tbody\">\n                                  {[\n                                    {\n                                      Data: [...data.card.SkillInit],\n                                      Type: '初始',\n                                    },\n                                    {\n                                      Data: [...data.card.SkillCC],\n                                      Type: 'CC',\n                                    },\n                                    {\n                                      Data: [...data.card.SkillEvo],\n                                      Type: '觉醒',\n                                    },\n                                  ]\n                                    .filter(skills => {\n                                      if (\n                                        skills.Type === 'CC' &&\n                                        data.card.ClassLV0SkillID ===\n                                          data.card.ClassLV1SkillID\n                                      ) {\n                                        return false;\n                                      }\n                                      if (skills.Data[0].SkillName === 'なし') {\n                                        return false;\n                                      }\n                                      return true;\n                                    })\n                                    .map(skills =>\n                                      skills.Data.map((skill: any, index) => (\n                                        <Popover\n                                          key={`skill-${skills.Type}-${index}`}\n                                          content={\n                                            <SkillInfluenceTable\n                                              skill={skill}\n                                            />\n                                          }\n                                        >\n                                          <tr>\n                                            {index === 0 && (\n                                              <td rowSpan={skills.Data.length}>\n                                                {skills.Type}\n                                              </td>\n                                            )}\n                                            <td>{skill.SkillName}</td>\n                                            <td>{skill.Text}</td>\n                                            <td>{skill.ContTimeMax}</td>\n                                            <td>\n                                              {skill.WaitTime - skill.LevelMax}\n                                            </td>\n                                            <td>{skill.LevelMax}</td>\n                                            <td>{skill.PowerMax}</td>\n                                          </tr>\n                                        </Popover>\n                                      )),\n                                    )}\n                                </tbody>\n                              </table>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    <div>\n                      <h2>职业</h2>\n                      <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                        <div className=\"ant-table-content\">\n                          <div className=\"ant-table-body\">\n                            <table>\n                              <thead className=\"ant-table-thead\">\n                                <tr>\n                                  <th>职业</th>\n                                  <th>描述</th>\n                                  <th>后摇</th>\n                                  <th>被动强度</th>\n                                </tr>\n                              </thead>\n                              <tbody className=\"ant-table-tbody\">\n                                {Object.keys(data.card.Class).map(key => {\n                                  if (!(key in data.card.Class)) {\n                                    throw Error('No such key');\n                                  }\n\n                                  const classData =\n                                    data.card.Class[\n                                      key as keyof Data['card']['Class']\n                                    ];\n                                  if (\n                                    !classData ||\n                                    typeof classData !== 'object'\n                                  ) {\n                                    return null;\n                                  }\n                                  return (\n                                    <Popover\n                                      content={\n                                        <AbilityConfigTable\n                                          configs={\n                                            classData.ClassAbilityConfig1\n                                          }\n                                        />\n                                      }\n                                      key={key}\n                                    >\n                                      <tr key={key}>\n                                        <td>{classData.Name}</td>\n                                        <td>{classData.Explanation}</td>\n                                        <td>{classData.AttackWait}</td>\n                                        <td>{classData.ClassAbilityPower1}</td>\n                                      </tr>\n                                    </Popover>\n                                  );\n                                })}\n                              </tbody>\n                            </table>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    {data.card.Dots && (\n                      <div>\n                        <h2>点阵</h2>\n                        <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                          <div className=\"ant-table-content\">\n                            <div className=\"ant-table-body\">\n                              <table>\n                                <tbody className=\"ant-table-tbody\">\n                                  {data.card.Dots.map(\n                                    (dot: any, index: number) => (\n                                      <tr key={index + dot.Name}>\n                                        <td\n                                          style={{\n                                            background: '#f5f6fa',\n                                            fontWeight: 500,\n                                            color: 'rgba(0, 0, 0, 0.85)',\n                                          }}\n                                        >\n                                          {dot.Name}\n                                        </td>\n                                        <td>{dot.Length}f</td>\n                                        <td>\n                                          {dot.Entries.map(\n                                            (\n                                              entry: any,\n                                              entryIndex: number,\n                                            ) => (\n                                              <div key={entryIndex}>\n                                                {entry.Sprites.map(\n                                                  (\n                                                    sprite: any,\n                                                    index: number,\n                                                  ) => {\n                                                    return (\n                                                      <div\n                                                        key={`${entryIndex}-${index}`}\n                                                        style={{\n                                                          display:\n                                                            'inline-block',\n                                                          width: sprite.Width,\n                                                          height: sprite.Height,\n                                                          backgroundImage: `url(\"${PLAYER_DOT_URL}/${\n                                                            data.card.CardID\n                                                          }.png\")`,\n                                                          backgroundPositionX: -sprite.X,\n                                                          backgroundPositionY: -sprite.Y,\n                                                        }}\n                                                      />\n                                                    );\n                                                  },\n                                                )}\n                                              </div>\n                                            ),\n                                          )}\n                                        </td>\n                                        <td>\n                                          <DotAnimation\n                                            dot={dot}\n                                            cardID={data.card.CardID}\n                                          />\n                                        </td>\n                                      </tr>\n                                    ),\n                                  )}\n                                </tbody>\n                              </table>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </Spin>\n            </Content>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Modal } from 'antd';\nimport { RouteComponentProps } from 'react-router-dom';\nimport Unit from '../Unit';\n\ninterface UnitModalStates {\n  visible: boolean;\n}\n\nclass UnitModal extends React.Component<\n  RouteComponentProps<{ CardID: string }>,\n  UnitModalStates\n> {\n  public state = {\n    visible: true,\n  };\n\n  private handleCancel = () => {\n    this.setState(\n      {\n        visible: false,\n      },\n      () => {\n        setTimeout(() => {\n          this.props.history.goBack();\n        }, 500);\n      },\n    );\n  };\n  public render() {\n    const { history, location, match } = this.props;\n    return (\n      <Modal\n        footer={null}\n        width=\"90%\"\n        visible={this.state.visible}\n        onCancel={this.handleCancel}\n      >\n        <Unit history={history} location={location} match={match} />\n      </Modal>\n    );\n  }\n}\n\nexport default UnitModal;\n","import * as React from 'react';\nimport { Query } from 'react-apollo';\nimport { Spin, Layout, Collapse, Switch, Row, Col, Affix } from 'antd';\nimport { RouteComponentProps } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport * as _ from 'lodash';\nimport './index.less';\n\nconst { Content } = Layout;\nconst Panel = Collapse.Panel;\n\nconst MISSION_TYPE: { [k: string]: string } = {\n  Story: '主线',\n  Emergency: '紧急',\n  Reproduce: '复刻',\n  DailyReproduce: '每日复刻',\n  Subjugation: '大讨伐',\n  DevilAdvent: '魔神',\n  Harlem: '交流',\n  Daily: '曜日',\n  Challenge: '挑战',\n  Tutorial: '教程',\n  Raid: '神兽',\n};\n\ninterface QuestData {\n  Name: string;\n  QuestID: number;\n  Charisma: number;\n  ActionPoint: number;\n}\n\ninterface QuestListState {\n  show: string;\n}\n\nexport default class QuestList extends React.Component<\n  RouteComponentProps<any>,\n  QuestListState\n> {\n  public state = {\n    show: 'mission',\n  };\n\n  public changeShow = (checked: boolean) => {\n    let show: string;\n    if (checked) {\n      show = 'quest';\n    } else {\n      show = 'mission';\n    }\n    this.setState({ show });\n  };\n\n  public showQuest(questID: number) {\n    this.props.history.push(`/quest/${questID}`);\n  }\n\n  public render() {\n    return (\n      <Content className=\"container\">\n        <Switch\n          checkedChildren=\"关卡\"\n          unCheckedChildren=\"战役\"\n          onChange={this.changeShow}\n        />\n        <Affix>\n          <Row className=\"sorter-block\">\n            <Col span={2}>#</Col>\n            <Col span={2}>魅力</Col>\n            <Col span={2}>体力</Col>\n            <Col span={18}>名称</Col>\n          </Row>\n        </Affix>\n        {this.state.show === 'mission' ? (\n          <Query\n            query={gql`\n              query {\n                missions {\n                  Name\n                  Type\n                  MissionID\n                }\n              }\n            `}\n          >\n            {({ loading, error, data }: any) => {\n              return (\n                <div>\n                  <Spin spinning={loading}>\n                    {!error && data.missions && (\n                      <Content className=\"mission-list-content\">\n                        <Collapse bordered={false}>\n                          {_.sortBy(data.missions, ['MissionID']).map(\n                            (mission: any) => (\n                              <Panel\n                                className=\"mission-panel\"\n                                key={mission.MissionID}\n                                header={\n                                  <span>\n                                    <strong>{mission.MissionID}</strong>\n                                    &nbsp;\n                                    {mission.Name}\n                                    <span className=\"mission-type\">\n                                      {MISSION_TYPE[mission.Type]\n                                        ? MISSION_TYPE[mission.Type]\n                                        : mission.Type}\n                                    </span>\n                                  </span>\n                                }\n                              >\n                                <Query<{\n                                  mission: {\n                                    Quests: QuestData[];\n                                  };\n                                }>\n                                  query={gql`\n                                    query($MissionID: Int!) {\n                                      mission(MissionID: $MissionID) {\n                                        Quests {\n                                          Name\n                                          QuestID\n                                          Charisma\n                                          ActionPoint\n                                        }\n                                      }\n                                    }\n                                  `}\n                                  variables={{ MissionID: mission.MissionID }}\n                                >\n                                  {({ loading, error, data }) => {\n                                    if (loading) {\n                                      return <Spin />;\n                                    }\n                                    if (\n                                      data &&\n                                      data.mission.Quests.length === 0\n                                    ) {\n                                      return <div>该战役下没有关卡。</div>;\n                                    }\n                                    return (\n                                      data &&\n                                      data.mission.Quests.map((quest: any) => (\n                                        <Row\n                                          key={quest.QuestID}\n                                          className=\"list-card quest-list\"\n                                          onClick={this.showQuest.bind(\n                                            this,\n                                            quest.QuestID,\n                                          )}\n                                        >\n                                          <Col span={2}>{quest.QuestID}</Col>\n                                          <Col span={2} className=\"charisma\">\n                                            {quest.Charisma}\n                                          </Col>\n                                          <Col\n                                            span={2}\n                                            className=\"action-point\"\n                                          >\n                                            {quest.ActionPoint}\n                                          </Col>\n                                          <Col className=\"important\" span={18}>\n                                            {quest.Name}\n                                          </Col>\n                                        </Row>\n                                      ))\n                                    );\n                                  }}\n                                </Query>\n                              </Panel>\n                            ),\n                          )}\n                        </Collapse>\n                      </Content>\n                    )}\n                  </Spin>\n                </div>\n              );\n            }}\n          </Query>\n        ) : (\n          <Query<{\n            quests: QuestData[];\n          }>\n            query={gql`\n              query {\n                quests {\n                  Name\n                  QuestID\n                  Charisma\n                  ActionPoint\n                }\n              }\n            `}\n          >\n            {({ loading, error, data }) => (\n              <Spin spinning={loading}>\n                <Content className=\"quest-list-content\">\n                  {data &&\n                    data.quests &&\n                    _.sortBy(data.quests, 'QuestID').map((quest: any) => (\n                      <Row\n                        key={quest.QuestID}\n                        className=\"list-card quest-list\"\n                        onClick={this.showQuest.bind(this, quest.QuestID)}\n                      >\n                        <Col span={2}>{quest.QuestID}</Col>\n                        <Col span={2} className=\"charisma\">\n                          {quest.Charisma}\n                        </Col>\n                        <Col span={2} className=\"action-point\">\n                          {quest.ActionPoint}\n                        </Col>\n                        <Col className=\"important\" span={18}>\n                          {quest.Name}\n                        </Col>\n                      </Row>\n                    ))}\n                </Content>\n              </Spin>\n            )}\n          </Query>\n        )}\n      </Content>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { Spin, Layout, Row, Col, Tag, Popover, Switch, Affix } from 'antd';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { ICO_URL, ENEMY_DOT_URL, ENEMY_CHANGE_COND } from '../../../consts';\nimport _ from 'lodash';\nimport styles from './index.module.less';\n\nconst { Content } = Layout;\n\ninterface Enemy {\n  SpecialEffect: any;\n  PatternID: number;\n  Types: any;\n  HP: number;\n  HP_MAX: number;\n  ATTACK_POWER: number;\n  ATTACK_TYPE: number;\n  ATTACK_RANGE: number;\n  ATTACK_SPEED: number;\n  ARMOR_DEFENSE: number;\n  MAGIC_DEFENSE: number;\n  SkyFlag: number;\n  GainCost: number;\n  EffectHeight: number;\n  MagicAttack: number;\n  AttackWait: number;\n  Param_ResistanceAssassin: number;\n  Param_ChangeParam: number;\n  Param_ChangeCondition: number;\n  TypeAttack: number;\n  DotLength: number;\n}\n\ninterface Data {\n  quest: {\n    EventArcs: Array<{\n      _TalkerName: string;\n      _TalkText: string;\n    }>;\n    Name: string;\n    Message: string;\n    Charisma: number;\n    EntryNo: number;\n    Level: number;\n    ActionPoint: number;\n    Treasure1: number;\n    Treasure2: number;\n    Treasure3: number;\n    Treasure4: number;\n    Treasure5: number;\n    RankExp: number;\n    Gold: number;\n    Mission: {\n      Enemies: Enemy[];\n      BattleTalks: Array<{\n        Message: string;\n        Name: string;\n        FaceID: number;\n        RecordIndex: number;\n      }>;\n    };\n    Map: {\n      Image: string;\n      Entries: Array<{\n        EntryID: number;\n        Entries: Array<{\n          EnemyID: number;\n          Wait: number;\n          RouteNo: number;\n          Loop: number;\n          Level: number;\n          PrizeEnemySpawnPercent: number;\n          PrizeCardID: number;\n          PrizeEnemyDropPercent: number;\n          RouteOffset: number;\n          IsAppear: number;\n          FreeCommand: string;\n          EntryCommand: string;\n          DeadCommand: string;\n        }>;\n      }>;\n      Enemies: Enemy[];\n    };\n  };\n  battleTalks: Array<{\n    Message: string;\n    Name: string;\n  }>;\n}\n\ninterface QuestStates {\n  treasureDrop: {\n    [key: number]: number[];\n  };\n  showDuplicated: boolean;\n}\n\nexport default class Quest extends React.Component<\n  RouteComponentProps<{ QuestID: string }>,\n  QuestStates\n> {\n  public state = {\n    treasureDrop: { 0: [], 1: [], 2: [], 3: [], 4: [] },\n    showDuplicated: false,\n  };\n\n  public pushDrop = (treasureDrop: number[][]) => {\n    this.setState({\n      treasureDrop,\n    });\n  };\n\n  public handleDuplicatedChange = () => {\n    this.setState(state => ({ showDuplicated: !state.showDuplicated }));\n  };\n\n  public render() {\n    const id = this.props.match.params.QuestID;\n    return (\n      <Query<Data>\n        query={gql`\n          query($id: Int!) {\n            quest(QuestID: $id) {\n              EventArcs {\n                _TalkerName\n                _TalkText\n              }\n              Name\n              Message\n              Charisma\n              EntryNo\n              Level\n              ActionPoint\n              Treasure1\n              Treasure2\n              Treasure3\n              Treasure4\n              Treasure5\n              RankExp\n              Gold\n              Mission {\n                Enemies {\n                  SpecialEffect\n                  PatternID\n                  Types\n                  HP\n                  HP_MAX\n                  ATTACK_POWER\n                  ATTACK_TYPE\n                  ATTACK_RANGE\n                  ATTACK_SPEED\n                  ARMOR_DEFENSE\n                  MAGIC_DEFENSE\n                  SkyFlag\n                  GainCost\n                  EffectHeight\n                  MagicAttack\n                  AttackWait\n                  Param_ResistanceAssassin\n                  Param_ChangeParam\n                  Param_ChangeCondition\n                  TypeAttack\n                  DotLength\n                }\n                BattleTalks {\n                  Message\n                  Name\n                  FaceID\n                  RecordIndex\n                }\n              }\n              Map {\n                Image\n                Entries {\n                  EntryID\n                  Entries {\n                    EnemyID\n                    Wait\n                    RouteNo\n                    Loop\n                    Level\n                    PrizeEnemySpawnPercent\n                    PrizeCardID\n                    PrizeEnemyDropPercent\n                    RouteOffset\n                    IsAppear\n                    FreeCommand\n                    EntryCommand\n                    DeadCommand\n                  }\n                }\n                Enemies {\n                  SpecialEffect\n                  PatternID\n                  Types\n                  HP\n                  HP_MAX\n                  ATTACK_POWER\n                  ATTACK_TYPE\n                  ATTACK_RANGE\n                  ATTACK_SPEED\n                  ARMOR_DEFENSE\n                  MAGIC_DEFENSE\n                  SkyFlag\n                  GainCost\n                  EffectHeight\n                  MagicAttack\n                  AttackWait\n                  Param_ResistanceAssassin\n                  Param_ChangeParam\n                  Param_ChangeCondition\n                  TypeAttack\n                  DotLength\n                }\n              }\n            }\n            battleTalks {\n              Message\n              Name\n            }\n          }\n        `}\n        variables={{ id }}\n      >\n        {({ loading, error, data }) => (\n          <Content className={styles.questContainer + ' container'}>\n            <Spin spinning={loading}>\n              {data && data.quest && (\n                <div>\n                  <h1 className={styles.questTitle}>{data.quest.Name}</h1>\n                  <div>\n                    {data.quest.Charisma ? (\n                      <Tag color=\"green\">\n                        魅力：\n                        {data.quest.Charisma}\n                      </Tag>\n                    ) : null}\n                    {data.quest.ActionPoint ? (\n                      <Tag color=\"red\">\n                        体力：\n                        {data.quest.ActionPoint}\n                      </Tag>\n                    ) : null}\n                  </div>\n                  <Row gutter={8} className={styles.questInfo}>\n                    <Col md={12} sm={24}>\n                      <img\n                        alt=\"map\"\n                        style={{ width: '100%' }}\n                        src={data.quest.Map.Image}\n                      />\n                    </Col>\n                    <Col md={12} sm={24}>\n                      <div\n                        dangerouslySetInnerHTML={{\n                          __html: data.quest.Message.replace(/\\n/g, '<br />'),\n                        }}\n                      />\n                      <Row className={styles.questInfoList}>\n                        <Col span={12}>\n                          <span className={styles.questInfoListName}>\n                            经验:\n                          </span>\n                          {data.quest.RankExp}\n                        </Col>\n                        <Col span={12}>\n                          <span className={styles.questInfoListName}>钱:</span>\n                          {data.quest.Gold}\n                        </Col>\n                      </Row>\n                      <table>\n                        <tbody>\n                          <tr>\n                            {[\n                              data.quest.Treasure1,\n                              data.quest.Treasure2,\n                              data.quest.Treasure3,\n                              data.quest.Treasure4,\n                              data.quest.Treasure5,\n                            ].map((treasure: number, index: number) => (\n                              <td\n                                style={{ width: '20%' }}\n                                key={`treasure-${index}`}\n                              >\n                                {treasure ? (\n                                  <div>\n                                    <img\n                                      alt={treasure.toString()}\n                                      style={{ width: '100%' }}\n                                      src={`${ICO_URL}/0/${treasure}.png`}\n                                    />\n                                    {(this.state.treasureDrop as any)[index]\n                                      .length === 0 && (\n                                      <Tag color=\"red\" style={{ margin: 0 }}>\n                                        COM\n                                      </Tag>\n                                    )}\n                                  </div>\n                                ) : null}\n                              </td>\n                            ))}\n                          </tr>\n                        </tbody>\n                      </table>\n                    </Col>\n                  </Row>\n                  <div className={styles.tableActions}>\n                    重复行\n                    <Switch\n                      checked={this.state.showDuplicated}\n                      onChange={this.handleDuplicatedChange}\n                      checkedChildren=\"显示\"\n                      unCheckedChildren=\"隐藏\"\n                    />\n                  </div>\n                  {data && (\n                    <EnemyTable\n                      battleTalks={data.battleTalks}\n                      quest={data.quest}\n                      onDrop={this.pushDrop}\n                      showDuplicated={this.state.showDuplicated}\n                    />\n                  )}\n                  {data && data.quest.EventArcs.length !== 0 && (\n                    <div>\n                      <h2>过场对话</h2>\n                      <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                        <div className=\"ant-table-content\">\n                          <div className=\"ant-table-body\">\n                            <table>\n                              <tbody className=\"ant-table-tbody\">\n                                {data.quest.EventArcs.map((arc, index) => (\n                                  <tr key={index}>\n                                    <td\n                                      style={{\n                                        background: '#f5f6fa',\n                                        fontWeight: 'bold',\n                                        textAlign: 'center',\n                                        color: 'rgba(0, 0, 0, 0.85)',\n                                      }}\n                                    >\n                                      {arc._TalkerName}\n                                    </td>\n                                    <td>{arc._TalkText}</td>\n                                  </tr>\n                                ))}\n                              </tbody>\n                            </table>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </Spin>\n          </Content>\n        )}\n      </Query>\n    );\n  }\n}\n\ninterface EnemyTableProps {\n  quest: any;\n  battleTalks: Array<{\n    Message: string;\n    Name: string;\n  }>;\n  onDrop: Quest['pushDrop'];\n  showDuplicated: boolean;\n}\n\nclass EnemyTable extends React.Component<EnemyTableProps> {\n  private getAttackSpeed(enemy: any) {\n    // don't know why\n    if (!enemy.DotLength) {\n      return null;\n    }\n    let attackSpeed = enemy.AttackWait * 2 + enemy.DotLength;\n    if (!enemy.ATTACK_RANGE) {\n      attackSpeed += enemy.ATTACK_SPEED;\n    }\n    return attackSpeed;\n  }\n  private trGen = (\n    enemy: any,\n    index: number,\n    drops: string[],\n    isChange: boolean = false,\n  ) => (\n    <tr\n      key={`enemy-table-${index}`}\n      className={enemy.Param_ChangeParam && 'ant-table-row-selected'}\n    >\n      <td>\n        <img\n          alt={((enemy.PatternID >> 8) % 4096).toString()}\n          src={`${ENEMY_DOT_URL}/${(enemy.PatternID >> 8) % 4096}.png`}\n        />\n      </td>\n      {!isChange && <td>{enemy.Loop}</td>}\n      <td>{enemy.Types && enemy.Types.join(', ')}</td>\n      <td>\n        {enemy.TypeAttack === 300\n          ? '真伤'\n          : enemy.MagicAttack\n          ? '魔法'\n          : '物理'}\n      </td>\n      <td>{this.getAttackSpeed(enemy)}</td>\n      <td>{enemy.ATTACK_RANGE ? enemy.ATTACK_RANGE : '近接'}</td>\n      <td>{enemy.HP}</td>\n      <td>{enemy.ATTACK_POWER}</td>\n      <td>{enemy.ARMOR_DEFENSE}</td>\n      <td>{enemy.MAGIC_DEFENSE}</td>\n      <td>{enemy.Param_ResistanceAssassin}</td>\n      {!isChange && (\n        <td>\n          {enemy.PrizeCardID ? (\n            <img\n              alt={(enemy.PrizeCardID - 1).toString()}\n              src={drops[enemy.PrizeCardID - 1]}\n            />\n          ) : null}\n        </td>\n      )}\n      {isChange && (\n        <td>\n          {enemy.Param_ChangeParam\n            ? ENEMY_CHANGE_COND[enemy.Param_ChangeCondition]\n            : '不切换'}\n        </td>\n      )}\n    </tr>\n  );\n  public componentDidMount() {\n    const entries: any = _.find(this.props.quest.Map.Entries, {\n      EntryID: this.props.quest.EntryNo,\n    });\n    const treasureDrop: number[][] = [[], [], [], [], []];\n    entries.Entries.forEach((entry: any, index: number) => {\n      if (entry.PrizeCardID) {\n        treasureDrop[entry.PrizeCardID - 1].push(index);\n      }\n    });\n    this.props.onDrop(treasureDrop);\n  }\n  public render() {\n    const quest = this.props.quest;\n    const enemies = quest.Map.Enemies || quest.Mission.Enemies;\n    const entries: any = _.find(quest.Map.Entries, {\n      EntryID: quest.EntryNo,\n    });\n    const mapLevel = quest.Level;\n    const drops = [\n      quest.Treasure1,\n      quest.Treasure2,\n      quest.Treasure3,\n      quest.Treasure4,\n      quest.Treasure5,\n    ].map((treasure: number, index: number) => `${ICO_URL}/0/${treasure}.png`);\n    const parsedEnemies: any = [];\n    const parseEnemy = (entry: any, enemyID: number = entry.EnemyID - 1) => {\n      const enemy = { ...enemies[enemyID], ...entry, EnemyID: enemyID };\n      if (!enemy.Level) {\n        enemy.Level = 100;\n      }\n      enemy.HP = (enemy.HP * mapLevel * enemy.Level) / 10000;\n      if (!enemy.ATTACK_RANGE) {\n        enemy.ATTACK_POWER =\n          (enemy.ATTACK_POWER * mapLevel * enemy.Level) / 10000;\n      }\n      return enemy;\n    };\n    entries.Entries.forEach((entry: any) => {\n      // ids between 0 and 1000 are true enemies\n      if (entry.EnemyID >= 0 && entry.EnemyID < 1000) {\n        const enemy = parseEnemy(entry);\n        if (\n          !this.props.showDuplicated &&\n          parsedEnemies.find((e: any) => e.EnemyID === enemy.EnemyID)\n        ) {\n          enemy.duplicated = true;\n        }\n        if (enemy.Param_ChangeParam) {\n          const changes = [enemy];\n          while (changes[changes.length - 1].Param_ChangeParam) {\n            const changeFrom = changes[changes.length - 1];\n            const enemyID = changeFrom.Param_ChangeParam - 1;\n            if (_.find(changes, ['EnemyID', enemyID])) {\n              break;\n            }\n            const newEnemy = parseEnemy(entry, enemyID);\n            changes.push(newEnemy);\n          }\n          enemy.Changes = changes;\n        }\n        parsedEnemies.push(enemy);\n      } else {\n        parsedEnemies.push(entry);\n      }\n    });\n    return (\n      <>\n        <Affix>\n          <div className=\"ant-table ant-table-bordered ant-table-middle\">\n            <div className=\"ant-table-content\">\n              <div className=\"ant-table-body\">\n                <table style={{ textAlign: 'center' }}>\n                  <thead className=\"ant-table-thead\" style={{ width: '100%' }}>\n                    <tr>\n                      <th style={{ width: '13%' }}>点阵</th>\n                      <th style={{ width: '5%' }}>重复</th>\n                      <th style={{ width: '13%' }}>属性</th>\n                      <th style={{ width: '13%' }}>攻击属性</th>\n                      <th style={{ width: '5%' }}>攻速</th>\n                      <th style={{ width: '5%' }}>射程</th>\n                      <th style={{ width: '5%' }}>HP</th>\n                      <th style={{ width: '5%' }}>攻击</th>\n                      <th style={{ width: '5%' }}>防御</th>\n                      <th style={{ width: '5%' }}>魔抗</th>\n                      <th style={{ width: '13%' }}>暗杀补正</th>\n                      <th style={{ width: '13%' }}>掉落</th>\n                    </tr>\n                  </thead>\n                </table>\n              </div>\n            </div>\n          </div>\n        </Affix>\n        <div className=\"ant-table ant-table-bordered ant-table-middle\">\n          <div className=\"ant-table-content\">\n            <div className=\"ant-table-body\">\n              <table style={{ textAlign: 'center' }}>\n                <colgroup style={{ width: '13%' }} />\n                <colgroup style={{ width: '5%' }} />\n                <colgroup style={{ width: '13%' }} />\n                <colgroup style={{ width: '13%' }} />\n                <colgroup style={{ width: '5%' }} />\n                <colgroup style={{ width: '5%' }} />\n                <colgroup style={{ width: '5%' }} />\n                <colgroup style={{ width: '5%' }} />\n                <colgroup style={{ width: '5%' }} />\n                <colgroup style={{ width: '5%' }} />\n                <colgroup style={{ width: '13%' }} />\n                <colgroup style={{ width: '13%' }} />\n\n                <tbody className=\"ant-table-tbody\">\n                  {parsedEnemies.map((enemy: any, index: number) => {\n                    if (enemy.duplicated) {\n                      return null;\n                    }\n                    if (enemy.EnemyID >= 0 && enemy.EnemyID < 1000) {\n                      if (enemy.Param_ChangeParam) {\n                        return (\n                          <Popover\n                            key={`enemy-table-${index}`}\n                            content={\n                              <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                                <div className=\"ant-table-content\">\n                                  <div className=\"ant-table-body\">\n                                    <table>\n                                      <thead className=\"ant-table-thead\">\n                                        <tr>\n                                          <th>点阵</th>\n                                          <th>属性</th>\n                                          <th>攻击属性</th>\n                                          <th>攻速</th>\n                                          <th>射程</th>\n                                          <th>HP</th>\n                                          <th>攻击</th>\n                                          <th>防御</th>\n                                          <th>魔抗</th>\n                                          <th>暗杀补正</th>\n                                          <th>变身条件</th>\n                                        </tr>\n                                      </thead>\n                                      <tbody className=\"ant-table-tbody\">\n                                        {enemy.Changes.map(\n                                          (enemyChange: any, index: number) =>\n                                            this.trGen(\n                                              enemyChange,\n                                              index,\n                                              drops,\n                                              true,\n                                            ),\n                                        )}\n                                      </tbody>\n                                    </table>\n                                  </div>\n                                </div>\n                              </div>\n                            }\n                          >\n                            {this.trGen(enemy, index, drops)}\n                          </Popover>\n                        );\n                      }\n                      return this.trGen(enemy, index, drops);\n                    } else if (enemy.EnemyID === -1) {\n                      // wait\n                      return null;\n                    } else if (enemy.EnemyID === 2000) {\n                      // exclution mark\n                      return null;\n                    } else if (enemy.EnemyID >= 1000 && enemy.EnemyID < 2000) {\n                      // quest event text\n                      return (\n                        <tr key={`enemy-table-${index}`}>\n                          <td\n                            style={{\n                              background: '#f5f6fa',\n                              fontWeight: 'bold',\n                              textAlign: 'center',\n                              color: 'rgba(0, 0, 0, 0.85)',\n                            }}\n                          >\n                            {this.props.battleTalks[enemy.EnemyID - 1000].Name}\n                          </td>\n                          <td colSpan={11} style={{ textAlign: 'left' }}>\n                            {\n                              this.props.battleTalks[enemy.EnemyID - 1000]\n                                .Message\n                            }\n                          </td>\n                        </tr>\n                      );\n                    } else if (enemy.EnemyID === 4201) {\n                      // command, play se or call a event, etc\n                      const command = enemy.EntryCommand;\n                      const match = /CallEvent\\(([\\d,]+)\\)/.exec(command);\n                      if (match) {\n                        return match[1].split(',').map(s => {\n                          const recordIndex = Number.parseInt(s, 10);\n                          const talk: any = _.find(\n                            this.props.quest.Mission.BattleTalks,\n                            {\n                              RecordIndex: recordIndex,\n                            },\n                          );\n                          if (!talk) {\n                            return null;\n                          }\n                          return (\n                            <tr\n                              key={`enemy-table-${index}-event-${recordIndex}`}\n                            >\n                              <td\n                                style={{\n                                  background: '#f5f6fa',\n                                  fontWeight: 'bold',\n                                  textAlign: 'center',\n                                  color: 'rgba(0, 0, 0, 0.85)',\n                                }}\n                              >\n                                {talk.Name}\n                              </td>\n                              <td colSpan={11} style={{ textAlign: 'left' }}>\n                                {talk.Message}\n                              </td>\n                            </tr>\n                          );\n                        });\n                      }\n                      return (\n                        <tr\n                          style={{ display: 'none' }}\n                          key={`enemy-table-${index}`}\n                        >\n                          <td colSpan={12}>{enemy.EntryCommand}</td>\n                        </tr>\n                      );\n                    } else {\n                      return (\n                        <tr\n                          style={{ display: 'none' }}\n                          key={`enemy-table-${index}`}\n                        >\n                          <td colSpan={12}>{JSON.stringify(enemy)}</td>\n                        </tr>\n                      );\n                    }\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { Row, Col, Icon, Input, Spin } from 'antd';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport _ from 'lodash';\n\ninterface ClassListCardProps {\n  class: any;\n  classes: any[];\n  // onHashChange: (e: Event) => void;\n}\n\ninterface ClassListCardStates {\n  active: boolean;\n  success: boolean;\n  nickName: string[];\n}\n\nexport default class ClassListCard extends React.Component<\n  ClassListCardProps,\n  ClassListCardStates\n> {\n  public state: ClassListCardStates = {\n    active: false,\n    success: false,\n    nickName: this.props.class.NickName || [],\n  };\n\n  public flashSuccess = () => {\n    this.setState({ success: true });\n    setTimeout(() => {\n      this.setState({ success: false });\n    }, 1000);\n  };\n\n  public getClass(classID: number, genLink = false, index: number) {\n    const unitClass = _.find(this.props.classes, ['ClassID', classID]);\n    if (unitClass) {\n      return (\n        <span key={`link-to-${classID}-${index}`} className=\"label\">\n          {unitClass.Name}\n        </span>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  public render() {\n    const { class: unitClass, ...res } = this.props;\n    return (\n      <Row\n        {...res}\n        id={unitClass.ClassID}\n        className=\"list-card class-list-card\"\n        style={{ cursor: 'default' }}\n      >\n        <Col span={2}>{unitClass.ClassID}</Col>\n        <Col span={3} className={unitClass.notBase ? '' : 'important'}>\n          {unitClass.Name}\n        </Col>\n        <Col span={3}>\n          {unitClass.JobChange\n            ? this.getClass(unitClass.JobChange, true, 0)\n            : null}\n        </Col>\n        <Col span={6}>\n          {[\n            unitClass.JobChangeMaterial1,\n            unitClass.JobChangeMaterial2,\n            unitClass.JobChangeMaterial3,\n          ]\n            .map((mat: number, index: number) =>\n              this.getClass(mat, false, index),\n            )\n            .filter(c => c)}\n        </Col>\n        <Col span={5}>\n          {[unitClass.Data_ExtraAwakeOrb1, unitClass.Data_ExtraAwakeOrb2]\n            .map((mat: number, index: number) =>\n              this.getClass(mat, false, index),\n            )\n            .filter(c => c)}\n        </Col>\n        <Col span={5}>\n          {[unitClass.AwakeType1, unitClass.AwakeType2]\n            .map((mat: number, index: number) =>\n              this.getClass(mat, true, index),\n            )\n            .filter(c => c)}\n        </Col>\n        {!unitClass.notBase && (\n          <div\n            className={\n              `list-card-addon ` +\n              (this.state.active && 'active ') +\n              (this.state.success && 'success')\n            }\n            onClick={e => {\n              e.stopPropagation();\n            }}\n          >\n            <Mutation<{}, { ClassID: number; NickName: string[] }>\n              mutation={gql`\n                mutation updateClassMeta($ClassID: Int!, $NickName: [String]) {\n                  updateClassMeta(ClassID: $ClassID, NickName: $NickName) {\n                    NickName\n                  }\n                }\n              `}\n              onCompleted={this.flashSuccess}\n            >\n              {(updateClassMeta, { loading }) => (\n                <Spin spinning={loading}>\n                  <Row>\n                    <Col span={2}>\n                      <Icon\n                        onClick={() =>\n                          this.setState({ active: !this.state.active })\n                        }\n                        style={{ cursor: 'pointer' }}\n                        type={\n                          this.state.active ? 'right-circle' : 'left-circle'\n                        }\n                        theme=\"outlined\"\n                      />\n                    </Col>\n                    <Col span={20}>\n                      <span className=\"label\">昵称:</span>\n                      <Input\n                        value={this.state.nickName.join(',')}\n                        onChange={e =>\n                          this.setState({\n                            nickName: e.target.value.split(/[,， ]/),\n                          })\n                        }\n                      />\n                    </Col>\n                    <Col span={2}>\n                      <Icon\n                        type=\"check-circle\"\n                        theme=\"filled\"\n                        style={{ cursor: 'pointer' }}\n                        onClick={() =>\n                          updateClassMeta({\n                            variables: {\n                              ClassID: unitClass.ClassID,\n                              NickName: this.state.nickName,\n                            },\n                          })\n                        }\n                      />\n                    </Col>\n                  </Row>\n                </Spin>\n              )}\n            </Mutation>\n          </div>\n        )}\n      </Row>\n    );\n  }\n}\n","import * as React from 'react';\nimport {\n  Layout,\n  Row,\n  Col,\n  Spin,\n  Pagination,\n  Input,\n  Affix,\n  Popover,\n  Alert,\n} from 'antd';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport _ from 'lodash';\nimport ClassListCard from '../../ClassListCard';\nimport AbilityConfigTable from '../../AbilityConfigTable';\n\nconst { Content } = Layout;\nconst { Search } = Input;\n\ninterface Data {\n  classes: Array<{\n    ClassID: number;\n    Name: string;\n    Explanation: string;\n    JobChange: number;\n    JobChangeMaterial1: number;\n    JobChangeMaterial2: number;\n    JobChangeMaterial3: number;\n    Data_ExtraAwakeOrb1: number;\n    Data_ExtraAwakeOrb2: number;\n    AwakeType1: number;\n    AwakeType2: number;\n    NickName: string;\n    ClassAbilityConfig1: {\n      _InvokeType: number;\n      _TargetType: number;\n      _InfluenceType: number;\n      _Param1: number;\n      _Param2: number;\n      _Param3: number;\n      _Param4: number;\n      _Command: string;\n      _ActivateCommand: string;\n    };\n    ClassAbilityPower1: number;\n  }>;\n  abilityConfigMetas: Array<{\n    ID: number;\n    Description: string;\n  }>;\n}\n\ninterface ClassListStates {\n  currentPage: number;\n  search: string;\n}\n\nexport default class ClassList extends React.Component<any, ClassListStates> {\n  public state = {\n    currentPage: 1,\n    search: '',\n  };\n  public classes: any[] = [];\n\n  public setSearch(value: string) {\n    this.setState({ search: value, currentPage: 1 });\n  }\n\n  public classFilter = (unitClass: any) => {\n    return JSON.stringify(unitClass).includes(this.state.search);\n  };\n\n  public render() {\n    return (\n      <Query<Data>\n        query={gql`\n          query {\n            classes {\n              ClassID\n              Name\n              Explanation\n              JobChange\n              JobChangeMaterial1\n              JobChangeMaterial2\n              JobChangeMaterial3\n              Data_ExtraAwakeOrb1\n              Data_ExtraAwakeOrb2\n              AwakeType1\n              AwakeType2\n              NickName\n              ClassAbilityConfig1 {\n                _InvokeType\n                _TargetType\n                _InfluenceType\n                _Param1\n                _Param2\n                _Param3\n                _Param4\n                _Command\n                _ActivateCommand\n              }\n              ClassAbilityPower1\n            }\n            abilityConfigMetas {\n              ID\n              Description\n            }\n          }\n        `}\n      >\n        {({ loading, error, data }) => {\n          if (data && data.classes) {\n            this.classes = data.classes.slice();\n            this.classes.forEach((unitClass: any) => {\n              if (unitClass.JobChange) {\n                const index = _.findIndex(this.classes, [\n                  'ClassID',\n                  unitClass.JobChange,\n                ]);\n                if (index !== 0) {\n                  this.classes[index] = {\n                    ...this.classes[index],\n                    notBase: true,\n                  };\n                }\n              } else if (unitClass.AwakeType1) {\n                const index1 = _.findIndex(this.classes, [\n                  'ClassID',\n                  unitClass.AwakeType1,\n                ]);\n                if (index1 !== 0) {\n                  this.classes[index1] = {\n                    ...this.classes[index1],\n                    notBase: true,\n                  };\n                }\n                const index2 = _.findIndex(this.classes, [\n                  'ClassID',\n                  unitClass.AwakeType2,\n                ]);\n                if (index2 !== 0) {\n                  this.classes[index2] = {\n                    ...this.classes[index2],\n                    notBase: true,\n                  };\n                }\n              }\n            });\n          }\n\n          return (\n            <Content className=\"container\">\n              <Alert\n                message=\"由于职业的被动信息和角色的被动一样（via轴），请去被动页面修改被动描述。\"\n                type=\"warning\"\n                showIcon\n                style={{ marginBottom: 16 }}\n              />\n              <Spin spinning={loading}>\n                <Search\n                  placeholder=\"搜索职业\"\n                  value={this.state.search}\n                  onChange={event => {\n                    this.setSearch(event.target.value);\n                  }}\n                  enterButton\n                />\n                <Affix>\n                  <Row className=\"sorter-block\">\n                    <Col span={2}>#</Col>\n                    <Col span={3}>职业</Col>\n                    <Col span={3}>转职目标</Col>\n                    <Col span={6}>转职素材</Col>\n                    <Col span={5}>珠子</Col>\n                    <Col span={5}>二觉目标</Col>\n                  </Row>\n                </Affix>\n                {data &&\n                  data.classes &&\n                  this.classes\n                    .filter(this.classFilter)\n                    .slice(\n                      50 * (this.state.currentPage - 1),\n                      50 * this.state.currentPage,\n                    )\n                    .map((unitClass: any) => {\n                      return (\n                        <Popover\n                          content={\n                            <div>\n                              <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                                <div className=\"ant-table-content\">\n                                  <div className=\"ant-table-body\">\n                                    <table>\n                                      <thead className=\"ant-table-thead\">\n                                        <tr>\n                                          <th>职业名</th>\n                                          <th>职业描述</th>\n                                          <th>被动强度</th>\n                                        </tr>\n                                      </thead>\n                                      <tbody className=\"ant-table-tbody\">\n                                        <tr>\n                                          <td>{unitClass.Name}</td>\n                                          <td>{unitClass.Explanation}</td>\n                                          <td>\n                                            {unitClass.ClassAbilityPower1}\n                                          </td>\n                                        </tr>\n                                      </tbody>\n                                    </table>\n                                  </div>\n                                </div>\n                              </div>\n                              {unitClass.ClassAbilityConfig1.length > 0 && (\n                                <AbilityConfigTable\n                                  style={{ marginTop: 8 }}\n                                  configs={unitClass.ClassAbilityConfig1}\n                                  configMetas={data.abilityConfigMetas}\n                                />\n                              )}\n                            </div>\n                          }\n                          key={unitClass.ClassID}\n                        >\n                          <ClassListCard\n                            class={unitClass}\n                            classes={this.classes}\n                          />\n                        </Popover>\n                      );\n                    })}\n                {data && data.classes && (\n                  <Pagination\n                    defaultCurrent={1}\n                    defaultPageSize={50}\n                    current={this.state.currentPage}\n                    onChange={page => this.setState({ currentPage: page })}\n                    total={data.classes.filter(this.classFilter).length}\n                  />\n                )}\n              </Spin>\n            </Content>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n","import React from 'react';\nimport { Col, Row, Spin, Icon, Input } from 'antd';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport classNames from 'classnames';\nimport styles from './index.module.less';\n\ninterface DescriptionInputProps {\n  config?: {\n    ID: number;\n    Description: string;\n  };\n  ID: number;\n  mutationFunction: string;\n  // onIDFilterChange: (filter: number[]) => void;\n  // IDFilter: number[];\n  active: boolean;\n  onToggleFilter: () => void;\n}\n\ninterface DescriptionInputStates {\n  value: string;\n  success: boolean;\n  error: boolean;\n  editing: boolean;\n}\n\nexport default class DescriptionInput extends React.Component<\n  DescriptionInputProps,\n  DescriptionInputStates\n> {\n  public state = {\n    value: this.props.config ? this.props.config.Description : '',\n    success: false,\n    error: false,\n    editing: false,\n  };\n\n  private ref?: HTMLElement | null;\n  private update: any;\n\n  private flash = (state: 'success' | 'error') => {\n    this.setState({ [state]: true } as any, () => {\n      window.setTimeout(() => {\n        this.setState({ [state]: false } as any);\n      }, 500);\n    });\n  };\n\n  private enableEdit = () => {\n    this.setState({ editing: true });\n    document.addEventListener('click', this.outerClick);\n  };\n\n  private outerClick = (e: MouseEvent) => {\n    if (\n      this.ref &&\n      !(e.target === this.ref || this.ref.contains(e.target as Node))\n    ) {\n      this.handleUpdate();\n    }\n  };\n\n  private handleUpdate = () => {\n    this.update({\n      variables: {\n        ID: this.props.ID,\n        Description: this.state.value ? this.state.value : undefined,\n      },\n    });\n    this.setState({ editing: false });\n    document.removeEventListener('click', this.outerClick);\n  };\n\n  public render() {\n    const { ID } = this.props;\n    return (\n      <Mutation<\n        {},\n        {\n          ID: number;\n          Description: string;\n        }\n      >\n        key={ID}\n        mutation={gql`\n          mutation updateDescription(\n            $ID: Int!\n            $Description: String\n          ) {\n            ${this.props.mutationFunction} (\n              ID: $ID\n              Description: $Description\n            )\n          }\n        `}\n        onCompleted={this.flash.bind(this, 'success')}\n      >\n        {(updateDescription, { loading }) => {\n          this.update = updateDescription;\n          return (\n            <Spin spinning={loading}>\n              <div\n                ref={ref => (this.ref = ref)}\n                className={classNames(\n                  styles.influenceItem,\n                  { [styles.success]: this.state.success },\n                  { [styles.error]: this.state.error },\n                )}\n              >\n                <Row type=\"flex\" align=\"middle\">\n                  <Col span={6} onClick={this.props.onToggleFilter}>\n                    <span\n                      className={classNames('label', styles.IDTag, {\n                        [styles.active]: this.props.active,\n                      })}\n                    >\n                      {ID}\n                    </span>\n                  </Col>\n                  {this.state.editing ? (\n                    <>\n                      <Col span={16}>\n                        <Input\n                          value={this.state.value}\n                          className={styles.influenceInput}\n                          onChange={e => {\n                            this.setState({ value: e.target.value });\n                          }}\n                          autoFocus\n                        />\n                      </Col>\n                      <Col span={2} className={styles.actionCol}>\n                        <Icon\n                          type=\"check-circle\"\n                          theme=\"twoTone\"\n                          onClick={this.handleUpdate}\n                        />\n                      </Col>\n                    </>\n                  ) : (\n                    <Col\n                      span={18}\n                      onClick={this.enableEdit}\n                      className={styles.valueCol}\n                    >\n                      {this.state.value}\n                    </Col>\n                  )}\n                </Row>\n              </div>\n            </Spin>\n          );\n        }}\n      </Mutation>\n    );\n  }\n}\n","import * as React from 'react';\nimport {\n  Spin,\n  Layout,\n  Col,\n  Row,\n  Pagination,\n  Popover,\n  Input,\n  Tag,\n  Affix,\n  Drawer,\n  Icon,\n} from 'antd';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport classNames from 'classnames';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport DescriptionInput from '../../DescriptionInput';\nimport SkillInfluenceTable from '../../SkillInfluenceTable';\nimport styles from './index.module.less';\n\nconst { Content } = Layout;\nconst { Search } = Input;\n\ninterface Data {\n  skills: Array<{\n    SkillName: string;\n    WaitTime: number;\n    ContTimeMax: number;\n    PowerMax: number;\n    LevelMax: number;\n    Text: string;\n    InfluenceConfig: Array<{\n      Type_Collision: number;\n      Type_CollisionState: number;\n      Type_ChangeFunction: string;\n      Data_Target: number;\n      Data_InfluenceType: number;\n      Data_MulValue: number;\n      Data_MulValue2: number;\n      Data_MulValue3: number;\n      Data_AddValue: number;\n      _HoldRatioUpperLimit: number;\n      _Expression: string;\n      _ExpressionActivate: string;\n    }>;\n    CardHave: Array<{\n      CardID: number;\n      Name: string;\n    }>;\n  }>;\n  skillInfluenceMetas: Array<{\n    ID: number;\n    Description: string;\n  }>;\n}\n\ninterface SkillListStates {\n  currentPage: number;\n  search: string;\n  IDFilter: number[];\n  drawerVisible: boolean;\n}\n\nclass SkillList extends React.Component<any, SkillListStates> {\n  public state: SkillListStates = {\n    currentPage: 1,\n    search: '',\n    IDFilter: [],\n    drawerVisible: false,\n  };\n\n  public handleIDFilterChange = (newFilter: number[]) => {\n    this.setState({ IDFilter: newFilter, currentPage: 1 });\n  };\n\n  public setSearch = (search: string) => {\n    this.setState({ search, currentPage: 1 });\n  };\n\n  public skillFilter = (skill: any) => {\n    if (this.state.IDFilter.length > 0) {\n      for (const ID of this.state.IDFilter) {\n        const index = skill.InfluenceConfig.findIndex(\n          (config: any) => config.Data_InfluenceType === ID,\n        );\n        if (index === -1) {\n          return false;\n        }\n      }\n    }\n    if (\n      this.state.search &&\n      !JSON.stringify(skill).includes(this.state.search)\n    ) {\n      return false;\n    }\n    return true;\n  };\n\n  private findIDindex(ID: number) {\n    return this.state.IDFilter.findIndex(fiteredID => fiteredID === ID);\n  }\n\n  private handleToggleFilter(ID: number) {\n    const index = this.findIDindex(ID);\n    const { IDFilter } = this.state;\n    if (index > -1) {\n      this.setState({\n        IDFilter: [...IDFilter.slice(0, index), ...IDFilter.slice(index + 1)],\n      });\n    } else {\n      this.setState({ IDFilter: [...IDFilter, ID] });\n    }\n  }\n\n  private handleToggleDrawer = () => {\n    this.setState(state => ({ drawerVisible: !state.drawerVisible }));\n  };\n\n  public render() {\n    return (\n      <Query<Data>\n        query={gql`\n          query {\n            skills {\n              SkillName\n              WaitTime\n              ContTimeMax\n              PowerMax\n              LevelMax\n              Text\n              InfluenceConfig {\n                Type_Collision\n                Type_CollisionState\n                Type_ChangeFunction\n                Data_Target\n                Data_InfluenceType\n                Data_MulValue\n                Data_MulValue2\n                Data_MulValue3\n                Data_AddValue\n                _HoldRatioUpperLimit\n                _Expression\n                _ExpressionActivate\n              }\n              CardHave {\n                CardID\n                Name\n              }\n            }\n            skillInfluenceMetas {\n              ID\n              Description\n            }\n          }\n        `}\n      >\n        {({ loading, error, data }) => {\n          let maxInfluenceID = 1;\n          if (data && data.skills) {\n            data.skills.forEach((skill: any) => {\n              skill.InfluenceConfig.forEach((config: any) => {\n                if (config.Data_InfluenceType > maxInfluenceID) {\n                  maxInfluenceID = config.Data_InfluenceType;\n                }\n              });\n            });\n          }\n          return (\n            <>\n              <div\n                className={styles.drawerTrigger}\n                onClick={this.handleToggleDrawer}\n              >\n                <Icon type=\"setting\" />\n              </div>\n              <Drawer\n                visible={this.state.drawerVisible}\n                onClose={this.handleToggleDrawer}\n              >\n                <Spin spinning={loading}>\n                  {data &&\n                    data.skillInfluenceMetas &&\n                    Array.apply(maxInfluenceID).map(\n                      (dummy: any, index: number) => {\n                        const influence: any = _.find(\n                          data.skillInfluenceMetas,\n                          { ID: index + 1 },\n                        );\n\n                        return (\n                          <DescriptionInput\n                            key={index + 1}\n                            ID={index + 1}\n                            config={influence}\n                            mutationFunction=\"updateSkillInfluenceMeta\"\n                            active={this.findIDindex(index + 1) > -1}\n                            onToggleFilter={() =>\n                              this.handleToggleFilter(index + 1)\n                            }\n                          />\n                        );\n                      },\n                    )}\n                </Spin>\n              </Drawer>\n              <Content\n                className={classNames(['container', styles.skillListContainer])}\n              >\n                <Spin spinning={loading}>\n                  <div className={styles.tagBar}>\n                    {this.state.IDFilter.map(filter => (\n                      <Tag\n                        color=\"blue\"\n                        key={filter}\n                        closable\n                        onClose={this.handleToggleFilter.bind(this, filter)}\n                      >\n                        {filter}\n                      </Tag>\n                    ))}\n                  </div>\n                  <Search\n                    placeholder=\"搜索单位\"\n                    value={this.state.search}\n                    onChange={event => {\n                      this.setSearch(event.target.value);\n                    }}\n                    enterButton\n                  />\n                  <Affix>\n                    <Row className=\"sorter-block\">\n                      <Col span={4}>技能名</Col>\n                      <Col span={8}>效果</Col>\n                      <Col span={3}>持续</Col>\n                      <Col span={3}>再动</Col>\n                      <Col span={3}>技能等级</Col>\n                      <Col span={3}>&lt;POW_I&gt;</Col>\n                    </Row>\n                  </Affix>\n                  {data &&\n                    data.skills &&\n                    data.skills\n                      .filter(this.skillFilter)\n                      .slice(\n                        50 * (this.state.currentPage - 1),\n                        50 * this.state.currentPage,\n                      )\n                      .map((skill: any, index: number) => (\n                        <Popover\n                          key={index}\n                          content={\n                            <SkillInfluenceTable\n                              skill={skill}\n                              influences={data.skillInfluenceMetas}\n                            />\n                          }\n                        >\n                          <Row\n                            className=\"list-card\"\n                            style={{ cursor: 'default' }}\n                          >\n                            <Col className=\"important\" span={4}>\n                              {skill.SkillName}\n                            </Col>\n                            <Col className=\"important\" span={8}>\n                              {skill.Text}\n                            </Col>\n                            <Col span={3}>{skill.ContTimeMax}</Col>\n                            <Col span={3}>{skill.WaitTime}</Col>\n                            <Col span={3}>{skill.LevelMax}</Col>\n                            <Col span={3}>{skill.PowerMax}</Col>\n                            <Col span={24}>\n                              {skill.CardHave.map((card: any) => (\n                                <React.Fragment key={card.CardID}>\n                                  <Link to={`/unit/${card.CardID}`}>\n                                    {card.Name}\n                                  </Link>\n                                  &nbsp;\n                                </React.Fragment>\n                              ))}\n                            </Col>\n                          </Row>\n                        </Popover>\n                      ))}\n                  {data && data.skills && (\n                    <Pagination\n                      defaultCurrent={1}\n                      defaultPageSize={50}\n                      current={this.state.currentPage}\n                      onChange={page => this.setState({ currentPage: page })}\n                      total={data.skills.filter(this.skillFilter).length}\n                    />\n                  )}\n                </Spin>\n              </Content>\n            </>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default SkillList;\n","import * as React from 'react';\nimport {\n  Spin,\n  Layout,\n  Col,\n  Row,\n  Pagination,\n  Popover,\n  Input,\n  Tag,\n  Affix,\n  Drawer,\n  Icon,\n} from 'antd';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport classNames from 'classnames';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport DescriptionInput from '../../DescriptionInput';\nimport AbilityConfigTable from '../../AbilityConfigTable';\nimport styles from './index.module.less';\n\nconst { Content } = Layout;\nconst { Search } = Input;\n\ninterface Data {\n  abilities: Array<{\n    AbilityID: number;\n    Text: string;\n    AbilityName: string;\n    Config: {\n      _InvokeType: number;\n      _TargetType: number;\n      _InfluenceType: number;\n      _Param1: number;\n      _Param2: number;\n      _Param3: number;\n      _Param4: number;\n      _Command: string;\n      _ActivateCommand: string;\n    };\n    CardHave: {\n      CardID: number;\n      Name: string;\n    };\n  }>;\n  abilityConfigMetas: Array<{\n    ID: number;\n    Description: string;\n  }>;\n}\n\ninterface AbilityListStates {\n  currentPage: number;\n  search: string;\n  IDFilter: number[];\n  drawerVisible: boolean;\n}\n\nclass AbilityList extends React.Component<any, AbilityListStates> {\n  public state = {\n    currentPage: 1,\n    search: '',\n    IDFilter: [],\n    drawerVisible: false,\n  };\n  public setSearch = (search: string) => {\n    this.setState({ search, currentPage: 1 });\n  };\n  public handleIDFilterChange = (newFilter: number[]) => {\n    this.setState({ IDFilter: newFilter, currentPage: 1 });\n  };\n  public abilityFilter = (ability: any) => {\n    if (this.state.IDFilter.length > 0) {\n      for (const ID of this.state.IDFilter) {\n        const index = ability.Config.findIndex(\n          (config: any) => config._InfluenceType === ID,\n        );\n        if (index === -1) {\n          return false;\n        }\n      }\n    }\n    if (\n      this.state.search &&\n      !JSON.stringify(ability).includes(this.state.search)\n    ) {\n      return false;\n    }\n    return true;\n  };\n\n  private findIDindex(ID: number) {\n    return this.state.IDFilter.findIndex(fiteredID => fiteredID === ID);\n  }\n\n  private handleToggleFilter(ID: number) {\n    const index = this.findIDindex(ID);\n    const { IDFilter } = this.state;\n    if (index > -1) {\n      this.setState({\n        IDFilter: [...IDFilter.slice(0, index), ...IDFilter.slice(index + 1)],\n      });\n    } else {\n      this.setState({ IDFilter: [...IDFilter, ID] });\n    }\n  }\n\n  private handleToggleDrawer = () => {\n    this.setState(state => ({ drawerVisible: !state.drawerVisible }));\n  };\n\n  public render() {\n    return (\n      <Query<Data>\n        query={gql`\n          query {\n            abilities {\n              AbilityID\n              Text\n              AbilityName\n              Config {\n                _InvokeType\n                _TargetType\n                _InfluenceType\n                _Param1\n                _Param2\n                _Param3\n                _Param4\n                _Command\n                _ActivateCommand\n              }\n              CardHave {\n                CardID\n                Name\n              }\n            }\n            abilityConfigMetas {\n              ID\n              Description\n            }\n          }\n        `}\n      >\n        {({ loading, error, data }) => {\n          let maxID = 1;\n          if (data && data.abilities) {\n            data.abilities.forEach((ability: any) => {\n              ability.Config.forEach((config: any) => {\n                if (config._InfluenceType > maxID) {\n                  maxID = config._InfluenceType;\n                }\n              });\n            });\n          }\n          return (\n            <>\n              <div\n                className={styles.drawerTrigger}\n                onClick={this.handleToggleDrawer}\n              >\n                <Icon type=\"setting\" />\n              </div>\n              <Drawer\n                visible={this.state.drawerVisible}\n                onClose={this.handleToggleDrawer}\n              >\n                <Spin spinning={loading}>\n                  {data &&\n                    data.abilityConfigMetas &&\n                    Array.apply(maxID).map((dummy: any, index: number) => {\n                      const config: any = _.find(data.abilityConfigMetas, {\n                        ID: index + 1,\n                      });\n\n                      return (\n                        <DescriptionInput\n                          key={index + 1}\n                          ID={index + 1}\n                          config={config}\n                          mutationFunction=\"updateAbilityConfigMeta\"\n                          active={this.findIDindex(index + 1) > -1}\n                          onToggleFilter={() =>\n                            this.handleToggleFilter(index + 1)\n                          }\n                        />\n                      );\n                    })}\n                </Spin>\n              </Drawer>\n              <Content\n                className={classNames([\n                  'container',\n                  styles.abilityListContainer,\n                ])}\n              >\n                <Spin spinning={loading}>\n                  <div className={styles.tagBar}>\n                    {this.state.IDFilter.map(filter => (\n                      <Tag\n                        color=\"blue\"\n                        key={filter}\n                        closable\n                        onClose={this.handleToggleFilter.bind(this, filter)}\n                      >\n                        {filter}\n                      </Tag>\n                    ))}\n                  </div>\n                  <Search\n                    placeholder=\"搜索单位\"\n                    value={this.state.search}\n                    onChange={event => {\n                      this.setSearch(event.target.value);\n                    }}\n                    enterButton\n                  />\n                  <Affix>\n                    <Row className=\"sorter-block\">\n                      <Col span={8}>名称</Col>\n                      <Col span={16}>描述</Col>\n                    </Row>\n                  </Affix>\n                  {data &&\n                    data.abilities &&\n                    data.abilities\n                      .filter(this.abilityFilter)\n                      .slice(\n                        50 * (this.state.currentPage - 1),\n                        50 * this.state.currentPage,\n                      )\n                      .map((ability: any, index: number) => {\n                        return (\n                          <Popover\n                            key={index}\n                            content={\n                              <AbilityConfigTable\n                                configs={ability.Config}\n                                configMetas={data.abilityConfigMetas}\n                              />\n                            }\n                          >\n                            <Row\n                              className=\"list-card\"\n                              style={{ cursor: 'default' }}\n                            >\n                              <Col className=\"important\" span={8}>\n                                {ability.AbilityName}\n                              </Col>\n                              <Col className=\"important\" span={16}>\n                                {ability.Text}\n                              </Col>\n                              <Col span={24}>\n                                {ability.CardHave.map((card: any) => (\n                                  <Link\n                                    style={{ margin: '0 5px' }}\n                                    to={`/unit/${card.CardID}`}\n                                    key={card.CardID}\n                                  >\n                                    {card.Name}\n                                  </Link>\n                                ))}\n                              </Col>\n                            </Row>\n                          </Popover>\n                        );\n                      })}\n                  {data && data.abilities && (\n                    <Pagination\n                      defaultCurrent={1}\n                      defaultPageSize={50}\n                      current={this.state.currentPage}\n                      onChange={page => this.setState({ currentPage: page })}\n                      total={data.abilities.filter(this.abilityFilter).length}\n                    />\n                  )}\n                </Spin>\n              </Content>\n            </>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default AbilityList;\n","import * as React from 'react';\nimport {\n  Layout,\n  Row,\n  Col,\n  Spin,\n  Icon,\n  Popconfirm,\n  Drawer,\n  Tag,\n  Modal,\n} from 'antd';\nimport { Query, Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport classNames from 'classnames';\nimport styles from './index.module.less';\nimport { EMOJI_URL } from '../../../consts';\n\nconst { Content } = Layout;\n\ninterface Data {\n  emojis: Array<{\n    _id: string;\n    emoji: string;\n    name: string;\n    group: number[];\n  }>;\n}\n\ninterface EmojiListStates {\n  drawerVisible: boolean;\n  currentEmoji: {\n    _id: string;\n    name: string[];\n    emoji: string[];\n    group: number[];\n  };\n  modalVisible: boolean;\n  currentImage: string;\n}\nexport default class EmojiList extends React.Component<any, EmojiListStates> {\n  public state: EmojiListStates = {\n    drawerVisible: false,\n    currentEmoji: {\n      _id: '',\n      name: [],\n      emoji: [],\n      group: [],\n    },\n    modalVisible: false,\n    currentImage: '',\n  };\n\n  public isImg = (img: string) => {\n    const [, ext] = img.split('.');\n    if (['jpg', 'jpeg', 'png', 'gif', 'bmp'].indexOf(ext) !== -1) {\n      return true;\n    }\n    return false;\n  };\n\n  public render() {\n    return (\n      <Query<Data>\n        query={gql`\n          query {\n            emojis {\n              _id\n              emoji\n              name\n              group\n            }\n          }\n        `}\n      >\n        {({ loading, error, data, refetch }) => (\n          <Content className=\"container\">\n            <Spin spinning={loading}>\n              <Row className=\"sorter-block\">\n                <Col span={2}>#</Col>\n                <Col span={7}>名称</Col>\n                <Col span={9}>存在的群</Col>\n                <Col span={6}>数量</Col>\n              </Row>\n            </Spin>\n            {data &&\n              data.emojis &&\n              data.emojis.map((emoji: any, index: number) => (\n                <Row\n                  className=\"list-card\"\n                  key={emoji._id}\n                  onClick={() => {\n                    this.setState({ drawerVisible: true, currentEmoji: emoji });\n                  }}\n                >\n                  <Col span={2}>{index + 1}</Col>\n                  <Col span={7} className=\"important\">\n                    {emoji.name.join(', ')}\n                  </Col>\n                  <Col span={9}>{emoji.group.join(', ')}</Col>\n                  <Col span={6}>{emoji.emoji && emoji.emoji.length}</Col>\n                  <div\n                    className={classNames(\n                      'list-card-addon',\n                      styles.deleteIconContainer,\n                    )}\n                    onClick={e => {\n                      e.stopPropagation();\n                    }}\n                  >\n                    <Mutation\n                      mutation={gql`\n                        mutation removeEmoji($ID: String!) {\n                          removeEmoji(ID: $ID)\n                        }\n                      `}\n                    >\n                      {(removeEmoji: any, { data }: any) => (\n                        <Popconfirm\n                          title=\"是否要删除这个emoji？\"\n                          onConfirm={() => {\n                            removeEmoji({\n                              variables: {\n                                ID: emoji._id,\n                              },\n                            }).then(() => {\n                              refetch();\n                            });\n                          }}\n                        >\n                          <Icon\n                            className={styles.deleteIcon}\n                            type=\"delete\"\n                            theme=\"outlined\"\n                          />\n                        </Popconfirm>\n                      )}\n                    </Mutation>\n                  </div>\n                </Row>\n              ))}\n            <Drawer\n              width={'70%'}\n              className={styles.emojiDrawer}\n              title=\"emojij详情\"\n              onClose={() => this.setState({ drawerVisible: false })}\n              visible={this.state.drawerVisible}\n            >\n              <div style={{ marginBottom: 10 }}>\n                <span className=\"label\">名称:</span>\n                {this.state.currentEmoji.name.map(name => (\n                  <Tag key={name} color=\"blue\">\n                    {name}\n                  </Tag>\n                ))}\n              </div>\n              <div style={{ marginBottom: 10 }}>\n                <span className=\"label\">分组:</span>\n                {this.state.currentEmoji.group.map(group => (\n                  <Tag key={group} color=\"blue\">\n                    {group}\n                  </Tag>\n                ))}\n              </div>\n              <div className={styles.imageContainer}>\n                {this.state.currentEmoji.emoji.map(\n                  (emoji: any, index: number) => {\n                    return (\n                      <div key={emoji} className={styles.imageBox}>\n                        <div className={styles.imageCover}>\n                          <div className={styles.imageActionContainer}>\n                            <Icon\n                              className={styles.imageAction}\n                              type=\"eye\"\n                              theme=\"outlined\"\n                              onClick={() => {\n                                this.setState({\n                                  modalVisible: true,\n                                  currentImage: emoji,\n                                });\n                              }}\n                            />\n                            <Mutation\n                              mutation={gql`\n                                mutation removeEmojiItem(\n                                  $ID: String!\n                                  $index: Int!\n                                ) {\n                                  removeEmojiItem(ID: $ID, index: $index)\n                                }\n                              `}\n                            >\n                              {(removeEmojiItem: any) => {\n                                return (\n                                  <Popconfirm\n                                    title=\"是否要删除这个emoji？\"\n                                    onConfirm={() => {\n                                      removeEmojiItem({\n                                        variables: {\n                                          ID: this.state.currentEmoji._id,\n                                          index,\n                                        },\n                                      }).then((data: any) => {\n                                        if (data && data.data.removeEmojiItem) {\n                                          refetch();\n                                          this.setState(({ currentEmoji }) => ({\n                                            currentEmoji: {\n                                              ...currentEmoji,\n                                              emoji: [\n                                                ...currentEmoji.emoji.slice(\n                                                  0,\n                                                  index,\n                                                ),\n                                                ...currentEmoji.emoji.slice(\n                                                  index + 1,\n                                                ),\n                                              ],\n                                            },\n                                          }));\n                                        }\n                                      });\n                                    }}\n                                  >\n                                    <Icon\n                                      className={styles.imageAction}\n                                      type=\"delete\"\n                                      theme=\"outlined\"\n                                    />\n                                  </Popconfirm>\n                                );\n                              }}\n                            </Mutation>\n                          </div>\n                        </div>\n                        {this.isImg(emoji) ? (\n                          <img alt={emoji} src={`${EMOJI_URL}/${emoji}`} />\n                        ) : (\n                          <span>{emoji}</span>\n                        )}\n                      </div>\n                    );\n                  },\n                )}\n              </div>\n            </Drawer>\n            <Modal\n              onCancel={() => this.setState({ modalVisible: false })}\n              visible={this.state.modalVisible}\n              footer={null}\n              style={{ textAlign: 'center' }}\n            >\n              {this.isImg(this.state.currentImage) ? (\n                <img\n                  alt={this.state.currentImage}\n                  src={`${EMOJI_URL}/${this.state.currentImage}`}\n                />\n              ) : (\n                <span>{this.state.currentImage}</span>\n              )}\n            </Modal>\n          </Content>\n        )}\n      </Query>\n    );\n  }\n}\n","import * as React from 'react';\nimport {\n  withRouter,\n  Switch,\n  Route,\n  RouteComponentProps,\n} from 'react-router-dom';\nimport Home from './Routes/Home';\nimport UnitList from './Routes/UnitList';\nimport Unit from './Routes/Unit';\nimport UnitModal from './Routes/UnitModal';\nimport QuestList from './Routes/QuestList';\nimport Quest from './Routes/Quest';\nimport ClassList from './Routes/ClassList';\nimport SkillList from './Routes/SkillList';\nimport AbilityList from './Routes/AbilityList';\nimport EmojiList from './Routes/EmojiList';\n\nexport default withRouter(\n  class Router extends React.Component<RouteComponentProps<any>> {\n    private previousLocation = this.props.location;\n    public componentWillUpdate(nextProps: RouteComponentProps<any>) {\n      const { location } = this.props;\n\n      // set previousLocation if props.location is not modal\n      if (\n        nextProps.history.action !== 'POP' &&\n        (!location.state || !location.state.modal)\n      ) {\n        this.previousLocation = this.props.location;\n      }\n    }\n    public render() {\n      const { location } = this.props;\n\n      const isModal = !!(\n        location.state &&\n        location.state.modal &&\n        this.previousLocation !== location\n      ); // not initial render\n\n      return (\n        <>\n          <Switch location={isModal ? this.previousLocation : location}>\n            >\n            <Route path=\"/unit/:CardID\" component={Unit} />\n            <Route path=\"/quest/:QuestID\" component={Quest} />\n            <Route path=\"/unit\" exact component={UnitList} />\n            <Route path=\"/quest\" exact component={QuestList} />\n            <Route path=\"/class\" exact component={ClassList} />\n            <Route path=\"/skill\" exact component={SkillList} />\n            <Route path=\"/ability\" exact component={AbilityList} />\n            <Route path=\"/emoji\" exact component={EmojiList} />\n            <Route component={Home} />\n          </Switch>\n          {isModal && <Route path=\"/unit/:CardID\" component={UnitModal} />}\n        </>\n      );\n    }\n  },\n);\n","import { Layout } from 'antd';\nimport * as React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { ApolloProvider } from 'react-apollo';\nimport { LocaleProvider } from 'antd';\nimport zhCN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport './App.less';\nimport Header from './Components/Header';\nimport Router from './Components/Router';\nimport { API_URL } from './consts';\n\nmoment.locale('zh-cn');\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n          ),\n        );\n      }\n      if (networkError) {\n        console.log(`[Network error]: ${networkError}`);\n      }\n    }),\n    createUploadLink({\n      uri: API_URL,\n      credentials: 'same-origin',\n    }),\n  ]),\n  cache: new InMemoryCache(),\n});\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <HashRouter>\n        <LocaleProvider locale={zhCN}>\n          <ApolloProvider client={client}>\n            <Layout className=\"App\" style={{ height: '100%' }}>\n              <Header />\n              <Layout>\n                <Router />\n              </Layout>\n            </Layout>\n          </ApolloProvider>\n        </LocaleProvider>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.less';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root') as HTMLElement);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteIconContainer\":\"src-Components-Routes-EmojiList-index-module__deleteIconContainer--Ka13J\",\"deleteIcon\":\"src-Components-Routes-EmojiList-index-module__deleteIcon--396xM\",\"imageContainer\":\"src-Components-Routes-EmojiList-index-module__imageContainer--chkYQ\",\"imageBox\":\"src-Components-Routes-EmojiList-index-module__imageBox--10DU5\",\"imageCover\":\"src-Components-Routes-EmojiList-index-module__imageCover--NtOwb\",\"imageActionContainer\":\"src-Components-Routes-EmojiList-index-module__imageActionContainer--rumP3\",\"imageAction\":\"src-Components-Routes-EmojiList-index-module__imageAction--2P1vd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"influenceItem\":\"src-Components-DescriptionInput-index-module__influenceItem--R7YEY\",\"success\":\"src-Components-DescriptionInput-index-module__success--2rb0i\",\"error\":\"src-Components-DescriptionInput-index-module__error--1rwyo\",\"influenceInput\":\"src-Components-DescriptionInput-index-module__influenceInput--1BTEq\",\"actionCol\":\"src-Components-DescriptionInput-index-module__actionCol--2bm8U\",\"valueCol\":\"src-Components-DescriptionInput-index-module__valueCol--3ltw8\",\"IDTag\":\"src-Components-DescriptionInput-index-module__IDTag--1Zd-8\",\"active\":\"src-Components-DescriptionInput-index-module__active--2Q_fI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"src-Components-Poster-index-module__container--2yGhw\",\"posterNameContainer\":\"src-Components-Poster-index-module__posterNameContainer--L1Wzb\",\"posterBreadcrumb\":\"src-Components-Poster-index-module__posterBreadcrumb--1wH4i\",\"posterBreadcrumbText\":\"src-Components-Poster-index-module__posterBreadcrumbText--2ypfB\",\"active\":\"src-Components-Poster-index-module__active--2HoTE\",\"posterBreadcrumbDivider\":\"src-Components-Poster-index-module__posterBreadcrumbDivider--2xk2k\",\"poster\":\"src-Components-Poster-index-module__poster--3jD7r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"questContainer\":\"src-Components-Routes-Quest-index-module__questContainer--UjUhn\",\"questInfo\":\"src-Components-Routes-Quest-index-module__questInfo--1FqCx\",\"questInfoList\":\"src-Components-Routes-Quest-index-module__questInfoList--zSeLf\",\"questInfoListName\":\"src-Components-Routes-Quest-index-module__questInfoListName--2kqOB\",\"tableActions\":\"src-Components-Routes-Quest-index-module__tableActions--1H6ZX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"src-Components-Routes-Home-index-module__content--EeS5E\",\"logoblock\":\"src-Components-Routes-Home-index-module__logoblock--8orY9\",\"topLogo\":\"src-Components-Routes-Home-index-module__topLogo--6O_cc\",\"updateTime\":\"src-Components-Routes-Home-index-module__updateTime--3rliE\",\"cardDivider\":\"src-Components-Routes-Home-index-module__cardDivider--mSeou\",\"beg\":\"src-Components-Routes-Home-index-module__beg--3yezg\",\"postContainer\":\"src-Components-Routes-Home-index-module__postContainer--33_7T\"};"],"sourceRoot":""}