{"version":3,"sources":["Components/Routes/Home/index.module.less","logo.png","Components/Routes/SkillList/index.module.less","Components/Routes/AbilityList/index.module.less","Components/Routes/Home/pay.png","Components/Routes/Login/Login.module.less","context/UserContext.ts","Components/Header/index.tsx","Components/Card/Card.tsx","Components/Pill/Pill.tsx","consts.ts","utils.ts","Components/Poster/index.tsx","Components/Routes/Home/index.tsx","Components/UnitListCard/index.tsx","Components/Routes/UnitList/index.tsx","Components/SkillInfluenceTable/index.tsx","Components/AbilityConfigTable/index.tsx","Components/DotAnimation/index.tsx","Components/Routes/Unit/index.tsx","Components/Routes/UnitModal/index.tsx","Components/Routes/QuestList/types.ts","Components/Routes/QuestList/MissionShutter.tsx","Components/Routes/QuestList/QuestList.tsx","Components/Routes/Quest/EnemyTable.tsx","Components/Routes/Quest/index.tsx","Components/ClassListCard/index.tsx","Components/Routes/ClassList/index.tsx","Components/DescriptionInput/index.tsx","Components/Routes/SkillList/index.tsx","Components/Routes/AbilityList/index.tsx","Components/Routes/EmojiList/index.tsx","Components/Routes/Login/Login.tsx","Components/Router.tsx","App.tsx","serviceWorker.ts","index.tsx","Components/Routes/Quest/index.module.less","Components/Routes/EmojiList/index.module.less","Components/DescriptionInput/index.module.less","Components/Poster/index.module.less"],"names":["module","exports","content","logoblock","topLogo","updateTime","cardDivider","beg","postContainer","__webpack_require__","p","drawerTrigger","skillListContainer","tagBar","abilityListContainer","loginForm","createContainer","_useState","useState","localStorage","getItem","_useState2","Object","slicedToArray","state","setState","isLoggedIn","login","token","setItem","Header","SubMenu","Item","withRouter","_React$Component","HeaderBar","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","active","inherits","createClass","key","value","props","location","pathname","split","nextProps","react","className","react_router_dom","to","alt","src","logo","menu","mode","selectedKeys","title","React","ShadowedCard","react_default","a","createElement","es_card","assign","Component","Pill","type","bordered","colorType","onMouseEnter","onMouseLeave","onFocus","onClick","children","STATIC_URL","BASE_SERVER_URL","PLAYER_DOT_URL","EMOJI_URL","ICO_URL","ENEMY_CHANGE_COND","0","1","2","3","4","5","BONUS_TYPE","DefaultGetter","obj","index","6","7","8","9","Poster","selectedPoster","selectedYear","years","handleYearChange","e","target","handlePosterChange","poster","_this2","posters","slice","forEach","year","find","y","push","_this3","styles","container","es_radio","Group","onChange","map","Button","posterNameContainer","filter","posterBreadcrumb","classNames","posterBreadcrumbText","defineProperty","posterBreadcrumbDivider","BASE_GAME_URL","Content","status","Home","files","file","time","moment","UpdateTime","outDated","duration","diff","days","col","Name","md","tooltip","format","Pill_Pill_Pill","fromNow","react_apollo_esm","query","gql","_templateObject","_ref","loading","data","error","Card_ShadowedCard","badge","serverStatus","text","row","filesToPills","uploadFiles","popover","placement","payImage","width","Components_Poster","replace","PopoverContent","_ref2","card","_useForm","useForm","getFieldDecorator","getFieldsValue","stopPropagation","variables","id","CardID","UnitListCard_templateObject","_ref3","queryLoading","mutation","_templateObject2","onCompleted","message","success","updateCardMeta","_ref4","spin","spinning","es_form","layout","onSubmit","preventDefault","console","log","values","ConneName","conneName","NickName","nickName","label","initialValue","input","es_button","htmlType","UnitListCard","showUnit","setSearch","span","Kind","Rare","Race","tag","Assign","color","Identity","Class","ClassInit","Illust","trigger","UnitListCard_PopoverContent","icon","style","Search","UnitList","sorter","order","searchType","search","currentPage","setSorter","genSorter","cursor","getParam","keys","st","cardSorter","cardA","cardB","_this$state","paramA","paramB","cardFilter","searchString","sourceValue","parsedValue","Number","parseInt","JSON","stringify","includes","cardID","history","modal","nextStates","_","isEqual","UnitList_templateObject","UnitList_Content","placeholder","event","enterButton","addonBefore","es_select","Option","affix","cards","pagination","current","defaultPageSize","page","total","marginBottom","sort","Components_UnitListCard","SkillInfluenceTable","skill","influences","InfluenceConfig","config","description","influence","ID","Data_InfluenceType","Description","Data_MulValue","Data_MulValue2","Data_MulValue3","Data_AddValue","_HoldRatioUpperLimit","_Expression","_ExpressionActivate","Type_Collision","Type_CollisionState","Data_Target","AbilityConfigTable","configs","configMetas","objectSpread","c","_InfluenceType","_Param1","_Param2","_Param3","_Param4","_Command","_ActivateCommand","_InvokeType","_TargetType","DotAnimationSingleEntry","canvas","gif","canvasWidth","canvasHeight","top","bottom","left","right","blankWidth","blankHeight","tickNum","dot","Length","sprites","Entries","EntryID","Sprites","sprite","X","Y","Width","Height","OriginX","OriginY","frames","PatternNo","pat","Sprite","Data","Time","Math","max","min","height","GIF","workers","quality","workerScript","background","transparent","image","Image","crossOrigin","ctx","getContext","currentTick","currentFrame","gifStatus","onload","imageLoop","window","requestAnimationFrame","frameChanged","clearRect","drawImage","tempCanvas","document","tempCtx","fillStyle","fillRect","addFrame","copy","delay","on","blob","url","URL","createObjectURL","href","display","download","click","render","ref","DotAnimation","_this4","entry","DotAnimation_DotAnimationSingleEntry","TabPane","Unit","tabActiveKey","getStatus","hpMod","MaxHPMod","atkMod","AtkMod","defMod","DefMod","costDec","CostDecValue","costMod","CostModValue","BattleStyle","ranges","_Range_01","_Range_02","_Range_03","_Range_04","_Range_05","stat","classDataToUnit","ClassCC","ClassEvo","ClassEvo2a","_AwakePattern","ClassEvo2b","rangeId","InitHP","MaxHP","InitAtk","MaxAtk","InitDef","MaxDef","MaxLevel","MaxLevelUnit","cost","Cost","range","AtkArea","block","BlockNum","Explanation","maxLevelUnit","AttackWait","ClassID","countMinMax","maxLevel","mod","ceil","hp","atk","def","getGender","kind","handleTabChange","match","params","Unit_templateObject","Unit_Content","isEmpty","react_slick_lib_default","dots","ImageCG","toConsumableArray","ImageStand","img","tabs","activeKey","HarlemTextR","HarlemTextA","tab","shape","dangerouslySetInnerHTML","__html","p1","rowSpan","toString","MagicResistance","BonusType","get","BonusNum","BonusType2","divider","BonusNum2","BonusType3","BonusNum3","AbilityEvoInfo","AbilityID","AbilityInitInfo","Type","ability","Components_AbilityConfigTable","Config","AbilityName","Text","SkillInit","SkillName","SkillCC","SkillEvo","skills","ClassLV0SkillID","ClassLV1SkillID","Components_SkillInfluenceTable","ContTimeMax","WaitTime","LevelMax","PowerMax","Error","classData","ClassAbilityConfig1","ClassAbilityPower1","Dots","fontWeight","entryIndex","backgroundImage","backgroundPositionX","backgroundPositionY","DotAnimation_DotAnimation","UnitModal","visible","handleCancel","setTimeout","goBack","_this$props","footer","onCancel","Unit_Unit","MISSION_TYPE","Assault","Story","Emergency","Reproduce","DailyReproduce","Subjugation","DevilAdvent","Harlem","Daily","Challenge","Tutorial","Tower","Raid","MissionShutter","mission","useRouter","showQuest","questID","MissionShutter_templateObject","MissionID","Quests","quest","QuestID","bind","Charisma","ActionPoint","Panel","collapse","QuestList","QuestList_Content","QuestList_templateObject","missions","accordion","entries","groupBy","missionType","header","QuestList_MissionShutter","EnemyTableRows","showChange","handleRowClick","enemy","DotLength","attackSpeed","ATTACK_RANGE","ATTACK_SPEED","drops","_this$props$isChange","isChange","enemies","Changes","Fragment","_classNames","undefined","enemyRowWithChange","rowShow","transform","transition","theme","PatternID","Loop","Types","join","TypeAttack","MagicAttack","getAttackSpeed","HP","ATTACK_POWER","ARMOR_DEFENSE","MAGIC_DEFENSE","Param_ResistanceAssassin","PrizeCardID","Param_ChangeParam","Param_ChangeCondition","EnemyTable","Map","EntryNo","treasureDrop","onDrop","Enemies","Mission","mapLevel","Level","Treasure1","Treasure2","Treasure3","Treasure4","Treasure5","treasure","parsedEnemies","parseEnemy","enemyID","EnemyID","showDuplicated","duplicated","changes","newEnemy","textAlign","EnemyTable_EnemyTableRows","battleTalks","colSpan","Message","command","EntryCommand","exec","list","s","recordIndex","talk","BattleTalks","RecordIndex","Quest","pushDrop","handleDuplicatedChange","Quest_templateObject","Quest_Content","questContainer","questTitle","gutter","questInfo","sm","questInfoList","questInfoListName","RankExp","Gold","margin","tableActions","es_switch","checked","checkedChildren","unCheckedChildren","Quest_EnemyTable","Routes","routeWrapper","routes","route","OnEvent","RouteID","talkTable","EventArcs","arc","_TalkerName","_TalkText","ClassListCard","class","flashSuccess","classID","unitClass","classes","res","objectWithoutProperties","notBase","JobChange","getClass","JobChangeMaterial1","JobChangeMaterial2","JobChangeMaterial3","mat","Data_ExtraAwakeOrb1","Data_ExtraAwakeOrb2","AwakeType1","AwakeType2","ClassListCard_templateObject","updateClassMeta","ClassList","classFilter","ClassList_templateObject","findIndex","index1","index2","ClassList_Content","es_alert","showIcon","ClassList_Search","marginTop","abilityConfigMetas","ClassListCard_ClassListCard","defaultCurrent","DescriptionInput","editing","update","flash","enableEdit","addEventListener","outerClick","contains","handleUpdate","removeEventListener","DescriptionInput_templateObject","mutationFunction","updateDescription","influenceItem","align","onToggleFilter","IDTag","influenceInput","autoFocus","actionCol","valueCol","SkillList","IDFilter","drawerVisible","handleIDFilterChange","newFilter","skillFilter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","v","_iterator","Symbol","iterator","next","done","_ret","err","return","handleToggleDrawer","fiteredID","findIDindex","SkillList_templateObject","maxInfluenceID","drawer","onClose","skillInfluenceMetas","dummy","DescriptionInput_DescriptionInput","handleToggleFilter","SkillList_Content","closable","SkillList_Search","CardHave","AbilityList","abilityFilter","AbilityList_templateObject","maxID","abilities","AbilityList_Content","AbilityList_Search","EmojiList","currentEmoji","_id","name","emoji","group","modalVisible","currentImage","isImg","_img$split","ext","indexOf","EmojiList_templateObject","refetch","EmojiList_Content","emojis","deleteIconContainer","EmojiList_templateObject2","removeEmoji","popconfirm","onConfirm","then","deleteIcon","emojiDrawer","imageContainer","imageBox","imageCover","imageActionContainer","imageAction","_templateObject3","removeEmojiItem","Login","validateFields","UserContext","useContainer","handleLogin","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","sent","stop","Login_Content","prefix","_useRouter","prevLocationRef","useRef","useEffect","action","isModal","Components_Header","react_router","path","component","exact","locale","client","ApolloClient","link","ApolloLink","from","onError","graphQLErrors","networkError","locations","createUploadLink","uri","credentials","cache","InMemoryCache","App","locale_provider","zhCN","Provider","Components_Router","Boolean","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,QAAA,0DAAAC,UAAA,4DAAAC,QAAA,0DAAAC,WAAA,6DAAAC,YAAA,8DAAAC,IAAA,sDAAAC,cAAA,sFCDlBR,EAAAC,QAAiBQ,EAAAC,EAAuB,sDCCxCV,EAAAC,QAAA,CAAkBU,cAAA,qEAAAC,mBAAA,0EAAAC,OAAA,oFCAlBb,EAAAC,QAAA,CAAkBU,cAAA,uEAAAG,qBAAA,8EAAAD,OAAA,sFCDlBb,EAAAC,QAAiBQ,EAAAC,EAAuB,qDCCxCV,EAAAC,QAAA,CAAkBc,UAAA,uhBCoBHC,kBAlBf,WAAmB,IAAAC,EACSC,mBAASC,aAAaC,QAAQ,SAAW,IADlDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GACVO,EADUH,EAAA,GACHI,EADGJ,EAAA,GAEjB,MAAO,CACLK,iBACE,MACY,aAAVF,GACU,iBAAVA,GACU,iBAAVA,GACU,YAAVA,GAGJG,MATK,SASCC,GACJH,EAASG,GACTT,aAAaU,QAAQ,OAAQD,qECV3BE,aACAC,cAASC,WAMFC,uBAAU,SAAAC,GAAA,SAAAC,IAAA,IAAAC,EAAAC,EAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAJ,GAAA,QAAAK,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAR,EAAAf,OAAAwB,EAAA,EAAAxB,CAAAiB,MAAAH,EAAAd,OAAAyB,EAAA,EAAAzB,CAAAa,IAAAa,KAAAC,MAAAb,EAAA,CAAAG,MAAAW,OAAAP,MAKdnB,MAAQ,CACb2B,OAAQ,KANWd,EAAA,OAAAf,OAAA8B,EAAA,EAAA9B,CAAAa,EAAAD,GAAAZ,OAAA+B,EAAA,EAAA/B,CAAAa,EAAA,EAAAmB,IAAA,oBAAAC,MAAA,WASnBhB,KAAKd,SAAS,CACZ0B,OAAQZ,KAAKiB,MAAMC,SAASC,SAASC,MAAM,KAAK,OAV/B,CAAAL,IAAA,4BAAAC,MAAA,SAaYK,GAC/BrB,KAAKd,SAAS,CACZ0B,OAAQS,EAAUH,SAASC,SAASC,MAAM,KAAK,OAf9B,CAAAL,IAAA,SAAAC,MAAA,WAmBnB,OACEM,EAAA,cAAC/B,EAAD,CAAQgC,UAAU,UAChBD,EAAA,cAACE,EAAA,EAAD,CAAMC,GAAG,KACPH,EAAA,qBAAKI,IAAI,OAAOC,IAAKC,IAAML,UAAU,UAEvCD,EAAA,cAAAO,EAAA,GACEC,KAAK,aACLP,UAAU,aACVQ,aAAc,CAAC/B,KAAKf,MAAM2B,SAE1BU,EAAA,cAAC7B,EAAD,CAAMsB,IAAI,QACRO,EAAA,cAACE,EAAA,EAAD,CAAMC,GAAG,SAAT,iBAEFH,EAAA,cAAC7B,EAAD,CAAMsB,IAAI,SACRO,EAAA,cAACE,EAAA,EAAD,CAAMC,GAAG,UAAT,iBAEFH,EAAA,cAAC9B,EAAD,CAASwC,MAAM,4BACbV,EAAA,cAAC7B,EAAD,CAAMsB,IAAI,SACRO,EAAA,cAACE,EAAA,EAAD,CAAMC,GAAG,UAAT,iBAEFH,EAAA,cAAC7B,EAAD,CAAMsB,IAAI,SACRO,EAAA,cAACE,EAAA,EAAD,CAAMC,GAAG,UAAT,iBAEFH,EAAA,cAAC7B,EAAD,CAAMsB,IAAI,WACRO,EAAA,cAACE,EAAA,EAAD,CAAMC,GAAG,YAAT,kBAGJH,EAAA,cAAC7B,EAAD,CAAMsB,IAAI,SACRO,EAAA,cAACE,EAAA,EAAD,CAAMC,GAAG,UAAT,6BA/CW7B,EAAA,CACCqC,2ICTLC,2LAIjB,OAAOC,EAAAC,EAAAC,cAAAC,EAAA,EAAAvD,OAAAwD,OAAA,GAAUvC,KAAKiB,MAAf,CAAsBM,UAAU,iBAJDU,IAAMO,YCO3BC,4LACDC,GAChB,OAAQA,GACN,IAAK,SACH,MAAO,oBACT,QACE,MAAO,uDAIX,OACEpB,EAAA,qBACEC,UAAS,QAAAZ,OAAUX,KAAKiB,MAAM0B,UAC5B,gBADO,KAAAhC,OACYX,KAAK4C,UAAU5C,KAAKiB,MAAMyB,OAC/CG,aAAc7C,KAAKiB,MAAM4B,aACzBC,aAAc9C,KAAKiB,MAAM6B,aACzBC,QAAS/C,KAAKiB,MAAM8B,QACpBC,QAAShD,KAAKiB,MAAM+B,SAEnBhD,KAAKiB,MAAMgC,iBAnBchB,0ECNrBiB,GAAaC,oCACbC,GAAiBF,GAAa,aAC9BG,GAAYH,GAAa,OACzBI,GAAUJ,GAAa,OAEvBK,GAA6C,CACxDC,EAAG,2BACHC,EAAG,2BACHC,EAAG,2BACHC,EAAG,2BACHC,EAAG,6CACHC,EAAG,+BAEQC,GAAa,ICnB1B,WAEE,SAAAC,EAAmBC,GAAWjF,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAA+D,GAAA/D,KADtBgE,SACqB,EAC3BhE,KAAKgE,IAAMA,EAHf,OAAAjF,OAAA+B,EAAA,EAAA/B,CAAAgF,EAAA,EAAAhD,IAAA,MAAAC,MAAA,SAKaiD,GACT,OAAIA,KAASjE,KAAKgE,IACThE,KAAKgE,IAAIC,GAETA,MATbF,EAAA,GDmB0B,CAAkB,CAC1CN,EAAG,OACHC,EAAG,iBACHC,EAAG,iBACHC,EAAG,iBACHC,EAAG,iBACHK,EAAG,iBACHC,EAAG,6BACHC,EAAG,6BACHC,EAAG,2CEyDUC,8MArENrF,MAAQ,CACbsF,eAAgB,GAChBC,aAAc,MAGRC,MAAkB,KAgBlBC,iBAAmB,SAACC,GAC1B7E,EAAKZ,SAAS,CAAEsF,aAAcG,EAAEC,OAAO5D,WAGjC6D,mBAAqB,SAACC,GAC5BhF,EAAKZ,SAAS,CAAEqF,eAAgBO,wFAnBP,IAAAC,EAAA/E,KACjBgF,EAAYhF,KAAKiB,MAAjB+D,QACRhF,KAAKd,SAAS,CACZqF,eAAgBS,EAAQA,EAAQ7E,OAAS,GACzCqE,aAAcQ,EAAQA,EAAQ7E,OAAS,GAAG8E,MAAM,EAAG,KAErDD,EAAQE,QAAQ,SAAAJ,GACd,IAAMK,EAAOL,EAAOG,MAAM,EAAG,GACxBF,EAAKN,MAAMW,KAAK,SAAAC,GAAC,OAAIA,IAAMF,KAC9BJ,EAAKN,MAAMa,KAAKH,sCAaN,IAAAI,EAAAvF,KACd,OACEsB,EAAA,qBAAKC,UAAWiE,KAAOC,WACrBnE,EAAA,cAAAoE,EAAA,EAAOC,MAAP,CACEC,SAAU5F,KAAK0E,iBACf1D,MAAOhB,KAAKf,MAAMuF,cAEjBxE,KAAKyE,MAAMoB,IAAI,SAAAV,GAAI,OAClB7D,EAAA,cAAAoE,EAAA,EAAOI,OAAP,CAAc9E,MAAOmE,EAAMpE,IAAKoE,GAC7BA,MAIP7D,EAAA,qBAAKC,UAAWiE,KAAOO,qBACpB/F,KAAKiB,MAAM+D,QACTgB,OAAO,SAAAlB,GAAM,OAAIA,EAAOG,MAAM,EAAG,KAAOM,EAAKtG,MAAMuF,eACnDqB,IAAI,SAAAf,GAAM,OACTxD,EAAA,sBAAMC,UAAWiE,KAAOS,iBAAkBlF,IAAK+D,GAC7CxD,EAAA,sBACEC,UAAW2E,IAAWV,KAAOW,qBAARpH,OAAAqH,EAAA,EAAArH,CAAA,GAClByG,KAAO5E,OAAS2E,EAAKtG,MAAMsF,iBAAmBO,IAEjD9B,QAAS,kBAAMuC,EAAKV,mBAAmBC,KAEtCA,EAAOG,MAAM,IAEhB3D,EAAA,sBAAMC,UAAWiE,KAAOa,yBAAxB,SAIR/E,EAAA,qBACEC,UAAWiE,KAAOV,OAClBpD,IAAK1B,KAAKf,MAAMsF,eAChB5C,IAAG,GAAAhB,OF1EkB2F,iDE0ElB,UAAA3F,OAA6BX,KAAKf,MAAMsF,eAAxC,kBA/DQtC,mTCHbsE,eAEFC,GAAS,CACbhD,EAAG,UACHC,EAAG,aACHC,EAAG,SAYgB+C,wLACEC,GACnB,OAAOA,EAAMb,IAAI,SAAAc,GACf,IAAMC,EAAOC,IAAOF,EAAKG,YACnBC,EAAWF,IAAOG,SAASH,MAASI,KAAKL,IAAOM,QAAU,EAChE,OACE5F,EAAA,cAAA6F,EAAA,GAAKpG,IAAK4F,EAAKS,KAAMC,GAAI,IACvB/F,EAAA,cAAAgG,EAAA,GAAStF,MAAO4E,EAAKW,OAAO,4BAC1BjG,EAAA,cAACkG,EAAD,CAAM7E,UAAWoE,EAAUrE,KAAMqE,EAAW,SAAW,WACpDJ,EAAKS,KACN9F,EAAA,uBAAOC,UAAWiE,KAAO1H,YAAa8I,EAAKa,iDAOvC,IAAA3H,EAAAE,KACd,OACEsB,EAAA,cAACoG,EAAA,EAAD,CACEC,MAAOC,IAAFC,OAWJ,SAAAC,GAA8B,IAA3BC,EAA2BD,EAA3BC,QAAgBC,GAAWF,EAAlBG,MAAkBH,EAAXE,MAClB,OACE1G,EAAA,cAACiF,GAAD,CAAShF,UAAWiE,KAAO7H,SACzB2D,EAAA,qBAAKC,UAAWiE,KAAO5H,WACrB0D,EAAA,qBAAKI,IAAI,OAAOC,IAAKC,IAAML,UAAWiE,KAAO3H,UAC7CyD,EAAA,qCAEFA,EAAA,cAAC4G,EAAD,CAAMH,QAASA,IACXA,GAAWC,GACX1G,EAAA,yBACEA,EAAA,cAAA6G,EAAA,GACE3B,OAASA,GAAewB,EAAKI,cAC7BC,KAAK,iBAEP/G,EAAA,cAAAgH,EAAA,OAAMxI,EAAKyI,aAAaP,EAAKQ,gBAInClH,EAAA,qBAAKC,UAAWiE,KAAOxH,KACrBsD,EAAA,cAAAmH,EAAA,GACEC,UAAU,SACV/K,QACE2D,EAAA,qBACEI,IAAI,mFACJC,IAAKgH,KACLC,MAAO,OAIXtH,EAAA,oHAGFyG,GAAWC,GAAgC,IAAxBA,EAAKhD,QAAQ7E,QAChCmB,EAAA,cAACuH,GAAD,CACE7D,QAASgD,EAAKhD,QAAQa,IAAI,SAACf,GAAD,OACxBA,EAAOgE,QAAQ,QAAS,kBAlEV7G,u7BCDlC,IA4FM8G,GAA0C,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAAWC,EACdC,eAAtCC,EADoDF,EACpDE,kBAAmBC,EADiCH,EACjCG,eAC3B,OACElH,EAAAC,EAAAC,cAAA,OACEd,UAAS,mBACTyB,QAAS,SAAA2B,GACPA,EAAE2E,oBAGJnH,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CACE6B,UAAW,CAAEC,GAAIP,EAAKQ,QACtB9B,MAAOC,IAAF8B,OASJ,SAAAC,GAAA,IAAG3B,EAAH2B,EAAG3B,KAAe4B,EAAlBD,EAAS5B,QAAT,OACC5F,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CAQEmC,SAAUjC,IAAFkC,MAgBRC,YAAa,kBAAMC,GAAA,EAAQC,QAAQ,8BAElC,SAACC,EAADC,GAAA,IAAmBpC,EAAnBoC,EAAmBpC,QAAnB,OACC5F,EAAAC,EAAAC,cAAA+H,GAAA,GAAMC,SAAUtC,GAAW6B,GACzBzH,EAAAC,EAAAC,cAAAiI,GAAA,GACEC,OAAO,SACPC,SAAU,SAAA7F,GACRA,EAAE8F,iBACFC,QAAQC,IAAI,aACZ,IAAMC,EAASvB,IAEfa,EAAe,CACbX,UAAW,CACTE,OAAQR,EAAKQ,OACboB,UAAWD,EAAOE,UAClBC,SAAUH,EAAOI,SAAU5J,MAAM,UAKvCe,EAAAC,EAAAC,cAAAiI,GAAA,EAAM7K,KAAN,CAAWwL,MAAM,gBACd7B,EAAkB,WAAY,CAC7B8B,aAAclD,EAAKiB,KAAOjB,EAAKiB,KAAK8B,SAAW,IADhD3B,CAEEjH,EAAAC,EAAAC,cAAA8I,GAAA,UAELhJ,EAAAC,EAAAC,cAAAiI,GAAA,EAAM7K,KAAN,CAAWwL,MAAM,sBACd7B,EAAkB,YAAa,CAC9B8B,aAAclD,EAAKiB,KAAOjB,EAAKiB,KAAK4B,UAAY,IADjDzB,CAEEjH,EAAAC,EAAAC,cAAA8I,GAAA,UAELhJ,EAAAC,EAAAC,cAAAiI,GAAA,EAAM7K,KAAN,KACE0C,EAAAC,EAAAC,cAAA+I,GAAA,GAAQC,SAAS,SAAS3I,KAAK,WAA/B,yBAcL4I,GAtLmC,SAAAxD,GAI5C,IAHJmB,EAGInB,EAHJmB,KACAsC,EAEIzD,EAFJyD,SACAC,EACI1D,EADJ0D,UAEA,OACErJ,EAAAC,EAAAC,cAAAiG,EAAA,GAAK/G,UAAU,YAAYyB,QAAS,kBAAMuI,EAAStC,EAAKQ,UACtDtH,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GAAIxC,EAAKQ,QACpBtH,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GACTtJ,EAAAC,EAAAC,cAAA,QAAMd,UAAS,iBAAAZ,OAAmBsI,EAAKyC,SAEzCvJ,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GACTtJ,EAAAC,EAAAC,cAAA,QACEd,UAAS,+BAAAZ,OAAiCsI,EAAK0C,KAAtC,WACT3I,QAAS,SAAA2B,GACPA,EAAE2E,kBACFkC,EAAUvC,EAAK0C,KAAM,YAI3BxJ,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,EAAGlK,UAAU,aACrB0H,EAAK7B,MAERjF,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,EAAGlK,UAAU,UACrB0H,EAAK2C,MACJzJ,EAAAC,EAAAC,cAAA,QACEW,QAAS,SAAA2B,GACPA,EAAE2E,kBACFkC,EAAUvC,EAAK2C,KAAM,UAGvBzJ,EAAAC,EAAAC,cAAAwJ,GAAA,OAAM5C,EAAK2C,OAGd3C,EAAK6C,QACJ3J,EAAAC,EAAAC,cAAA,QACEW,QAAS,SAAA2B,GACPA,EAAE2E,kBACFkC,EAAUvC,EAAK6C,OAAQ,YAGzB3J,EAAAC,EAAAC,cAAAwJ,GAAA,GAAKE,MAAM,UAAU9C,EAAK6C,SAG7B7C,EAAK+C,UACJ7J,EAAAC,EAAAC,cAAA,QACEW,QAAS,SAAA2B,GACPA,EAAE2E,kBACFkC,EAAUvC,EAAK+C,SAAU,cAG3B7J,EAAAC,EAAAC,cAAAwJ,GAAA,GAAKE,MAAM,SAAS9C,EAAK+C,YAI/B7J,EAAAC,EAAAC,cAAA8E,EAAA,GACEsE,KAAM,EACNlK,UAAU,SACVyB,QAAS,SAAA2B,GACPA,EAAE2E,kBACFkC,EAAUvC,EAAKgD,MAAMC,UAAU9E,KAAM,0BAGtC6B,EAAKgD,MAAMC,UAAU9E,MAExBjF,EAAAC,EAAAC,cAAA8E,EAAA,GACEsE,KAAM,EACNlK,UAAU,SACVyB,QAAS,SAAA2B,GACPA,EAAE2E,kBACFkC,EAAUvC,EAAKkD,OAAQ,YAGxBlD,EAAKkD,QAERhK,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GACTtJ,EAAAC,EAAAC,cAAAoG,EAAA,GACE2D,QAAQ,QACR1D,UAAU,aACV/K,QAASwE,EAAAC,EAAAC,cAACgK,GAAD,CAAgBpD,KAAMA,KAE/B9G,EAAAC,EAAAC,cAAAiK,GAAA,GACEC,MAAO,CAAER,MAAO,SAChB/I,QAAS,SAAA2B,GAAC,OAAIA,EAAE2E,mBAChB5G,KAAK,2cC5FT6D,eACAiG,eAcaC,8MAIHxN,MAAwB,CACtCyN,OAAQ,SACRC,OAAO,EACPC,WAAY,MACZC,OAAQ,GACRC,YAAa,KASRC,UAAY,SAACL,GACdA,IAAW5M,EAAKb,MAAMyN,OACxB5M,EAAKZ,SAAS,CAAEyN,OAAQ7M,EAAKb,MAAM0N,QAEnC7M,EAAKZ,SAAS,CACZwN,SACAC,OAAO,OAINK,UAAY,SAAChL,EAAe0K,GACjC,OACEvK,EAAAC,EAAAC,cAAA,OAAKkK,MAAO,CAAEU,OAAQ,WAAajK,QAAS,kBAAMlD,EAAKiN,UAAUL,KAC9D1K,EACAlC,EAAKb,MAAMyN,SAAWA,GACrBvK,EAAAC,EAAAC,cAAAiK,GAAA,GAAM5J,KAAM5C,EAAKb,MAAM0N,MAAQ,aAAe,iBAM/CO,SAAW,SAACtI,EAAauI,GAE9B,OADAA,EAAK/L,MAAM,KAAK8D,QAAQ,SAACkI,GAAD,OAAiBxI,EAASA,EAAOwI,KAClDxI,KAGFyI,WAAa,SAACC,EAAYC,GAAe,IAAAC,EACpB1N,EAAKb,MAAvByN,EADsCc,EACtCd,OAAQC,EAD8Ba,EAC9Bb,MACVc,EAAS3N,EAAKoN,SAASI,EAAOZ,GAC9BgB,EAAS5N,EAAKoN,SAASK,EAAOb,GACpC,MAAsB,kBAAXe,EACFd,EAAQc,EAASC,EAASA,EAASD,EAEtCA,EAASC,EACJf,EAAQ,GAAK,EACXc,EAASC,EACXf,GAAS,EAAI,EAEb,KAKNgB,WAAa,SAAC1E,GACnB,IAAM2E,EAAe9N,EAAKb,MAAM4N,OACxBD,EAAe9M,EAAKb,MAApB2N,WACR,GAAmB,QAAfA,EAAsB,CACxB,IAAMiB,EAAc/N,EAAKoN,SAASjE,EAAM2D,GACpCkB,EAA+BF,EAInC,MAH2B,kBAAhBC,IACTC,EAAcC,OAAOC,SAASJ,EAAc,KAEvCC,IAAgBC,EAGzB,OAAOG,KAAKC,UAAUjF,GAAMkF,SAASrO,EAAKb,MAAM4N,WAM3CrB,UAAY,SAACqB,EAAgBD,GAClC9M,EAAKZ,SAAS,SAAAD,GAAK,MAAK,CACtB4N,SACAD,WAAYA,GAAc3N,EAAM2N,WAChCE,YAAa,QAIVvB,SAAW,SAAC6C,GACjBtO,EAAKmB,MAAMoN,QAAQ/I,KAAK,CACtBnE,SAAQ,SAAAR,OAAWyN,GACnBnP,MAAO,CAAEqP,OAAO,2FA7ElBjN,EACAkN,GAEA,OAAQC,KAAEC,QAAQF,EAAYvO,KAAKf,wCA8ErB,IAAA8F,EAAA/E,KACd,OACEmC,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CACEC,MAAOC,IAAF8G,OAoBJ,SAAA5G,GAAuB,IAApBC,EAAoBD,EAApBC,QAASC,EAAWF,EAAXE,KACX,OACE7F,EAAAC,EAAAC,cAAA+H,GAAA,GAAMC,SAAUtC,GACd5F,EAAAC,EAAAC,cAACsM,GAAD,CAASpN,UAAU,mBACjBY,EAAAC,EAAAC,cAACmK,GAAD,CACEoC,YAAY,2BACZ5N,MAAO+D,EAAK9F,MAAM4N,OAClBjH,SAAU,SAAAiJ,GACR9J,EAAKyG,UAAUqD,EAAMjK,OAAO5D,QAE9B8N,aAAW,EACXC,YACE5M,EAAAC,EAAAC,cAAA2M,GAAA,GACEhO,MAAO+D,EAAK9F,MAAM2N,WAClBhH,SAAU,SAAC5E,GACT0J,QAAQC,IAAI3J,GACZ+D,EAAK7F,SAAS,CAAE0N,WAAY5L,KAE9BuL,MAAO,CAAE3D,MAAO,KAEhBzG,EAAAC,EAAAC,cAAA2M,GAAA,EAAQC,OAAR,CAAejO,MAAM,OAArB,gBACAmB,EAAAC,EAAAC,cAAA2M,GAAA,EAAQC,OAAR,CAAejO,MAAM,QAArB,gBACAmB,EAAAC,EAAAC,cAAA2M,GAAA,EAAQC,OAAR,CAAejO,MAAM,QAArB,gBACAmB,EAAAC,EAAAC,cAAA2M,GAAA,EAAQC,OAAR,CAAejO,MAAM,QAArB,gBACAmB,EAAAC,EAAAC,cAAA2M,GAAA,EAAQC,OAAR,CAAejO,MAAM,UAArB,gBACAmB,EAAAC,EAAAC,cAAA2M,GAAA,EAAQC,OAAR,CAAejO,MAAM,YAArB,gBACAmB,EAAAC,EAAAC,cAAA2M,GAAA,EAAQC,OAAR,CAAejO,MAAM,wBAArB,gBAGAmB,EAAAC,EAAAC,cAAA2M,GAAA,EAAQC,OAAR,CAAejO,MAAM,UAArB,mBAINmB,EAAAC,EAAAC,cAAA6M,GAAA,OACE/M,EAAAC,EAAAC,cAAAiG,EAAA,GAAK/G,UAAU,gBACbY,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GAAI1G,EAAKiI,UAAU,IAAK,WACnC7K,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GAAI1G,EAAKiI,UAAU,eAAM,SACpC7K,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GAAI1G,EAAKiI,UAAU,eAAM,SACpC7K,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GAAI1G,EAAKiI,UAAU,eAAM,SACpC7K,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GAAI1G,EAAKiI,UAAU,eAAM,SACpC7K,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GACR1G,EAAKiI,UAAU,eAAM,yBAExB7K,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GAAI1G,EAAKiI,UAAU,eAAM,aAGvChF,GAAQA,EAAKmH,OACZhN,EAAAC,EAAAC,cAAA+M,GAAA,GACEC,QAAStK,EAAK9F,MAAM6N,YACpBwC,gBAAiB,GACjB1J,SAAU,SAAA2J,GAAI,OAAIxK,EAAK7F,SAAS,CAAE4N,YAAayC,KAC/CC,MAAOxH,EAAKmH,MAAMnJ,OAAOjB,EAAK4I,YAAYxN,OAC1CoM,MAAO,CAAEkD,aAAc,MAG1BzH,GACCA,EAAKmH,OACLnH,EAAKmH,MACFlK,QACAyK,KAAK3K,EAAKsI,YACVrH,OAAOjB,EAAK4I,YACZ1I,MACC,IAAMF,EAAK9F,MAAM6N,YAAc,GAC/B,GAAK/H,EAAK9F,MAAM6N,aAEjBjH,IAAI,SAACoD,GACJ,OACE9G,EAAAC,EAAAC,cAACsN,GAAD,CACE5O,IAAKkI,EAAKQ,OACVR,KAAMA,EACNsC,SAAUxG,EAAKwG,SACfC,UAAWzG,EAAKyG,cAIzBxD,GAAQA,EAAKmH,OACZhN,EAAAC,EAAAC,cAAA+M,GAAA,GACEC,QAAStK,EAAK9F,MAAM6N,YACpBwC,gBAAiB,GACjB1J,SAAU,SAAA2J,GAAI,OAAIxK,EAAK7F,SAAS,CAAE4N,YAAayC,KAC/CC,MAAOxH,EAAKmH,MAAMnJ,OAAOjB,EAAK4I,YAAYxN,oBArMxB8B,IAAMO,uFCwB7BoN,GAzDa,SAAA9H,GAAA,IAAG+H,EAAH/H,EAAG+H,MAAOC,EAAVhI,EAAUgI,WAAV,OAC1BxO,EAAA,qBAAKC,UAAU,iDACbD,EAAA,qBAAKC,UAAU,qBACbD,EAAA,qBAAKC,UAAU,kBACbD,EAAA,2BACEA,EAAA,uBAAOC,UAAU,mBACfD,EAAA,wBACEA,EAAA,wCACAA,EAAA,yCACAA,EAAA,yCACAA,EAAA,yCACAA,EAAA,oDACAA,EAAA,qDACAA,EAAA,8CACAA,EAAA,0DACAA,EAAA,wCACAA,EAAA,oDACAA,EAAA,0CAGJA,EAAA,uBAAOC,UAAU,mBACdsO,EAAME,gBAAgBlK,IAAI,SAACmK,EAAa/L,GAEvC,IAAMgM,EAAcH,EAChBA,EAAW1K,KACT,SAAC8K,GAAD,OACEA,EAAUC,KAAOH,EAAOI,qBAE5BJ,EACJ,OACE1O,EAAA,oBAAIP,IAAKkD,GACP3C,EAAA,wBACG0O,EAAOI,mBACPH,GACCA,EAAYI,aADb,MAAA1P,OAEOsP,EAAYI,cAEtB/O,EAAA,wBAAK0O,EAAOM,eACZhP,EAAA,wBAAK0O,EAAOO,gBACZjP,EAAA,wBAAK0O,EAAOQ,gBACZlP,EAAA,wBAAK0O,EAAOS,eACZnP,EAAA,wBAAK0O,EAAOU,sBACZpP,EAAA,wBAAK0O,EAAOW,aACZrP,EAAA,wBAAK0O,EAAOY,qBACZtP,EAAA,wBAAK0O,EAAOa,gBACZvP,EAAA,wBAAK0O,EAAOc,qBACZxP,EAAA,wBAAK0O,EAAOe,sBCOfC,GArDY,SAAAlJ,GAAA,IAAGmJ,EAAHnJ,EAAGmJ,QAASC,EAAZpJ,EAAYoJ,YAAa3E,EAAzBzE,EAAyByE,MAAzB,OACzBjL,EAAA,qBACEC,UAAU,gDACVgL,MAAKxN,OAAAoS,GAAA,EAAApS,CAAA,GAAOwN,IAEZjL,EAAA,qBAAKC,UAAU,qBACbD,EAAA,qBAAKC,UAAU,kBACbD,EAAA,2BACEA,EAAA,uBAAOC,UAAU,mBACfD,EAAA,wBACEA,EAAA,wCACAA,EAAA,8BACAA,EAAA,8BACAA,EAAA,8BACAA,EAAA,8BACAA,EAAA,+BACAA,EAAA,oDACAA,EAAA,oDACAA,EAAA,sDAGJA,EAAA,uBAAOC,UAAU,mBACd0P,EAAQpL,IAAI,SAACmK,EAAa/L,GAEzB,IAAMgM,EAAciB,EAChBA,EAAY9L,KAAK,SAACgM,GAAD,OAAYA,EAAEjB,KAAOH,EAAOqB,iBAC7CrB,EACJ,OACE1O,EAAA,oBAAIP,IAAKkD,GACP3C,EAAA,wBACG0O,EAAOqB,eACPpB,GACCA,EAAYI,aADb,MAAA1P,OAEOsP,EAAYI,cAEtB/O,EAAA,wBAAK0O,EAAOsB,SACZhQ,EAAA,wBAAK0O,EAAOuB,SACZjQ,EAAA,wBAAK0O,EAAOwB,SACZlQ,EAAA,wBAAK0O,EAAOyB,SACZnQ,EAAA,wBAAK0O,EAAO0B,UACZpQ,EAAA,wBAAK0O,EAAO2B,kBACZrQ,EAAA,wBAAK0O,EAAO4B,aACZtQ,EAAA,wBAAK0O,EAAO6B,gCChCxBC,8MAGGC,gBACAC,8FACoB,IAKrBC,EACAC,EANqBnN,EAAA/E,KACrBmS,EAAM,EACNC,EAAS,EACTC,EAAO,EACPC,EAAQ,EAGRC,EAAa,MACbC,EAAc,MACZC,EAAkBzS,KAAKiB,MAAMyR,IAAIC,OASjCC,EAAoB5S,KAAKiB,MAAMyR,IAAIG,QACvC7S,KAAKiB,MAAM6R,SACXC,QAAQlN,IAAI,SAACmN,GAAD,MAAkB,CAC9BC,EAAGD,EAAOC,EACVC,EAAGF,EAAOE,EACVC,MAAOH,EAAOG,MACdC,OAAQJ,EAAOI,OACfC,QAASL,EAAOK,QAAU,IAAO,EAAIL,EAAOK,QAC5CC,QAASN,EAAOM,QAAU,IAAO,EAAIN,EAAOM,WAI1CC,EAGCvT,KAAKiB,MAAMyR,IAAIG,QAAQ7S,KAAKiB,MAAM6R,SAASU,UAAU3N,IACxD,SAAC4N,GACC,MAAO,CAAEC,OAAQd,EAAQa,EAAIE,MAAOC,KAAMH,EAAIG,QAKlDL,EAASA,EACN1N,IAAI,SAAC4N,EAAKxP,GAAN,OAAAlF,OAAAoS,GAAA,EAAApS,CAAA,GACA0U,EADA,CAEHG,KACE3P,IAAUsP,EAAOpT,OAAS,EACtBsS,EAAUgB,EAAIG,KACdL,EAAOtP,EAAQ,GAAG2P,KAAOH,EAAIG,SAEpC5N,OAAO,SAAAyN,GAAG,OAAiB,IAAbA,EAAIG,OAGrBhB,EAAQ1N,QAAQ,SAAA8N,GACdX,EAAOwB,KAAKC,IAAIzB,EAAMW,EAAOK,SAC7Bf,EAAQuB,KAAKE,IAAIzB,EAAOU,EAAOK,QAAUL,EAAOG,OAEhDhB,EAAM0B,KAAKC,IAAI3B,EAAKa,EAAOM,SAC3BlB,EAASyB,KAAKE,IAAI3B,EAAQY,EAAOM,QAAUN,EAAOI,UAEpDnB,EAAcI,EAAOC,EACrBJ,EAAeC,EAAMC,EAGrBQ,EAAQ1N,QAAQ,SAAA8N,GACdT,EAAasB,KAAKE,IAAIxB,EAAYN,EAAce,EAAOK,SACvDb,EAAcqB,KAAKE,IAAIvB,EAAaN,EAAec,EAAOM,WAE5DtT,KAAK+R,OAAQnJ,MAAQqJ,EACrBjS,KAAK+R,OAAQiC,OAAS9B,EAItBlS,KAAKgS,IAAM,IAAIiC,GAAI,CACjBC,QAAS,EACTC,QAAS,EACTC,aAAc,iBACdxL,MAAOqJ,EACP+B,OAAQ9B,EACRmC,WAAY,UACZC,YAAa,aAIf,IAAMC,EAAQ,IAAIC,MAClBD,EAAME,YAAc,YACpBF,EAAM5S,IAAM3B,KAAKiB,MAAMsT,MACvB,IAAMG,EAAM1U,KAAK+R,OAAQ4C,WAAW,MAEhCC,EAAc,EACdC,GAAgB,EAEhBC,GAAY,EAkDhBP,EAAMQ,OAhDY,SAAZC,IAEJC,OAAOC,sBAAsBF,GAC7B,IAAIG,GAAe,EAEC,IAAhBP,IAEFO,GAAe,GADfN,GAAgB,KAEKtB,EAAOpT,SAC1B0U,EAAe,EACfC,GAAY,GAGdF,EAAcrB,EAAOsB,GAAcjB,MAGrCgB,IAEA,IAAM5B,EAASO,EAAOsB,GAAcnB,OAapC,GAZAgB,EAAIU,UAAU,EAAG,EAAGnD,EAAaC,GACjCwC,EAAIW,UACFd,EACAvB,EAAOC,EACPD,EAAOE,EACPF,EAAOG,MACPH,EAAOI,OACPnB,EAAce,EAAOK,QAAUd,EAC/BL,EAAec,EAAOM,QAAUd,EAChCQ,EAAOG,MACPH,EAAOI,QAEL0B,GAAaK,EAAc,CAE7B,IAAMG,EAAaC,SAASlT,cAAc,UAC1CiT,EAAWtB,OAAS9B,EACpBoD,EAAW1M,MAAQqJ,EACnB,IAAMuD,EAAUF,EAAWX,WAAW,MAEtCa,EAAQC,UAAY,UACpBD,EAAQE,SAAS,EAAG,EAAGzD,EAAaC,GACpCsD,EAAQH,UAAUtQ,EAAKgN,OAAS,EAAG,GACnChN,EAAKiN,IAAI2D,SAASH,EAAS,CACzBI,MAAM,EACNC,MAAOtC,EAAOsB,GAAcjB,MAAQ,IAAO,yCAQnC,IAAArO,EAAAvF,KACd,OACEsB,EAAA,yBACEA,EAAA,cAAAgG,EAAA,GAAStF,MAAM,+BACbV,EAAA,wBACE0B,QAAS,WACPuC,EAAKyM,IAAI8D,GAAG,WAAY,SAACC,GAEvB,IAAMC,EAAcC,IAAIC,gBAAgBH,GAClC3T,EAAImT,SAASlT,cAAc,KACjCD,EAAE+T,KAAOH,EACT5T,EAAEmK,MAAM6J,QAAU,OAClBhU,EAAEiU,SAAF,GAAA1V,OAAgB4E,EAAKtE,MAAMmN,OAA3B,KAAAzN,OAAqC4E,EAAKtE,MAAMyR,IAAItL,KAApD,KAAAzG,OACE4E,EAAKtE,MAAM6R,QADb,QAIA1Q,EAAEkU,UAEJ/Q,EAAKyM,IAAIuE,UAEXhK,MAAO,CAAEU,OAAQ,WACjBuJ,IAAK,SAAAA,GAAG,OAAIA,IAAQjR,EAAKwM,OAASyE,eAzKRvU,aAsLjBwU,oLACH,IAAAC,EAAA1W,KACd,OACEsB,EAAA,yBACGtB,KAAKiB,MAAMyR,IAAIG,QAAQhN,IAAI,SAAC8Q,EAAY1S,GAAb,OAC1B3C,EAAA,cAACsV,GAAD,CACE7V,IAAK4V,EAAMvP,KACXsL,IAAKgE,EAAKzV,MAAMyR,IAChB6B,MAAOnR,GAAc,IAAAzC,OAAO+V,EAAKzV,MAAMmN,OAAlB,QACrBA,OAAQsI,EAAKzV,MAAMmN,OACnB0E,QAAS7O,cAVqBhC,29RChLlCsE,eACAsQ,gBA2JaC,8MAIZ7X,MAAoB,CACzB8X,aAAc,MAETC,UAAY,SAAC/N,GAClB,IAAMgO,EAAQhO,EAAKiO,SAAW,IACxBC,EAASlO,EAAKmO,OAAS,IACvBC,EAASpO,EAAKqO,OAAS,IACPC,EAAmCtO,EAAjDuO,aAAqCC,EAAYxO,EAA1ByO,aACvBC,EAAgB1O,EAAKgD,MAAMC,UAA3ByL,YACJC,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,GACtBD,IACFC,EAAS,CACPD,EAAYE,UACZF,EAAYG,UACZH,EAAYI,UACZJ,EAAYK,UACZL,EAAYM,YAIhB,IAAMzR,EAAS,CACb,CACE0R,KAAM,eACNlQ,KAAMmQ,EAAgBlP,EAAKgD,MAAMC,UAAW,KAiChD,OA9BIjD,EAAKgD,MAAMmM,SACb5R,EAAOlB,KAAK,CACV4S,KAAM,KACNlQ,KAAMmQ,EAAgBlP,EAAKgD,MAAMmM,QAAS,KAG1CnP,EAAKgD,MAAMoM,UACb7R,EAAOlB,KAAK,CACV4S,KAAM,eACNlQ,KAAMmQ,EAAgBlP,EAAKgD,MAAMoM,SAAU,MAI7CpP,EAAKgD,MAAMqM,YACa,IAAvBrP,EAAKsP,eAA8C,IAAvBtP,EAAKsP,eAElC/R,EAAOlB,KAAK,CACV4S,KAAM,4BACNlQ,KAAMmQ,EAAgBlP,EAAKgD,MAAMqM,WAAY,MAI/CrP,EAAKgD,MAAMuM,YACa,IAAvBvP,EAAKsP,eAA8C,IAAvBtP,EAAKsP,eAElC/R,EAAOlB,KAAK,CACV4S,KAAM,4BACNlQ,KAAMmQ,EAAgBlP,EAAKgD,MAAMuM,WAAY,KAG1ChS,EACP,SAAS2R,EAATrQ,EAmBE2Q,GACA,IAlBEC,EAkBF5Q,EAlBE4Q,OACAC,EAiBF7Q,EAjBE6Q,MACAC,EAgBF9Q,EAhBE8Q,QACAC,EAeF/Q,EAfE+Q,OACAC,EAcFhR,EAdEgR,QACAC,EAaFjR,EAbEiR,OACAC,EAYFlR,EAZEkR,SACAC,EAWFnR,EAXEmR,aACMC,EAURpR,EAVEqR,KACSC,EASXtR,EATEuR,QACUC,EAQZxR,EAREyR,SACMhY,EAORuG,EAPEV,KACAoS,EAMF1R,EANE0R,YACcC,EAKhB3R,EALEmR,aACAS,EAIF5R,EAJE4R,WACAC,EAGF7R,EAHE6R,QAIF,SAASC,EACP7F,EACAD,EACA+F,EACAJ,EACAK,GAEA,MAAO,CACLjG,KAAKkG,KAAKD,GAAO/F,EAAqB,EAAI8F,GAAlB/F,EAAMC,KAC9BF,KAAKkG,KAAKD,GAAO/F,EAAqB0F,EAAeI,GAA7B/F,EAAMC,MAGlC,MAAO,CACLiG,GAAIJ,EAAYlB,EAAQC,EAAOK,EAAUC,EAAchC,GACvDgD,IAAKL,EAAYhB,EAASC,EAAQG,EAAUC,EAAc9B,GAC1D+C,IAAKN,EAAYd,EAASC,EAAQC,EAAUC,EAAc5B,GAC1D6B,KAAM,CAACA,EAAOzB,EAASyB,EAAOzB,EAAUF,GACxC6B,MACsB,IAApBxB,EAAOa,GACHkB,EAAU,KAASA,GAAW,IAC5B,EACAP,EACFxB,EAAOa,GACba,QACA/X,YACAkY,eACAD,cACAE,kBAICS,UAAY,SAACC,GAClB,OAAa,IAATA,EACKjY,EAAAC,EAAAC,cAAA,QAAMd,UAAU,wBACL,IAAT6Y,EACFjY,EAAAC,EAAAC,cAAA,QAAMd,UAAU,sBAEhBY,EAAAC,EAAAC,cAAA,QAAMd,UAAU,4BAIpB8Y,gBAAkB,SAACtD,GACxBjX,EAAKZ,SAAS,CACZ6X,0FAIY,IAAAhS,EAAA/E,KACRwJ,EAAKxJ,KAAKiB,MAAMqZ,MAAMC,OAAO9Q,OACnC,OACEtH,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CACEC,MAAOC,IAAF4S,MA+TLjR,UAAW,CAAEC,OAEZ,SAAAR,GAA8B,IAA3BjB,EAA2BiB,EAA3BjB,QAAgBC,GAAWgB,EAAlBf,MAAkBe,EAAXhB,MAClB,OACE7F,EAAAC,EAAAC,cAACoY,GAAD,CAASlZ,UAAU,6BACjBY,EAAAC,EAAAC,cAAA+H,GAAA,GACEC,SAAUtC,EACVwE,MAAO,CAAEyH,OAAQ,OAAQpL,MAAO,SAE/BZ,IAASwG,KAAEkM,QAAQ1S,IAClB7F,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAId,UAAU,cACZY,EAAAC,EAAAC,cAACb,EAAA,EAAD,CAAMC,GAAE,UAAAd,OAAYoN,OAAOC,SAASxE,EAAI,IAAM,IAC5CrH,EAAAC,EAAAC,cAAAiK,GAAA,GAAM5J,KAAK,UAGbP,EAAAC,EAAAC,cAAA,QACEd,UAAS,+BAAAZ,OAAiCqH,EAAKiB,KAAK0C,QAEtDxJ,EAAAC,EAAAC,cAAA,QAAMd,UAAS,iBAAAZ,OAAmBqH,EAAKiB,KAAKyC,QAC5CvJ,EAAAC,EAAAC,cAAA,YAAO2F,EAAKiB,KAAK7B,MACjBjF,EAAAC,EAAAC,cAACb,EAAA,EAAD,CAAMC,GAAE,SAAAd,OAAWoN,OAAOC,SAASxE,EAAI,IAAM,IAC3CrH,EAAAC,EAAAC,cAAAiK,GAAA,GAAM5J,KAAK,YAGfP,EAAAC,EAAAC,cAAA,SACG2F,EAAKiB,KAAK2C,MAAQzJ,EAAAC,EAAAC,cAAA,gBAAW2F,EAAKiB,KAAK2C,KAArB,KAClB5D,EAAKiB,KAAK6C,QACT3J,EAAAC,EAAAC,cAAA,gBAAW2F,EAAKiB,KAAK6C,OAArB,KAED9D,EAAKiB,KAAK+C,UACT7J,EAAAC,EAAAC,cAAA,gBAAW2F,EAAKiB,KAAK+C,SAArB,MAGJ7J,EAAAC,EAAAC,cAAA,OAAKd,UAAU,mBACbY,EAAAC,EAAAC,cAAA,OAAKd,UAAU,gBACbY,EAAAC,EAAAC,cAACsY,GAAAvY,EAAD,CACEwY,MAAI,EACJrZ,UAAS,MAAAZ,OAAQqH,EAAKiB,KAAK4R,QAAQ1a,SAElC,GAAAQ,OAAA5B,OAAA+b,GAAA,EAAA/b,CAAIiJ,EAAKiB,KAAK8R,YAAdhc,OAAA+b,GAAA,EAAA/b,CAA6BiJ,EAAKiB,KAAK4R,UAAShV,IAC/C,SAACmV,GAAD,OACE7Y,EAAAC,EAAAC,cAAA,OAAKtB,IAAKia,GACR7Y,EAAAC,EAAAC,cAAA,OAAKX,IAAKsZ,EAAKrZ,IAAG,GAAAhB,OT1pBrB,oCS0pBqBA,OAAqBqa,UAMjD7Y,EAAAC,EAAAC,cAAA4Y,GAAA,GACEC,UAAWnW,EAAK9F,MAAM8X,aACtBnR,SAAUb,EAAKsV,gBACf9Y,UACE,qBACCyG,EAAKiB,KAAKkS,aAAV,oBAAAxa,OACqBqH,EAAKiB,KAAKkS,YAAYhb,UAI7C6H,EAAKiB,KAAKmS,aACTpT,EAAKiB,KAAKmS,YAAYvV,IACpB,SAACwC,EAAcpE,GAAf,OACE9B,EAAAC,EAAAC,cAACwU,GAAD,CACEwE,IAAG,SAAA1a,OAAMsD,EAAQ,GACjBlD,IAAG,KAAAJ,OAAOsD,IAEV9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA+I,GAAA,GACEpI,QAAS,kBAAM+B,EAAKsV,gBAAgB,KACpC3X,KAAK,SACL4Y,MAAM,SACNhP,KAAK,WAGTnK,EAAAC,EAAAC,cAAA,QACEkZ,wBAAyB,CACvBC,OAAQnT,EACLS,QACC,qBACA,SAACwR,EAAOmB,GAAR,yCAAA9a,OACqC8a,EADrC,aAGD3S,QAAQ,QAAS,gBAM/Bd,EAAKiB,KAAKkS,aACTnT,EAAKiB,KAAKkS,YAAYtV,IACpB,SAACwC,EAAcpE,GAAf,OACE9B,EAAAC,EAAAC,cAACwU,GAAD,CACEwE,IAAG,SAAA1a,OAAMsD,EAAQ,GACjBlD,IAAG,KAAAJ,OAAOsD,IAEV9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA+I,GAAA,GACEpI,QAAS,kBAAM+B,EAAKsV,gBAAgB,KACpC3X,KAAK,SACL4Y,MAAM,SACNhP,KAAK,WAGTnK,EAAAC,EAAAC,cAAA,QACEkZ,wBAAyB,CACvBC,OAAQnT,EACLS,QACC,qBACA,SAACwR,EAAOmB,GAAR,yCAAA9a,OACqC8a,EADrC,aAGD3S,QAAQ,QAAS,kBASpC3G,EAAAC,EAAAC,cAAA,oBACUF,EAAAC,EAAAC,cAAA,cAAS2F,EAAKiB,KAAKkD,SAE7BhK,EAAAC,EAAAC,cAAA,OAAKd,UAAU,iDACbY,EAAAC,EAAAC,cAAA,OAAKd,UAAU,mBACbY,EAAAC,EAAAC,cAAA,iCACC2F,EAAKiB,KAAKiO,SAAW,IAFxB,IAE6B/U,EAAAC,EAAAC,cAAA,2CAC1B2F,EAAKiB,KAAKmO,OAAS,IAHtB,IAG2BjV,EAAAC,EAAAC,cAAA,2CACxB2F,EAAKiB,KAAKqO,OAAS,KAEtBnV,EAAAC,EAAAC,cAAA,OAAKd,UAAU,qBACbY,EAAAC,EAAAC,cAAA,OAAKd,UAAU,kBACbY,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SAAOd,UAAU,mBACfY,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,oBAGJF,EAAAC,EAAAC,cAAA,SAAOd,UAAU,mBACdwD,EAAKiS,UAAUhP,EAAKiB,MAAMpD,IAAI,SAAAqS,GAAI,MAAI,CACrC/V,EAAAC,EAAAC,cAAA,MACEd,UAAU,gBACVR,IAAG,GAAAJ,OAAKuX,EAAKA,KAAV,OAEH/V,EAAAC,EAAAC,cAAA,MAAIqZ,QAAS,GAAIxD,EAAKA,MACtB/V,EAAAC,EAAAC,cAAA,MAAIqZ,QAAS,GAAIxD,EAAKlQ,KAAKzG,WAC3BY,EAAAC,EAAAC,cAAA,MAAIqZ,QAAS,GACT,WACA,IAAI1F,EAAM1S,GACV,OAAQ4U,EAAKA,MACX,IAAK,eACHlC,GAAO,KACP,MACF,IAAK,eACHA,GAAO,KACP,MACF,IAAK,4BACHA,GAAO,KACP,MACF,IAAK,4BACHA,GAAO,KACP,MACF,QACE,OAAO,KAEX,OACE7T,EAAAC,EAAAC,cAAA,OACEX,IAAKsG,EAAKiB,KAAKQ,OAAOkS,WACtBha,IAAG,GAAAhB,OAAKqV,EAAL,KAAArV,OAAYqH,EAAKiB,KAAKQ,OAAtB,UArBP,IA0BJtH,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,UAAK6V,EAAKlQ,KAAKgS,GAAG,IAClB7X,EAAAC,EAAAC,cAAA,UAAK6V,EAAKlQ,KAAKiS,IAAI,IACnB9X,EAAAC,EAAAC,cAAA,UAAK6V,EAAKlQ,KAAKkS,IAAI,IACnB/X,EAAAC,EAAAC,cAAA,MAAIqZ,QAAS,GACV1T,EAAKiB,KAAK2S,iBAEbzZ,EAAAC,EAAAC,cAAA,MAAIqZ,QAAS,GACVxD,EAAKlQ,KAAKoR,MAAQlB,EAAKlQ,KAAKoR,MAAQ,gBAEvCjX,EAAAC,EAAAC,cAAA,MAAIqZ,QAAS,GAAIxD,EAAKlQ,KAAKsR,OAC3BnX,EAAAC,EAAAC,cAAA,MAAIqZ,QAAS,GACVxD,EAAKlQ,KAAKkR,KAAK,GADlB,IACuBhB,EAAKlQ,KAAKkR,KAAK,GADtC,MAIF/W,EAAAC,EAAAC,cAAA,MACEd,UAAU,gBACVR,IAAG,GAAAJ,OAAKuX,EAAKA,KAAV,OAEH/V,EAAAC,EAAAC,cAAA,eAEG6V,EAAKlQ,KAAKyR,cAEbtX,EAAAC,EAAAC,cAAA,UAAK6V,EAAKlQ,KAAKgS,GAAG,IAClB7X,EAAAC,EAAAC,cAAA,UAAK6V,EAAKlQ,KAAKiS,IAAI,IACnB9X,EAAAC,EAAAC,cAAA,UAAK6V,EAAKlQ,KAAKkS,IAAI,WAM7B/X,EAAAC,EAAAC,cAAA,OAAKd,UAAU,oBACY,IAAxByG,EAAKiB,KAAK4S,WACT1Z,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,cACGyB,GAAWgY,IAAI9T,EAAKiB,KAAK4S,YAE3BhI,KAAKkG,KAA0B,IAArB/R,EAAKiB,KAAK8S,WAGC,IAAzB/T,EAAKiB,KAAK+S,YACT7Z,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA4Z,GAAA,GAASvZ,KAAK,aACdP,EAAAC,EAAAC,cAAA,cACGyB,GAAWgY,IAAI9T,EAAKiB,KAAK+S,aAE3BnI,KAAKkG,KAA2B,IAAtB/R,EAAKiB,KAAKiT,YAGC,IAAzBlU,EAAKiB,KAAKkT,YACTha,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA4Z,GAAA,eACA9Z,EAAAC,EAAAC,cAAA,cACGyB,GAAWgY,IAAI9T,EAAKiB,KAAKkT,aAE3BtI,KAAKkG,KAAK/R,EAAKiB,KAAKmT,YAGA,IAAxBpU,EAAKiB,KAAK4S,WAAmB1Z,EAAAC,EAAAC,cAAA,qCAII,IAAvC2F,EAAKiB,KAAKoT,eAAeC,WACxBna,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKd,UAAU,iDACbY,EAAAC,EAAAC,cAAA,OAAKd,UAAU,qBACbY,EAAAC,EAAAC,cAAA,OAAKd,UAAU,kBACbY,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SAAOd,UAAU,mBACfY,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,4BAGJF,EAAAC,EAAAC,cAAA,SAAOd,UAAU,mBACd,CAACxC,OAAAoS,GAAA,EAAApS,CAAA,GAEKiJ,EAAKiB,KAAKsT,gBAFhB,CAGGC,KAAM,iBAHTzd,OAAAoS,GAAA,EAAApS,CAAA,GAMMiJ,EAAKiB,KAAKoT,eANhB,CAOGG,KAAM,kBAGPxW,OACC,SAACyW,GAAD,OAAwC,IAAtBA,EAAQH,YAE3BzW,IAAI,SAAC4W,GAAD,OACHta,EAAAC,EAAAC,cAAAoG,EAAA,GACE9K,QACEwE,EAAAC,EAAAC,cAACqa,GAAD,CACEzL,QAASwL,EAAQE,SAGrB5b,IAAK0b,EAAQG,aAEbza,EAAAC,EAAAC,cAAA,MAAItB,IAAK0b,EAAQG,aACfza,EAAAC,EAAAC,cAAA,UAAKoa,EAAQD,MACbra,EAAAC,EAAAC,cAAA,UAAKoa,EAAQG,aACbza,EAAAC,EAAAC,cAAA,UAAKoa,EAAQI,gBAWG,iBAArC7U,EAAKiB,KAAK6T,UAAU,GAAGC,WACtB5a,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKd,UAAU,iDACbY,EAAAC,EAAAC,cAAA,OAAKd,UAAU,qBACbY,EAAAC,EAAAC,cAAA,OAAKd,UAAU,kBACbY,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SAAOd,UAAU,mBACfY,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,uBAGJF,EAAAC,EAAAC,cAAA,SAAOd,UAAU,mBACd,CACC,CACEoS,KAAK5U,OAAA+b,GAAA,EAAA/b,CAAKiJ,EAAKiB,KAAK6T,WACpBN,KAAM,gBAER,CACE7I,KAAK5U,OAAA+b,GAAA,EAAA/b,CAAKiJ,EAAKiB,KAAK+T,SACpBR,KAAM,MAER,CACE7I,KAAK5U,OAAA+b,GAAA,EAAA/b,CAAKiJ,EAAKiB,KAAKgU,UACpBT,KAAM,iBAGPxW,OAAO,SAAAkX,GACN,OACkB,OAAhBA,EAAOV,MACPxU,EAAKiB,KAAKkU,kBACRnV,EAAKiB,KAAKmU,kBAImB,iBAA7BF,EAAOvJ,KAAK,GAAGoJ,YAKpBlX,IAAI,SAAAqX,GAAM,OACTA,EAAOvJ,KAAK9N,IAAI,SAACgK,EAAY5L,GAAb,OACd9B,EAAAC,EAAAC,cAAAoG,EAAA,GACE1H,IAAG,SAAAJ,OAAWuc,EAAOV,KAAlB,KAAA7b,OAA0BsD,GAC7BtG,QACEwE,EAAAC,EAAAC,cAACgb,GAAD,CACExN,MAAOA,KAIX1N,EAAAC,EAAAC,cAAA,UACa,IAAV4B,GACC9B,EAAAC,EAAAC,cAAA,MAAIqZ,QAASwB,EAAOvJ,KAAKxT,QACtB+c,EAAOV,MAGZra,EAAAC,EAAAC,cAAA,UAAKwN,EAAMkN,WACX5a,EAAAC,EAAAC,cAAA,UAAKwN,EAAMgN,MACX1a,EAAAC,EAAAC,cAAA,UAAKwN,EAAMyN,aACXnb,EAAAC,EAAAC,cAAA,UACGwN,EAAM0N,SAAW1N,EAAM2N,UAE1Brb,EAAAC,EAAAC,cAAA,UAAKwN,EAAM2N,UACXrb,EAAAC,EAAAC,cAAA,UAAKwN,EAAM4N,sBAYnCtb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKd,UAAU,iDACbY,EAAAC,EAAAC,cAAA,OAAKd,UAAU,qBACbY,EAAAC,EAAAC,cAAA,OAAKd,UAAU,kBACbY,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SAAOd,UAAU,mBACfY,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,wCAGJF,EAAAC,EAAAC,cAAA,SAAOd,UAAU,mBACdxC,OAAOoO,KAAKnF,EAAKiB,KAAKgD,OAAOpG,IAAI,SAAA9E,GAChC,KAAMA,KAAOiH,EAAKiB,KAAKgD,OACrB,MAAMyR,MAAM,eAGd,IAAMC,EACJ3V,EAAKiB,KAAKgD,MACRlL,GAEJ,OACG4c,GACoB,kBAAdA,EAKPxb,EAAAC,EAAAC,cAAAoG,EAAA,GACE9K,QACEwE,EAAAC,EAAAC,cAACqa,GAAD,CACEzL,QACE0M,EAAUC,sBAIhB7c,IAAKA,GAELoB,EAAAC,EAAAC,cAAA,MAAItB,IAAKA,GACPoB,EAAAC,EAAAC,cAAA,UAAKsb,EAAUvW,MACfjF,EAAAC,EAAAC,cAAA,UAAKsb,EAAUnE,aACfrX,EAAAC,EAAAC,cAAA,UAAKsb,EAAUjE,YACfvX,EAAAC,EAAAC,cAAA,UAAKsb,EAAUE,sBAjBZ,aA4BtB7V,EAAKiB,KAAK6U,MACT3b,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKd,UAAU,iDACbY,EAAAC,EAAAC,cAAA,OAAKd,UAAU,qBACbY,EAAAC,EAAAC,cAAA,OAAKd,UAAU,kBACbY,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SAAOd,UAAU,mBACdyG,EAAKiB,KAAK6U,KAAKjY,IACd,SAAC6M,EAAUzO,GAAX,OACE9B,EAAAC,EAAAC,cAAA,MAAItB,IAAKkD,EAAQyO,EAAItL,MACnBjF,EAAAC,EAAAC,cAAA,MACEkK,MAAO,CACL8H,WAAY,UACZ0J,WAAY,IACZhS,MAAO,wBAGR2G,EAAItL,MAEPjF,EAAAC,EAAAC,cAAA,UAAKqQ,EAAIC,OAAT,KACAxQ,EAAAC,EAAAC,cAAA,UACGqQ,EAAIG,QAAQhN,IACX,SACE8Q,EACAqH,GAFF,OAIE7b,EAAAC,EAAAC,cAAA,OAAKtB,IAAKid,GACPrH,EAAM5D,QAAQlN,IACb,SACEmN,EACA/O,GAEA,OACE9B,EAAAC,EAAAC,cAAA,OACEtB,IAAG,GAAAJ,OAAKqd,EAAL,KAAArd,OAAmBsD,GACtBsI,MAAO,CACL6J,QACE,eACFxN,MAAOoK,EAAOG,MACda,OAAQhB,EAAOI,OACf6K,gBAAe,QAAAtd,OAAUyC,GAAV,KAAAzC,OAA4BqH,EAAKiB,KAAKQ,OAAtC,UACfyU,qBAAsBlL,EAAOC,EAC7BkL,qBAAsBnL,EAAOE,WAU/C/Q,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC+b,GAAD,CACE1L,IAAKA,EACLtE,OAAQpG,EAAKiB,KAAKQ,+BA76B5BxH,IAAMO,8BClIzB6b,8MA/BNpf,MAAQ,CACbqf,SAAS,KAGHC,aAAe,WACrBze,EAAKZ,SACH,CACEof,SAAS,GAEX,WACEE,WAAW,WACT1e,EAAKmB,MAAMoN,QAAQoQ,UAClB,gFAIO,IAAAC,EACuB1e,KAAKiB,MAAlCoN,EADMqQ,EACNrQ,QAASnN,EADHwd,EACGxd,SAAUoZ,EADboE,EACapE,MAC3B,OACEhZ,EAAA,cAAAgN,GAAA,GACEqQ,OAAQ,KACR/V,MAAM,MACN0V,QAASte,KAAKf,MAAMqf,QACpBM,SAAU5e,KAAKue,cAEfjd,EAAA,cAACud,GAAD,CAAMxQ,QAASA,EAASnN,SAAUA,EAAUoZ,MAAOA,YA7BnCrY,gCCTX6c,GAAwC,CACnDC,QAAS,2BACTC,MAAO,eACPC,UAAW,8CACXC,UAAW,eACXC,eAAgB,2BAChBC,YAAa,qBACbC,YAAa,eACbC,OAAQ,eACRC,MAAO,eACPC,UAAW,eACXC,SAAU,eACVC,MAAO,2BACPC,KAAM,yUCNR,IA2DeC,GA3DoC,SAAA9X,GAAiB,IAAd+X,EAAc/X,EAAd+X,QAC5CxR,EAAYyR,MAAZzR,QAEF0R,EAAY,SAACC,GACjB3R,EAAQ/I,KAAR,UAAA3E,OAAuBqf,KAEzB,OACE7d,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CAKEC,MAAOC,IAAFqY,MAYL1W,UAAW,CAAE2W,UAAWL,EAAQK,YAE/B,SAAAlX,GAA8B,IAA3BjB,EAA2BiB,EAA3BjB,QAAgBC,GAAWgB,EAAlBf,MAAkBe,EAAXhB,MAClB,OAAID,EACK5F,EAAAC,EAAAC,cAAA+H,GAAA,QAELpC,GAAuC,IAA/BA,EAAK6X,QAAQM,OAAOhgB,OACvBgC,EAAAC,EAAAC,cAAA,qEAGP2F,GACAA,EAAK6X,QAAQM,OAAOta,IAAI,SAACua,GAAD,OACtBje,EAAAC,EAAAC,cAAAiG,EAAA,GACEvH,IAAKqf,EAAMC,QACX9e,UAAU,uBACVyB,QAAS+c,EAAUO,KAAK,KAAMF,EAAMC,UAEpCle,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GAAI2U,EAAMC,SACrBle,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,EAAGlK,UAAU,YACrB6e,EAAMG,UAETpe,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,EAAGlK,UAAU,gBACrB6e,EAAMI,aAETre,EAAAC,EAAAC,cAAA8E,EAAA,GAAK5F,UAAU,YAAYkK,KAAM,IAC9B2U,EAAMhZ,gPC/Cfb,eACFka,GAAQC,GAAA,EAASD,MA6ERE,GA3Ea,WAC1B,OACErf,EAAA,cAACsf,GAAD,CAASrf,UAAU,aACjBD,EAAA,cAAA4N,GAAA,OACE5N,EAAA,cAAAgH,EAAA,GAAK/G,UAAU,gBACbD,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,KACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,gBACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,gBACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,IAAX,kBAGJnK,EAAA,cAACoG,EAAA,EAAD,CACEC,MAAOC,IAAFiZ,OAUJ,SAAA/Y,GAAmC,IAAhCC,EAAgCD,EAAhCC,QAASE,EAAuBH,EAAvBG,MAAOD,EAAgBF,EAAhBE,KAClB,OACE1G,EAAA,yBACEA,EAAA,cAAA8I,GAAA,GAAMC,SAAUtC,IACZE,GAASD,EAAK8Y,UACdxf,EAAA,cAACsf,GAAD,CAASrf,UAAU,wBACjBD,EAAA,cAAAof,GAAA,GAAU/d,UAAU,EAAOoe,WAAS,GACjChiB,OAAOiiB,QAAQxS,KAAEyS,QAAQjZ,EAAK8Y,SAAU,SAASjb,IAChD,SAAAmD,GAAA,IAAAW,EAAA5K,OAAAC,EAAA,EAAAD,CAAAiK,EAAA,GAAEkY,EAAFvX,EAAA,GAAemX,EAAfnX,EAAA,UACErI,EAAA,cAACmf,GAAD,CACEU,OACE7f,EAAA,sBACEia,wBAAyB,CACvBC,OAAQsD,GAAaoC,GACjBpC,GAAaoC,GACbA,KAIVngB,IAAKmgB,GAEL5f,EAAA,cAAAof,GAAA,GAAU/d,UAAU,GACjBme,EAASjb,IAAI,SAACga,GAAD,OACZve,EAAA,cAACmf,GAAD,CACElf,UAAU,gBACVR,IAAK8e,EAAQK,UACbiB,OACE7f,EAAA,0BACEA,EAAA,4BAASue,EAAQK,WADnB,OAGGL,EAAQzY,OAIb9F,EAAA,cAAC8f,GAAD,CAAgBvB,QAASA,0DCnDrDwB,8MAIYpiB,MAA8B,CAC5CqiB,YAAY,KAeNC,eAA6B,WACnCzhB,EAAKZ,SAAS,SAAAD,GAAK,MAAK,CAAEqiB,YAAariB,EAAMqiB,6FAbxBE,GAErB,IAAKA,EAAMC,UACT,OAAO,KAET,IAAIC,EAAiC,EAAnBF,EAAM9H,WAAiB8H,EAAMC,UAI/C,OAHKD,EAAMG,eACTD,GAAeF,EAAMI,cAEhBF,mCAOO,IAAA3c,EAAA/E,KAAA0e,EAC6B1e,KAAKiB,MAAxCugB,EADM9C,EACN8C,MAAOK,EADDnD,EACCmD,MADDC,EAAApD,EACQqD,gBADR,IAAAD,KAENR,EAAethB,KAAKf,MAApBqiB,WACFU,EAAWV,GAAcE,EAAMS,SAAY,CAACT,GAClD,OACErf,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8f,SAAA,KACGF,EAAQnc,IAAI,SAAClB,EAAQV,GAAT,IAAAke,EAAA,OACXhgB,EAAAC,EAAAC,cAAA,MACEtB,IAAKkD,EACLjB,QAASwe,EAAMS,QAAUld,EAAKwc,oBAAiBa,EAC/C7gB,UAAW2E,KAAUic,EAAA,GAAApjB,OAAAqH,EAAA,EAAArH,CAAAojB,EAClB3c,KAAO6c,mBAAqBb,EAAMS,SADhBljB,OAAAqH,EAAA,EAAArH,CAAAojB,EAElB3c,KAAO8c,QAAUhB,GAFCa,KAKV,IAAVle,GACC9B,EAAAC,EAAAC,cAAA,MAAIqZ,QAASsG,EAAQ7hB,QAClBqhB,EAAMS,SACL9f,EAAAC,EAAAC,cAAAiK,GAAA,GACEC,MAAO,CACLgW,UAAWjB,EAAa,sBAAmBc,EAC3CI,WAAY,kBAEd9f,KAAK,aACL+f,MAAM,YAKdtgB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OACEX,MAAOiD,EAAE+d,WAAa,GAAK,MAAM/G,WACjCha,IAAG,GAAAhB,Od/DUuC,6Cc+DV,KAAAvC,QAAuBgE,EAAE+d,WAAa,GAAK,KAA3C,YAGLX,GAAY5f,EAAAC,EAAAC,cAAA,UAAKsC,EAAEge,MACrBxgB,EAAAC,EAAAC,cAAA,UAAKsC,EAAEie,OAASje,EAAEie,MAAMC,KAAK,OAC7B1gB,EAAAC,EAAAC,cAAA,UACoB,MAAjBsC,EAAEme,WAAqB,eAAOne,EAAEoe,YAAc,eAAO,gBAExD5gB,EAAAC,EAAAC,cAAA,UAAK0C,EAAKie,eAAere,IACzBxC,EAAAC,EAAAC,cAAA,UAAKsC,EAAEgd,aAAehd,EAAEgd,aAAe,gBACvCxf,EAAAC,EAAAC,cAAA,UAAKsC,EAAEse,IACP9gB,EAAAC,EAAAC,cAAA,UAAKsC,EAAEue,cACP/gB,EAAAC,EAAAC,cAAA,UAAKsC,EAAEwe,eACPhhB,EAAAC,EAAAC,cAAA,UAAKsC,EAAEye,eACPjhB,EAAAC,EAAAC,cAAA,UAAKsC,EAAE0e,0BACPlhB,EAAAC,EAAAC,cAAA,UACGsC,EAAE2e,YACDnhB,EAAAC,EAAAC,cAAA,OACEX,KAAMiD,EAAE2e,YAAc,GAAG3H,WACzBha,IAAKkgB,EAAMld,EAAE2e,YAAc,KAE3B,MAENnhB,EAAAC,EAAAC,cAAAoG,EAAA,GACE9K,QACEwE,EAAAC,EAAAC,cAAA,WACG4L,KAAKC,UAALnP,OAAAoS,GAAA,EAAApS,CAAA,GAAoB4F,EAApB,CAAuBsd,aAASG,IAAa,KAAM,IAGxD1Z,UAAU,QAEVvG,EAAAC,EAAAC,cAAA,UACGsC,EAAE4e,kBACDphB,EAAAC,EAAAC,cAAA,SAAIkB,GAAkBoB,EAAE6e,wBACtB,kBA1FSvhB,IAAMO,WAoVpBihB,+LApOX,IAAMzC,EAAexS,KAAEpJ,KAAKpF,KAAKiB,MAAMmf,MAAMsD,IAAI7Q,QAAS,CACxDC,QAAS9S,KAAKiB,MAAMmf,MAAMuD,UAEtBC,EAA2B,CAAC,GAAI,GAAI,GAAI,GAAI,IAClD5C,EAAQnO,QAAQ3N,QAAQ,SAACyR,EAAY1S,GAC/B0S,EAAM2M,aACRM,EAAajN,EAAM2M,YAAc,GAAGhe,KAAKrB,KAG7CjE,KAAKiB,MAAM4iB,OAAOD,oCAEJ,IAAAre,EAAAvF,KACRogB,EAAQpgB,KAAKiB,MAAMmf,MACnB4B,EAAU5B,EAAMsD,IAAII,SAAW1D,EAAM2D,QAAQD,QAC7C9C,EAAexS,KAAEpJ,KAAKgb,EAAMsD,IAAI7Q,QAAS,CAC7CC,QAASsN,EAAMuD,UAEXK,EAAW5D,EAAM6D,MACjBpC,EAAQ,CACZzB,EAAM8D,UACN9D,EAAM+D,UACN/D,EAAMgE,UACNhE,EAAMiE,UACNjE,EAAMkE,WACNze,IAAI,SAAC0e,EAAkBtgB,GAAnB,SAAAtD,OAAwC2C,GAAxC,OAAA3C,OAAqD4jB,EAArD,UACAC,EAAqB,GACrBC,EAAa,SAAC9N,GAAoD,IAAxC+N,EAAwCxkB,UAAAC,OAAA,QAAAiiB,IAAAliB,UAAA,GAAAA,UAAA,GAAtByW,EAAMgO,QAAU,EAC1DnD,EAAKziB,OAAAoS,GAAA,EAAApS,CAAA,GAAQijB,EAAQ0C,GAAa/N,EAA7B,CAAoCgO,QAASD,IASxD,OARKlD,EAAMyC,QACTzC,EAAMyC,MAAQ,KAEhBzC,EAAMyB,GAAMzB,EAAMyB,GAAKe,EAAWxC,EAAMyC,MAAS,IAC5CzC,EAAMG,eACTH,EAAM0B,aACH1B,EAAM0B,aAAec,EAAWxC,EAAMyC,MAAS,KAE7CzC,GA8BT,OA5BAR,EAAQnO,QAAQ3N,QAAQ,SAACyR,GAEvB,GAAIA,EAAMgO,SAAW,GAAKhO,EAAMgO,QAAU,IAAM,CAC9C,IAAMnD,EAAQiD,EAAW9N,GAOzB,IALGpR,EAAKtE,MAAM2jB,gBACZJ,EAAcpf,KAAK,SAACT,GAAD,OAAYA,EAAEggB,UAAYnD,EAAMmD,YAEnDnD,EAAMqD,YAAa,GAEjBrD,EAAM+B,kBAAmB,CAE3B,IADA,IAAMuB,EAAU,CAACtD,GACVsD,EAAQA,EAAQ3kB,OAAS,GAAGojB,mBAAmB,CACpD,IACMmB,EADaI,EAAQA,EAAQ3kB,OAAS,GACjBojB,kBAAoB,EAC/C,GAAI/U,KAAEpJ,KAAK0f,EAAS,CAAC,UAAWJ,IAC9B,MAEF,IAAMK,EAAWN,EAAW9N,EAAO+N,GACnCI,EAAQxf,KAAKyf,GAEfvD,EAAMS,QAAU6C,EAElBN,EAAclf,KAAKkc,QAEnBgD,EAAclf,KAAKqR,KAIrBxU,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8f,SAAA,KACE/f,EAAAC,EAAAC,cAAA6M,GAAA,OACE/M,EAAAC,EAAAC,cAAA,OAAKd,UAAU,iDACbY,EAAAC,EAAAC,cAAA,OAAKd,UAAU,qBACbY,EAAAC,EAAAC,cAAA,OAAKd,UAAU,kBACbY,EAAAC,EAAAC,cAAA,SAAOkK,MAAO,CAAEyY,UAAW,WACzB7iB,EAAAC,EAAAC,cAAA,SAAOd,UAAU,kBAAkBgL,MAAO,CAAE3D,MAAO,SACjDzG,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIkK,MAAO,CAAE3D,MAAO,QACpBzG,EAAAC,EAAAC,cAAA,MAAIkK,MAAO,CAAE3D,MAAO,QAApB,gBACAzG,EAAAC,EAAAC,cAAA,MAAIkK,MAAO,CAAE3D,MAAO,OAApB,gBACAzG,EAAAC,EAAAC,cAAA,MAAIkK,MAAO,CAAE3D,MAAO,QAApB,gBACAzG,EAAAC,EAAAC,cAAA,MAAIkK,MAAO,CAAE3D,MAAO,OAApB,4BACAzG,EAAAC,EAAAC,cAAA,MAAIkK,MAAO,CAAE3D,MAAO,OAApB,gBACAzG,EAAAC,EAAAC,cAAA,MAAIkK,MAAO,CAAE3D,MAAO,OAApB,gBACAzG,EAAAC,EAAAC,cAAA,MAAIkK,MAAO,CAAE3D,MAAO,OAApB,MACAzG,EAAAC,EAAAC,cAAA,MAAIkK,MAAO,CAAE3D,MAAO,OAApB,gBACAzG,EAAAC,EAAAC,cAAA,MAAIkK,MAAO,CAAE3D,MAAO,OAApB,gBACAzG,EAAAC,EAAAC,cAAA,MAAIkK,MAAO,CAAE3D,MAAO,OAApB,gBACAzG,EAAAC,EAAAC,cAAA,MAAIkK,MAAO,CAAE3D,MAAO,OAApB,4BACAzG,EAAAC,EAAAC,cAAA,MAAIkK,MAAO,CAAE3D,MAAO,QAApB,gBACAzG,EAAAC,EAAAC,cAAA,MAAIkK,MAAO,CAAE3D,MAAO,OAApB,uBAQdzG,EAAAC,EAAAC,cAAA,OAAKd,UAAU,iDACbY,EAAAC,EAAAC,cAAA,OAAKd,UAAU,qBACbY,EAAAC,EAAAC,cAAA,OAAKd,UAAU,kBACbY,EAAAC,EAAAC,cAAA,SAAOkK,MAAO,CAAEyY,UAAW,WACzB7iB,EAAAC,EAAAC,cAAA,YAAUkK,MAAO,CAAE3D,MAAO,QAC1BzG,EAAAC,EAAAC,cAAA,YAAUkK,MAAO,CAAE3D,MAAO,SAC1BzG,EAAAC,EAAAC,cAAA,YAAUkK,MAAO,CAAE3D,MAAO,QAC1BzG,EAAAC,EAAAC,cAAA,YAAUkK,MAAO,CAAE3D,MAAO,SAC1BzG,EAAAC,EAAAC,cAAA,YAAUkK,MAAO,CAAE3D,MAAO,QAC1BzG,EAAAC,EAAAC,cAAA,YAAUkK,MAAO,CAAE3D,MAAO,QAC1BzG,EAAAC,EAAAC,cAAA,YAAUkK,MAAO,CAAE3D,MAAO,QAC1BzG,EAAAC,EAAAC,cAAA,YAAUkK,MAAO,CAAE3D,MAAO,QAC1BzG,EAAAC,EAAAC,cAAA,YAAUkK,MAAO,CAAE3D,MAAO,QAC1BzG,EAAAC,EAAAC,cAAA,YAAUkK,MAAO,CAAE3D,MAAO,QAC1BzG,EAAAC,EAAAC,cAAA,YAAUkK,MAAO,CAAE3D,MAAO,QAC1BzG,EAAAC,EAAAC,cAAA,YAAUkK,MAAO,CAAE3D,MAAO,QAC1BzG,EAAAC,EAAAC,cAAA,YAAUkK,MAAO,CAAE3D,MAAO,SAC1BzG,EAAAC,EAAAC,cAAA,YAAUkK,MAAO,CAAE3D,MAAO,QAE1BzG,EAAAC,EAAAC,cAAA,SAAOd,UAAU,mBACdijB,EAAc3e,IAAI,SAAC2b,EAAYvd,GAC9B,GAAIud,EAAMqD,WACR,OAAO,KAET,GAAIrD,EAAMmD,SAAW,GAAKnD,EAAMmD,QAAU,IACxC,OACExiB,EAAAC,EAAAC,cAAC4iB,GAAD,CACEzD,MAAOA,EACPK,MAAOA,EACP9gB,IAAKkD,IAGJ,IAAuB,IAAnBud,EAAMmD,QAEf,OAAO,KACF,GAAsB,MAAlBnD,EAAMmD,QAEf,OAAO,KACF,GAAInD,EAAMmD,SAAW,KAAQnD,EAAMmD,QAAU,IAElD,OACExiB,EAAAC,EAAAC,cAAA,MAAItB,IAAG,eAAAJ,OAAiBsD,IACtB9B,EAAAC,EAAAC,cAAA,MACEkK,MAAO,CACL8H,WAAY,UACZ0J,WAAY,OACZiH,UAAW,SACXjZ,MAAO,wBAGRxG,EAAKtE,MAAMikB,YAAY1D,EAAMmD,QAAU,KAAMvd,MAEhDjF,EAAAC,EAAAC,cAAA,MAAI8iB,QAAS,GAAI5Y,MAAO,CAAEyY,UAAW,SAEjCzf,EAAKtE,MAAMikB,YAAY1D,EAAMmD,QAAU,KACpCS,UAKN,GAAsB,OAAlB5D,EAAMmD,QAAkB,CAEjC,IAAMU,EAAU7D,EAAM8D,aAChBhL,EAAQ,wBAAwBiL,KAAKF,GAC3C,GAAI/K,EAAO,CACT,IAAMkL,EAAOlL,EAAM,GAAGlZ,MAAM,KAC5B,OAAOokB,EAAK3f,IAAI,SAAC4f,EAAGxhB,GAClB,IAAMyhB,EAAc3X,OAAOC,SAASyX,EAAG,IACjCE,EAAYnX,KAAEpJ,KAClBG,EAAKtE,MAAMmf,MAAM2D,QAAQ6B,YACzB,CACEC,YAAaH,IAGjB,OAAKC,EAIHxjB,EAAAC,EAAAC,cAAA,MACEtB,IAAG,eAAAJ,OAAiBsD,EAAjB,WAAAtD,OAAgC+kB,IAEnCvjB,EAAAC,EAAAC,cAAA,MACEkK,MAAO,CACL8H,WAAY,UACZ0J,WAAY,OACZiH,UAAW,SACXjZ,MAAO,wBAGR4Z,EAAKve,MAERjF,EAAAC,EAAAC,cAAA,MAAI8iB,QAAS,GAAI5Y,MAAO,CAAEyY,UAAW,SAClCW,EAAKP,SAEG,IAAVnhB,GACC9B,EAAAC,EAAAC,cAAAoG,EAAA,GAAS9K,QAAS0nB,EAAS3c,UAAU,QACnCvG,EAAAC,EAAAC,cAAA,MAAIqZ,QAAS8J,EAAKrlB,WArBjB,OA4Bb,OACEgC,EAAAC,EAAAC,cAAA,MACEkK,MAAO,CAAE6J,QAAS,QAClBrV,IAAG,eAAAJ,OAAiBsD,IAEpB9B,EAAAC,EAAAC,cAAA,MAAI8iB,QAAS,IAAK3D,EAAM8D,eAI5B,OACEnjB,EAAAC,EAAAC,cAAA,MACEkK,MAAO,CAAE6J,QAAS,QAClBrV,IAAG,eAAAJ,OAAiBsD,IAEpB9B,EAAAC,EAAAC,cAAA,MAAI8iB,QAAS,IAAKlX,KAAKC,UAAUsT,oBAvNlCvf,IAAMO,yqGCpHvB+D,eASauf,8MAIZ7mB,MAAQ,CACb2kB,aAAc,CAAEpgB,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,IAC/CghB,gBAAgB,KAGXmB,SAAW,SAACnC,GACjB9jB,EAAKZ,SAAS,CACZ0kB,oBAIGoC,uBAAyB,WAC9BlmB,EAAKZ,SAAS,SAAAD,GAAK,MAAK,CAAE2lB,gBAAiB3lB,EAAM2lB,2FAGnC,IAAA7f,EAAA/E,KACRwJ,EAAKxJ,KAAKiB,MAAMqZ,MAAMC,OAAO8F,QACnC,OACE/e,EAAA,cAACoG,EAAA,EAAD,CACEC,MAAOC,IAAFqe,MAmHL1c,UAAW,CAAEC,OAEZ,SAAA1B,GAAA,IAAGC,EAAHD,EAAGC,QAAgBC,GAAnBF,EAAYG,MAAZH,EAAmBE,MAAnB,OACC1G,EAAA,cAAC4kB,GAAD,CAAS3kB,UAAWiE,KAAO2gB,eAAiB,cAC1C7kB,EAAA,cAAA8I,GAAA,GAAMC,SAAUtC,GACbC,GAAQA,EAAKoY,OACZ9e,EAAA,yBACEA,EAAA,oBAAIC,UAAWiE,KAAO4gB,YACpB9kB,EAAA,cAACE,EAAA,EAAD,CAAMC,GAAE,UAAAd,OAAYoN,OAAOC,SAASxE,EAAI,IAAM,IAC5ClI,EAAA,cAAAgL,GAAA,GAAM5J,KAAK,UAEZsF,EAAKoY,MAAMhZ,KACZ9F,EAAA,cAACE,EAAA,EAAD,CAAMC,GAAE,UAAAd,OAAYoN,OAAOC,SAASxE,EAAI,IAAM,IAC5ClI,EAAA,cAAAgL,GAAA,GAAM5J,KAAK,YAGfpB,EAAA,yBACG0G,EAAKoY,MAAMG,SACVjf,EAAA,cAAAuK,GAAA,GAAKE,MAAM,SAAX,qBAEG/D,EAAKoY,MAAMG,UAEZ,KACHvY,EAAKoY,MAAMI,YACVlf,EAAA,cAAAuK,GAAA,GAAKE,MAAM,OAAX,qBAEG/D,EAAKoY,MAAMI,aAEZ,MAENlf,EAAA,cAAAgH,EAAA,GAAK+d,OAAQ,EAAG9kB,UAAWiE,KAAO8gB,WAChChlB,EAAA,cAAA6F,EAAA,GAAKE,GAAI,GAAIkf,GAAI,IACfjlB,EAAA,qBACEI,IAAI,MACJ6K,MAAO,CAAE3D,MAAO,QAChBjH,IAAKqG,EAAKoY,MAAMsD,IAAIlP,SAGxBlT,EAAA,cAAA6F,EAAA,GAAKE,GAAI,GAAIkf,GAAI,IACfjlB,EAAA,qBACEia,wBAAyB,CACvBC,OAAQxT,EAAKoY,MAAMgF,QAAQtc,QAAQ,MAAO,aAG9CxH,EAAA,cAAAgH,EAAA,GAAK/G,UAAWiE,KAAOghB,eACrBllB,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,IACTnK,EAAA,sBAAMC,UAAWiE,KAAOihB,mBAAxB,iBAGCze,EAAKoY,MAAMsG,SAEdplB,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,IACTnK,EAAA,sBAAMC,UAAWiE,KAAOihB,mBAAxB,WACCze,EAAKoY,MAAMuG,OAGhBrlB,EAAA,2BACEA,EAAA,2BACEA,EAAA,wBACG,CACC0G,EAAKoY,MAAM8D,UACXlc,EAAKoY,MAAM+D,UACXnc,EAAKoY,MAAMgE,UACXpc,EAAKoY,MAAMiE,UACXrc,EAAKoY,MAAMkE,WACXze,IAAI,SAAC0e,EAAkBtgB,GAAnB,OACJ3C,EAAA,oBACEiL,MAAO,CAAE3D,MAAO,OAChB7H,IAAG,YAAAJ,OAAcsD,IAEhBsgB,EACCjjB,EAAA,yBACEA,EAAA,qBACEI,IAAK6iB,EAAS5I,WACdpP,MAAO,CAAE3D,MAAO,QAChBjH,IAAG,GAAAhB,OAAK2C,GAAL,OAAA3C,OAAkB4jB,EAAlB,UAGS,IADZxf,EAAK9F,MAAM2kB,aAAqB3f,GAC/B9D,QACDmB,EAAA,cAAAuK,GAAA,GAAKE,MAAM,MAAMQ,MAAO,CAAEqa,OAAQ,IAAlC,QAKF,aAQlBtlB,EAAA,qBAAKC,UAAWiE,KAAOqhB,cAAvB,qBAEEvlB,EAAA,cAAAwlB,GAAA,GACEC,QAAShiB,EAAK9F,MAAM2lB,eACpBhf,SAAUb,EAAKihB,uBACfgB,gBAAgB,eAChBC,kBAAkB,kBAGrBjf,GACC1G,EAAA,cAAC4lB,GAAD,CACEhC,YAAald,EAAKkd,YAClB9E,MAAOpY,EAAKoY,MACZyD,OAAQ9e,EAAKghB,SACbnB,eAAgB7f,EAAK9F,MAAM2lB,iBAG9B5c,GACC1G,EAAA,yBACEA,EAAA,wCACAA,EAAA,cAAA2Z,GAAA,OACGjT,EAAKoY,MAAMsD,IAAIyD,OAAOthB,IAAI,SAAAuhB,GACzB,IAAMC,EAASD,EAAaD,OAAOnhB,OACjC,SAAAshB,GAAK,OAAIA,EAAMC,UAEjB,OAAsB,IAAlBF,EAAOlnB,OACF,KAGPmB,EAAA,cAAA2Z,GAAA,EAAMpE,QAAN,CACEwE,IAAK+L,EAAaI,QAClBzmB,IAAKqmB,EAAaI,QAAQ7L,YAE1Bra,EAAA,qBAAKC,UAAU,iDACbD,EAAA,qBAAKC,UAAU,qBACbD,EAAA,qBAAKC,UAAU,kBACbD,EAAA,2BACEA,EAAA,uBAAOC,UAAU,mBACd8lB,EAAOxhB,IAAI,SAACyhB,EAAOrjB,GAClByG,QAAQC,IAAI2c,EAAMC,SAClB,IAIIE,EAJEnN,EAAQ,yBAAyBiL,KACrC+B,EAAMC,SAIR,GAFA7c,QAAQC,IAAI2P,GAERA,EAAO,CACT,IAAMkL,EAAOlL,EAAM,GAAGlZ,MAAM,KAC5BqmB,EACEnmB,EAAA,qBAAKC,UAAU,iDACbD,EAAA,qBAAKC,UAAU,qBACbD,EAAA,qBAAKC,UAAU,kBACbD,EAAA,2BACEA,EAAA,uBAAOC,UAAU,mBACdikB,EAAK3f,IAAI,SAAA4f,GACR,IAAMC,EAAc3X,OAAOC,SACzByX,EACA,IAEIE,EAAYnX,KAAEpJ,KAClB4C,EAAKoY,MAAM2D,QACR6B,YACH,CACEC,YAAaH,IAGjB,OAAKC,EAIHrkB,EAAA,oBACEP,IAAG,eAAAJ,OAAiBsD,EAAjB,WAAAtD,OAAgC+kB,IAEnCpkB,EAAA,oBACEiL,MAAO,CACL8H,WACE,UACF0J,WACE,OACFiH,UACE,SACFjZ,MACE,wBAGH4Z,EAAKve,MAER9F,EAAA,oBACEiL,MAAO,CACLyY,UACE,SAGHW,EAAKP,UA1BH,YAsCzB,OACE9jB,EAAA,oBAAIP,IAAKkD,EAAM0X,YACbra,EAAA,wBACGgmB,EAAMC,QACNE,gBAgB9Bzf,GAAwC,IAAhCA,EAAKoY,MAAMsH,UAAUvnB,QAC5BmB,EAAA,yBACEA,EAAA,oDACAA,EAAA,qBAAKC,UAAU,iDACbD,EAAA,qBAAKC,UAAU,qBACbD,EAAA,qBAAKC,UAAU,kBACbD,EAAA,2BACEA,EAAA,uBAAOC,UAAU,mBACdyG,EAAKoY,MAAMsH,UAAU7hB,IAAI,SAAC8hB,EAAK1jB,GAAN,OACxB3C,EAAA,oBAAIP,IAAKkD,GACP3C,EAAA,oBACEiL,MAAO,CACL8H,WAAY,UACZ0J,WAAY,OACZiH,UAAW,SACXjZ,MAAO,wBAGR4b,EAAIC,aAEPtmB,EAAA,wBAAKqmB,EAAIE,gCAtXV5lB,yWCFd6lB,8MAIZ7oB,MAA6B,CAClC2B,QAAQ,EACRqJ,SAAS,EACTe,SAAUlL,EAAKmB,MAAM8mB,MAAMhd,UAAY,MAGlCid,aAAe,WACpBloB,EAAKZ,SAAS,CAAE+K,SAAS,IACzBuU,WAAW,WACT1e,EAAKZ,SAAS,CAAE+K,SAAS,KACxB,8EAGWge,GAAiD/nB,UAAAC,OAAA,QAAAiiB,IAAAliB,UAAA,IAAAA,UAAA,OAAf+D,EAAe/D,UAAAC,OAAA,EAAAD,UAAA,QAAAkiB,EACzD8F,EAAY1Z,KAAEpJ,KAAKpF,KAAKiB,MAAMknB,QAAS,CAAC,UAAWF,IACzD,OAAIC,EAEA/lB,EAAAC,EAAAC,cAAA,QAAMtB,IAAG,WAAAJ,OAAasnB,EAAb,KAAAtnB,OAAwBsD,GAAS1C,UAAU,SACjD2mB,EAAU9gB,MAIR,sCAIK,IAAArC,EAAA/E,KAAA0e,EACuB1e,KAAKiB,MAA3BinB,EADDxJ,EACNqJ,MAAqBK,EADfrpB,OAAAspB,GAAA,EAAAtpB,CAAA2f,EAAA,WAEd,OACEvc,EAAAC,EAAAC,cAAAiG,EAAA,EAAAvJ,OAAAwD,OAAA,GACM6lB,EADN,CAEE5e,GAAI0e,EAAUvO,QACdpY,UAAU,4BACVgL,MAAO,CAAEU,OAAQ,aAEjB9K,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GAAIyc,EAAUvO,SACzBxX,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,EAAGlK,UAAW2mB,EAAUI,QAAU,GAAK,aAC/CJ,EAAU9gB,MAEbjF,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GACRyc,EAAUK,UACPvoB,KAAKwoB,SAASN,EAAUK,WAAW,EAAM,GACzC,MAENpmB,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GACR,CACCyc,EAAUO,mBACVP,EAAUQ,mBACVR,EAAUS,oBAET9iB,IAAI,SAAC+iB,EAAa3kB,GAAd,OACHc,EAAKyjB,SAASI,GAAK,EAAO3kB,KAE3B+B,OAAO,SAAAoL,GAAC,OAAIA,KAEjBjP,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GACR,CAACyc,EAAUW,oBAAqBX,EAAUY,qBACxCjjB,IAAI,SAAC+iB,EAAa3kB,GAAd,OACHc,EAAKyjB,SAASI,GAAK,EAAO3kB,KAE3B+B,OAAO,SAAAoL,GAAC,OAAIA,KAEjBjP,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GACR,CAACyc,EAAUa,WAAYb,EAAUc,YAC/BnjB,IAAI,SAAC+iB,EAAa3kB,GAAd,OACHc,EAAKyjB,SAASI,GAAK,EAAM3kB,KAE1B+B,OAAO,SAAAoL,GAAC,OAAIA,MAEf8W,EAAUI,SACVnmB,EAAAC,EAAAC,cAAA,OACEd,UACE,oBACCvB,KAAKf,MAAM2B,QAAU,YACrBZ,KAAKf,MAAMgL,SAAW,WAEzBjH,QAAS,SAAA2B,GACPA,EAAE2E,oBAGJnH,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CACEmC,SAAUjC,IAAFqhB,MAORlf,YAAa/J,KAAKgoB,cAEjB,SAACkB,EAADphB,GAAA,IAAoBC,EAApBD,EAAoBC,QAApB,OACC5F,EAAAC,EAAAC,cAAA+H,GAAA,GAAMC,SAAUtC,GACd5F,EAAAC,EAAAC,cAAAiG,EAAA,OACEnG,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GACTtJ,EAAAC,EAAAC,cAAAiK,GAAA,GACEtJ,QAAS,kBACP+B,EAAK7F,SAAS,CAAE0B,QAASmE,EAAK9F,MAAM2B,UAEtC2L,MAAO,CAAEU,OAAQ,WACjBvK,KACEqC,EAAK9F,MAAM2B,OAAS,eAAiB,cAEvC6hB,MAAM,cAGVtgB,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,IACTtJ,EAAAC,EAAAC,cAAA,QAAMd,UAAU,SAAhB,iBACAY,EAAAC,EAAAC,cAAA8I,GAAA,GACEnK,MAAO+D,EAAK9F,MAAM+L,SAAS6X,KAAK,KAChCjd,SAAU,SAAAjB,GAAC,OACTI,EAAK7F,SAAS,CACZ8L,SAAUrG,EAAEC,OAAO5D,MAAMI,MAAM,oBAKvCe,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,GACTtJ,EAAAC,EAAAC,cAAAiK,GAAA,GACE5J,KAAK,eACL+f,MAAM,SACNlW,MAAO,CAAEU,OAAQ,WACjBjK,QAAS,kBACPkmB,EAAgB,CACd3f,UAAW,CACToQ,QAASuO,EAAUvO,QACnB5O,SAAUhG,EAAK9F,MAAM+L,6BAjIR/I,IAAMO,66BCAzC+D,eACAiG,eAwCa2c,8MACZlqB,MAAQ,CACb6N,YAAa,EACbD,OAAQ,MAEHsb,QAAiB,KAMjBiB,YAAc,SAAClB,GACpB,OAAOja,KAAKC,UAAUga,GAAW/Z,SAASrO,EAAKb,MAAM4N,kFALtC7L,GACfhB,KAAKd,SAAS,CAAE2N,OAAQ7L,EAAO8L,YAAa,qCAO9B,IAAA/H,EAAA/E,KACd,OACEsB,EAAA,cAACoG,EAAA,EAAD,CACEC,MAAOC,IAAFyhB,OAmCJ,SAAAvhB,GAA8B,IAA3BC,EAA2BD,EAA3BC,QAAgBC,GAAWF,EAAlBG,MAAkBH,EAAXE,MAwClB,OAvCIA,GAAQA,EAAKmgB,UACfpjB,EAAKojB,QAAUngB,EAAKmgB,QAAQljB,QAC5BF,EAAKojB,QAAQjjB,QAAQ,SAACgjB,GACpB,GAAIA,EAAUK,UAAW,CACvB,IAAMtkB,EAAQuK,KAAE8a,UAAUvkB,EAAKojB,QAAS,CACtC,UACAD,EAAUK,YAEE,IAAVtkB,IACFc,EAAKojB,QAAQlkB,GAAblF,OAAAoS,GAAA,EAAApS,CAAA,GACKgG,EAAKojB,QAAQlkB,GADlB,CAEEqkB,SAAS,UAGR,GAAIJ,EAAUa,WAAY,CAC/B,IAAMQ,EAAS/a,KAAE8a,UAAUvkB,EAAKojB,QAAS,CACvC,UACAD,EAAUa,aAEG,IAAXQ,IACFxkB,EAAKojB,QAAQoB,GAAbxqB,OAAAoS,GAAA,EAAApS,CAAA,GACKgG,EAAKojB,QAAQoB,GADlB,CAEEjB,SAAS,KAGb,IAAMkB,EAAShb,KAAE8a,UAAUvkB,EAAKojB,QAAS,CACvC,UACAD,EAAUc,aAEG,IAAXQ,IACFzkB,EAAKojB,QAAQqB,GAAbzqB,OAAAoS,GAAA,EAAApS,CAAA,GACKgG,EAAKojB,QAAQqB,GADlB,CAEElB,SAAS,SAQjBhnB,EAAA,cAACmoB,GAAD,CAASloB,UAAU,aACjBD,EAAA,cAAAooB,GAAA,GACE1f,QAAQ,kNACRtH,KAAK,UACLinB,UAAQ,EACRpd,MAAO,CAAEkD,aAAc,MAEzBnO,EAAA,cAAA8I,GAAA,GAAMC,SAAUtC,GACdzG,EAAA,cAACsoB,GAAD,CACEhb,YAAY,2BACZ5N,MAAO+D,EAAK9F,MAAM4N,OAClBjH,SAAU,SAAAiJ,GACR9J,EAAKyG,UAAUqD,EAAMjK,OAAO5D,QAE9B8N,aAAW,IAEbxN,EAAA,cAAA4N,GAAA,OACE5N,EAAA,cAAAgH,EAAA,GAAK/G,UAAU,gBACbD,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,KACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,gBACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,4BACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,4BACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,gBACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,8BAGHzD,GACCA,EAAKmgB,SACLpjB,EAAKojB,QACFniB,OAAOjB,EAAKqkB,aACZnkB,MACC,IAAMF,EAAK9F,MAAM6N,YAAc,GAC/B,GAAK/H,EAAK9F,MAAM6N,aAEjBjH,IAAI,SAACqiB,GACJ,OACE5mB,EAAA,cAAAmH,EAAA,GACE9K,QACE2D,EAAA,yBACEA,EAAA,qBAAKC,UAAU,iDACbD,EAAA,qBAAKC,UAAU,qBACbD,EAAA,qBAAKC,UAAU,kBACbD,EAAA,2BACEA,EAAA,uBAAOC,UAAU,mBACfD,EAAA,wBACEA,EAAA,8CACAA,EAAA,oDACAA,EAAA,sDAGJA,EAAA,uBAAOC,UAAU,mBACfD,EAAA,wBACEA,EAAA,wBAAK4mB,EAAU9gB,MACf9F,EAAA,wBAAK4mB,EAAU1O,aACflY,EAAA,wBACG4mB,EAAUrK,0BAQxBqK,EAAUtK,oBAAoBzd,OAAS,GACtCmB,EAAA,cAACob,GAAD,CACEnQ,MAAO,CAAEsd,UAAW,GACpB5Y,QAASiX,EAAUtK,oBACnB1M,YAAalJ,EAAK8hB,sBAK1B/oB,IAAKmnB,EAAUvO,SAEfrY,EAAA,cAACyoB,GAAD,CACEhC,MAAOG,EACPC,QAASpjB,EAAKojB,aAKzBngB,GAAQA,EAAKmgB,SACZ7mB,EAAA,cAAA8N,GAAA,GACE4a,eAAgB,EAChB1a,gBAAiB,GACjBD,QAAStK,EAAK9F,MAAM6N,YACpBlH,SAAU,SAAA2J,GAAI,OAAIxK,EAAK7F,SAAS,CAAE4N,YAAayC,KAC/CC,MAAOxH,EAAKmgB,QAAQniB,OAAOjB,EAAKqkB,aAAajpB,oBArL1B8B,uWChClBgoB,8MAIZhrB,MAAQ,CACb+B,MAAOlB,EAAKmB,MAAM+O,OAASlQ,EAAKmB,MAAM+O,OAAOK,YAAc,GAC3DpG,SAAS,EACThC,OAAO,EACPiiB,SAAS,KAGH1T,aACA2T,gBAEAC,MAAQ,SAACnrB,GACfa,EAAKZ,SAALH,OAAAqH,EAAA,EAAArH,CAAA,GAAiBE,GAAQ,GAAe,WACtCgW,OAAOuJ,WAAW,WAChB1e,EAAKZ,SAALH,OAAAqH,EAAA,EAAArH,CAAA,GAAiBE,GAAQ,KACxB,UAICorB,WAAa,WACnBvqB,EAAKZ,SAAS,CAAEgrB,SAAS,IACzB3U,SAAS+U,iBAAiB,QAASxqB,EAAKyqB,eAGlCA,WAAa,SAAC5lB,GAElB7E,EAAK0W,KACH7R,EAAEC,SAAW9E,EAAK0W,MAAO1W,EAAK0W,IAAIgU,SAAS7lB,EAAEC,SAE/C9E,EAAK2qB,kBAIDA,aAAe,WACrB3qB,EAAKqqB,OAAO,CACV5gB,UAAW,CACT4G,GAAIrQ,EAAKmB,MAAMkP,GACfE,YAAavQ,EAAKb,MAAM+B,MAAQlB,EAAKb,MAAM+B,WAAQohB,KAGvDtiB,EAAKZ,SAAS,CAAEgrB,SAAS,IACzB3U,SAASmV,oBAAoB,QAAS5qB,EAAKyqB,qFAG7B,IAAAxlB,EAAA/E,KACNmQ,EAAOnQ,KAAKiB,MAAZkP,GACR,OACEhO,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CAOE3G,IAAKoP,EACLtG,SAAUjC,IAAF+iB,KAKF3qB,KAAKiB,MAAM2pB,kBAMjB7gB,YAAa/J,KAAKoqB,MAAM9J,KAAKtgB,KAAM,YAElC,SAAC6qB,EAAD/iB,GAAoC,IAAdC,EAAcD,EAAdC,QAErB,OADAhD,EAAKolB,OAASU,EAEZ1oB,EAAAC,EAAAC,cAAA+H,GAAA,GAAMC,SAAUtC,GACd5F,EAAAC,EAAAC,cAAA,OACEmU,IAAK,SAAAA,GAAG,OAAKzR,EAAKyR,IAAMA,GACxBjV,UAAW2E,IACTV,KAAOslB,cADY/rB,OAAAqH,EAAA,EAAArH,CAAA,GAEhByG,KAAOyE,QAAUlF,EAAK9F,MAAMgL,SAFZlL,OAAAqH,EAAA,EAAArH,CAAA,GAGhByG,KAAOyC,MAAQlD,EAAK9F,MAAMgJ,SAG/B9F,EAAAC,EAAAC,cAAAiG,EAAA,GAAK5F,KAAK,OAAOqoB,MAAM,UACrB5oB,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,EAAGzI,QAAS+B,EAAK9D,MAAM+pB,gBAChC7oB,EAAAC,EAAAC,cAAA,QACEd,UAAW2E,IAAW,QAASV,KAAOylB,MAAjBlsB,OAAAqH,EAAA,EAAArH,CAAA,GAClByG,KAAO5E,OAASmE,EAAK9D,MAAML,UAG7BuP,IAGJpL,EAAK9F,MAAMirB,QACV/nB,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8f,SAAA,KACE/f,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,IACTtJ,EAAAC,EAAAC,cAAA8I,GAAA,GACEnK,MAAO+D,EAAK9F,MAAM+B,MAClBO,UAAWiE,KAAO0lB,eAClBtlB,SAAU,SAAAjB,GACRI,EAAK7F,SAAS,CAAE8B,MAAO2D,EAAEC,OAAO5D,SAElCmqB,WAAS,KAGbhpB,EAAAC,EAAAC,cAAA8E,EAAA,GAAKsE,KAAM,EAAGlK,UAAWiE,KAAO4lB,WAC9BjpB,EAAAC,EAAAC,cAAAiK,GAAA,GACE5J,KAAK,eACL+f,MAAM,UACNzf,QAAS+B,EAAK0lB,iBAKpBtoB,EAAAC,EAAAC,cAAA8E,EAAA,GACEsE,KAAM,GACNzI,QAAS+B,EAAKslB,WACd9oB,UAAWiE,KAAO6lB,UAEjBtmB,EAAK9F,MAAM+B,mBAvHYiB,IAAMO,q8BCJ5C+D,eACAiG,eA2RO8e,8MAhPNrsB,MAAyB,CAC9B6N,YAAa,EACbD,OAAQ,GACR0e,SAAU,GACVC,eAAe,KAGVC,qBAAuB,SAACC,GAC7B5rB,EAAKZ,SAAS,CAAEqsB,SAAUG,EAAW5e,YAAa,OAG7CtB,UAAY,SAACqB,GAClB/M,EAAKZ,SAAS,CAAE2N,SAAQC,YAAa,OAGhC6e,YAAc,SAAC9b,GACpB,GAAI/P,EAAKb,MAAMssB,SAASprB,OAAS,EAAG,KAAAyrB,GAAA,EAAAC,GAAA,EAAAC,OAAA1J,EAAA,IAClC,IADkC,IAClC2J,EADkCC,EAAA,eACvB7b,EADuB4b,EAAA/qB,MAKhC,IAAe,IAHD6O,EAAME,gBAAgBuZ,UAClC,SAACtZ,GAAD,OAAiBA,EAAOI,qBAAuBD,IAG/C,OAAA8b,GAAO,IALXC,EAAiBpsB,EAAKb,MAAMssB,SAA5BY,OAAAC,cAAAR,GAAAG,EAAAG,EAAAG,QAAAC,MAAAV,GAAA,EAAsC,KAAAW,EAAAP,IAAA,qBAAAO,EAAA,OAAAA,EAAAN,GADJ,MAAAO,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAM,EAAAO,QAAAP,EAAAO,SAAA,WAAAZ,EAAA,MAAAC,IAUpC,QACEhsB,EAAKb,MAAM4N,SACVoB,KAAKC,UAAU2B,GAAO1B,SAASrO,EAAKb,MAAM4N,YAuBvC6f,mBAAqB,WAC3B5sB,EAAKZ,SAAS,SAAAD,GAAK,MAAK,CAAEusB,eAAgBvsB,EAAMusB,6FAjB9Brb,GAClB,OAAOnQ,KAAKf,MAAMssB,SAASjC,UAAU,SAAAqD,GAAS,OAAIA,IAAcxc,+CAGvCA,GACzB,IAAMlM,EAAQjE,KAAK4sB,YAAYzc,GACvBob,EAAavrB,KAAKf,MAAlBssB,SACJtnB,GAAS,EACXjE,KAAKd,SAAS,CACZqsB,SAAQ,GAAA5qB,OAAA5B,OAAA+b,GAAA,EAAA/b,CAAMwsB,EAAStmB,MAAM,EAAGhB,IAAxBlF,OAAA+b,GAAA,EAAA/b,CAAmCwsB,EAAStmB,MAAMhB,EAAQ,OAGpEjE,KAAKd,SAAS,CAAEqsB,SAAQ,GAAA5qB,OAAA5B,OAAA+b,GAAA,EAAA/b,CAAMwsB,GAAN,CAAgBpb,uCAQ5B,IAAApL,EAAA/E,KACd,OACEsB,EAAA,cAACoG,EAAA,EAAD,CACEC,MAAOC,IAAFilB,OAmCJ,SAAA/kB,GAA8B,IAA3BC,EAA2BD,EAA3BC,QAAgBC,GAAWF,EAAlBG,MAAkBH,EAAXE,MACd8kB,EAAiB,EAUrB,OATI9kB,GAAQA,EAAKkV,QACflV,EAAKkV,OAAOhY,QAAQ,SAAC2K,GACnBA,EAAME,gBAAgB7K,QAAQ,SAAC8K,GACzBA,EAAOI,mBAAqB0c,IAC9BA,EAAiB9c,EAAOI,wBAM9B9O,EAAA,cAAAA,EAAA,cACEA,EAAA,qBACEC,UAAWiE,KAAOpH,cAClB4E,QAAS+B,EAAK2nB,oBAEdprB,EAAA,cAAAgL,GAAA,GAAM5J,KAAK,aAEbpB,EAAA,cAAAyrB,GAAA,GACEzO,QAASvZ,EAAK9F,MAAMusB,cACpBwB,QAASjoB,EAAK2nB,oBAEdprB,EAAA,cAAA8I,GAAA,GAAMC,SAAUtC,GACbC,GACCA,EAAKilB,qBACL5sB,MAAMK,MAAMosB,GAAgBjnB,IAC1B,SAACqnB,EAAYjpB,GACX,IAAMiM,EAAiB1B,KAAEpJ,KACvB4C,EAAKilB,oBACL,CAAE9c,GAAIlM,EAAQ,IAGhB,OACE3C,EAAA,cAAC6rB,GAAD,CACEpsB,IAAKkD,EAAQ,EACbkM,GAAIlM,EAAQ,EACZ+L,OAAQE,EACR0a,iBAAiB,2BACjBhqB,OAAQmE,EAAK6nB,YAAY3oB,EAAQ,IAAM,EACvC+mB,eAAgB,kBACdjmB,EAAKqoB,mBAAmBnpB,EAAQ,UAQhD3C,EAAA,cAAC+rB,GAAD,CACE9rB,UAAW2E,IAAW,CAAC,YAAaV,KAAOnH,sBAE3CiD,EAAA,cAAA8I,GAAA,GAAMC,SAAUtC,GACdzG,EAAA,qBAAKC,UAAWiE,KAAOlH,QACpByG,EAAK9F,MAAMssB,SAAS1lB,IAAI,SAAAG,GAAM,OAC7B1E,EAAA,cAAAuK,GAAA,GACEE,MAAM,OACNhL,IAAKiF,EACLsnB,UAAQ,EACRN,QAASjoB,EAAKqoB,mBAAmB9M,KAAKvb,EAAMiB,IAE3CA,MAIP1E,EAAA,cAACisB,GAAD,CACE3e,YAAY,2BACZ5N,MAAO+D,EAAK9F,MAAM4N,OAClBjH,SAAU,SAAAiJ,GACR9J,EAAKyG,UAAUqD,EAAMjK,OAAO5D,QAE9B8N,aAAW,IAEbxN,EAAA,cAAA4N,GAAA,OACE5N,EAAA,cAAAgH,EAAA,GAAK/G,UAAU,gBACbD,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,sBACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,gBACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,gBACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,gBACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,4BACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,aAGHzD,GACCA,EAAKkV,QACLlV,EAAKkV,OACFlX,OAAOjB,EAAK4mB,aACZ1mB,MACC,IAAMF,EAAK9F,MAAM6N,YAAc,GAC/B,GAAK/H,EAAK9F,MAAM6N,aAEjBjH,IAAI,SAACgK,EAAY5L,GAAb,OACH3C,EAAA,cAAAmH,EAAA,GACE1H,IAAKkD,EACLtG,QACE2D,EAAA,cAAC+b,GAAD,CACExN,MAAOA,EACPC,WAAY9H,EAAKilB,uBAIrB3rB,EAAA,cAAAgH,EAAA,GACE/G,UAAU,YACVgL,MAAO,CAAEU,OAAQ,YAEjB3L,EAAA,cAAA6F,EAAA,GAAK5F,UAAU,YAAYkK,KAAM,GAC9BoE,EAAMkN,WAETzb,EAAA,cAAA6F,EAAA,GAAK5F,UAAU,YAAYkK,KAAM,GAC9BoE,EAAMgN,MAETvb,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAIoE,EAAMyN,aACrBhc,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAIoE,EAAM0N,UACrBjc,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAIoE,EAAM2N,UACrBlc,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAIoE,EAAM4N,UACrBnc,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,IACRoE,EAAM2d,SAAS3nB,IAAI,SAACoD,GAAD,OAClB3H,EAAA,cAACA,EAAA,SAAD,CAAgBP,IAAKkI,EAAKQ,QACxBnI,EAAA,cAACE,EAAA,EAAD,CAAMC,GAAE,SAAAd,OAAWsI,EAAKQ,SACrBR,EAAK7B,MAFV,eAWbY,GAAQA,EAAKkV,QACZ5b,EAAA,cAAA8N,GAAA,GACE4a,eAAgB,EAChB1a,gBAAiB,GACjBD,QAAStK,EAAK9F,MAAM6N,YACpBlH,SAAU,SAAA2J,GAAI,OAAIxK,EAAK7F,SAAS,CAAE4N,YAAayC,KAC/CC,MAAOxH,EAAKkV,OAAOlX,OAAOjB,EAAK4mB,aAAaxrB,qBApO1C8B,iuBC3ChBsE,eACAiG,eAuQOihB,8MAlONxuB,MAAQ,CACb6N,YAAa,EACbD,OAAQ,GACR0e,SAAU,GACVC,eAAe,KAEVhgB,UAAY,SAACqB,GAClB/M,EAAKZ,SAAS,CAAE2N,SAAQC,YAAa,OAEhC2e,qBAAuB,SAACC,GAC7B5rB,EAAKZ,SAAS,CAAEqsB,SAAUG,EAAW5e,YAAa,OAE7C4gB,cAAgB,SAACjR,GACtB,GAAI3c,EAAKb,MAAMssB,SAASprB,OAAS,EAAG,KAAAyrB,GAAA,EAAAC,GAAA,EAAAC,OAAA1J,EAAA,IAClC,IADkC,IAClC2J,EADkCC,EAAA,eACvB7b,EADuB4b,EAAA/qB,MAKhC,IAAe,IAHDyb,EAAQE,OAAO2M,UAC3B,SAACtZ,GAAD,OAAiBA,EAAOqB,iBAAmBlB,IAG3C,OAAA8b,GAAO,IALXC,EAAiBpsB,EAAKb,MAAMssB,SAA5BY,OAAAC,cAAAR,GAAAG,EAAAG,EAAAG,QAAAC,MAAAV,GAAA,EAAsC,KAAAW,EAAAP,IAAA,qBAAAO,EAAA,OAAAA,EAAAN,GADJ,MAAAO,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAM,EAAAO,QAAAP,EAAAO,SAAA,WAAAZ,EAAA,MAAAC,IAUpC,QACEhsB,EAAKb,MAAM4N,SACVoB,KAAKC,UAAUuO,GAAStO,SAASrO,EAAKb,MAAM4N,YAuBzC6f,mBAAqB,WAC3B5sB,EAAKZ,SAAS,SAAAD,GAAK,MAAK,CAAEusB,eAAgBvsB,EAAMusB,6FAjB9Brb,GAClB,OAAOnQ,KAAKf,MAAMssB,SAASjC,UAAU,SAAAqD,GAAS,OAAIA,IAAcxc,+CAGvCA,GACzB,IAAMlM,EAAQjE,KAAK4sB,YAAYzc,GACvBob,EAAavrB,KAAKf,MAAlBssB,SACJtnB,GAAS,EACXjE,KAAKd,SAAS,CACZqsB,SAAQ,GAAA5qB,OAAA5B,OAAA+b,GAAA,EAAA/b,CAAMwsB,EAAStmB,MAAM,EAAGhB,IAAxBlF,OAAA+b,GAAA,EAAA/b,CAAmCwsB,EAAStmB,MAAMhB,EAAQ,OAGpEjE,KAAKd,SAAS,CAAEqsB,SAAQ,GAAA5qB,OAAA5B,OAAA+b,GAAA,EAAA/b,CAAMwsB,GAAN,CAAgBpb,uCAQ5B,IAAApL,EAAA/E,KACd,OACEsB,EAAA,cAACoG,EAAA,EAAD,CACEC,MAAOC,IAAF+lB,OA6BJ,SAAA7lB,GAA8B,IAA3BC,EAA2BD,EAA3BC,QAAgBC,GAAWF,EAAlBG,MAAkBH,EAAXE,MACd4lB,EAAQ,EAUZ,OATI5lB,GAAQA,EAAK6lB,WACf7lB,EAAK6lB,UAAU3oB,QAAQ,SAACuX,GACtBA,EAAQE,OAAOzX,QAAQ,SAAC8K,GAClBA,EAAOqB,eAAiBuc,IAC1BA,EAAQ5d,EAAOqB,oBAMrB/P,EAAA,cAAAA,EAAA,cACEA,EAAA,qBACEC,UAAWiE,KAAOpH,cAClB4E,QAAS+B,EAAK2nB,oBAEdprB,EAAA,cAAAgL,GAAA,GAAM5J,KAAK,aAEbpB,EAAA,cAAAyrB,GAAA,GACEzO,QAASvZ,EAAK9F,MAAMusB,cACpBwB,QAASjoB,EAAK2nB,oBAEdprB,EAAA,cAAA8I,GAAA,GAAMC,SAAUtC,GACbC,GACCA,EAAK8hB,oBACLzpB,MAAMK,MAAMktB,GAAO/nB,IAAI,SAACqnB,EAAYjpB,GAClC,IAAM+L,EAAcxB,KAAEpJ,KAAK4C,EAAK8hB,mBAAoB,CAClD3Z,GAAIlM,EAAQ,IAGd,OACE3C,EAAA,cAAC6rB,GAAD,CACEpsB,IAAKkD,EAAQ,EACbkM,GAAIlM,EAAQ,EACZ+L,OAAQA,EACR4a,iBAAiB,0BACjBhqB,OAAQmE,EAAK6nB,YAAY3oB,EAAQ,IAAM,EACvC+mB,eAAgB,kBACdjmB,EAAKqoB,mBAAmBnpB,EAAQ,UAO9C3C,EAAA,cAACwsB,GAAD,CACEvsB,UAAW2E,IAAW,CACpB,YACAV,KAAOjH,wBAGT+C,EAAA,cAAA8I,GAAA,GAAMC,SAAUtC,GACdzG,EAAA,qBAAKC,UAAWiE,KAAOlH,QACpByG,EAAK9F,MAAMssB,SAAS1lB,IAAI,SAAAG,GAAM,OAC7B1E,EAAA,cAAAuK,GAAA,GACEE,MAAM,OACNhL,IAAKiF,EACLsnB,UAAQ,EACRN,QAASjoB,EAAKqoB,mBAAmB9M,KAAKvb,EAAMiB,IAE3CA,MAIP1E,EAAA,cAACysB,GAAD,CACEnf,YAAY,2BACZ5N,MAAO+D,EAAK9F,MAAM4N,OAClBjH,SAAU,SAAAiJ,GACR9J,EAAKyG,UAAUqD,EAAMjK,OAAO5D,QAE9B8N,aAAW,IAEbxN,EAAA,cAAA4N,GAAA,OACE5N,EAAA,cAAAgH,EAAA,GAAK/G,UAAU,gBACbD,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,gBACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,IAAX,kBAGHzD,GACCA,EAAK6lB,WACL7lB,EAAK6lB,UACF7nB,OAAOjB,EAAK2oB,eACZzoB,MACC,IAAMF,EAAK9F,MAAM6N,YAAc,GAC/B,GAAK/H,EAAK9F,MAAM6N,aAEjBjH,IAAI,SAAC4W,EAAcxY,GAClB,OACE3C,EAAA,cAAAmH,EAAA,GACE1H,IAAKkD,EACLtG,QACE2D,EAAA,cAACob,GAAD,CACEzL,QAASwL,EAAQE,OACjBzL,YAAalJ,EAAK8hB,sBAItBxoB,EAAA,cAAAgH,EAAA,GACE/G,UAAU,YACVgL,MAAO,CAAEU,OAAQ,YAEjB3L,EAAA,cAAA6F,EAAA,GAAK5F,UAAU,YAAYkK,KAAM,GAC9BgR,EAAQG,aAEXtb,EAAA,cAAA6F,EAAA,GAAK5F,UAAU,YAAYkK,KAAM,IAC9BgR,EAAQI,MAEXvb,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,IACRgR,EAAQ+Q,SAAS3nB,IAAI,SAACoD,GAAD,OACpB3H,EAAA,cAACE,EAAA,EAAD,CACE+K,MAAO,CAAEqa,OAAQ,SACjBnlB,GAAE,SAAAd,OAAWsI,EAAKQ,QAClB1I,IAAKkI,EAAKQ,QAETR,EAAK7B,aAQvBY,GAAQA,EAAK6lB,WACZvsB,EAAA,cAAA8N,GAAA,GACE4a,eAAgB,EAChB1a,gBAAiB,GACjBD,QAAStK,EAAK9F,MAAM6N,YACpBlH,SAAU,SAAA2J,GAAI,OAAIxK,EAAK7F,SAAS,CAAE4N,YAAayC,KAC/CC,MAAOxH,EAAK6lB,UAAU7nB,OAAOjB,EAAK2oB,eAAevtB,qBAtN7C8B,45BC1ClBsE,eAsBaynB,8MACZ/uB,MAAyB,CAC9BusB,eAAe,EACfyC,aAAc,CACZC,IAAK,GACLC,KAAM,GACNC,MAAO,GACPC,MAAO,IAETC,cAAc,EACdC,aAAc,MAGTC,MAAQ,SAACxT,GAAgB,IAAAyT,EACdzT,EAAI5Z,MAAM,KAAjBstB,EADqB3vB,OAAAC,EAAA,EAAAD,CAAA0vB,EAAA,MAE9B,OAA2D,IAAvD,CAAC,MAAO,OAAQ,MAAO,MAAO,OAAOE,QAAQD,4EAMnC,IAAA3pB,EAAA/E,KACd,OACEsB,EAAA,cAACoG,EAAA,EAAD,CACEC,MAAOC,IAAFgnB,OAWJ,SAAA9mB,GAAA,IAAGC,EAAHD,EAAGC,QAAgBC,GAAnBF,EAAYG,MAAZH,EAAmBE,MAAM6mB,EAAzB/mB,EAAyB+mB,QAAzB,OACCvtB,EAAA,cAACwtB,GAAD,CAASvtB,UAAU,aACjBD,EAAA,cAAA8I,GAAA,GAAMC,SAAUtC,GACdzG,EAAA,cAAAgH,EAAA,GAAK/G,UAAU,gBACbD,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,KACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,gBACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,4BACAnK,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAX,kBAGHzD,GACCA,EAAK+mB,QACL/mB,EAAK+mB,OAAOlpB,IAAI,SAACuoB,EAAYnqB,GAAb,OACd3C,EAAA,cAAAgH,EAAA,GACE/G,UAAU,YACVR,IAAKqtB,EAAMF,IACXlrB,QAAS,WACP+B,EAAK7F,SAAS,CAAEssB,eAAe,EAAMyC,aAAcG,MAGrD9sB,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAIxH,EAAQ,GACvB3C,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,EAAGlK,UAAU,aACrB6sB,EAAMD,KAAKtL,KAAK,OAEnBvhB,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAI2iB,EAAMC,MAAMxL,KAAK,OAChCvhB,EAAA,cAAA6F,EAAA,GAAKsE,KAAM,GAAI2iB,EAAMA,OAASA,EAAMA,MAAMjuB,QAC1CmB,EAAA,qBACEC,UAAW2E,IACT,kBACAV,KAAOwpB,qBAEThsB,QAAS,SAAA2B,GACPA,EAAE2E,oBAGJhI,EAAA,cAACoG,EAAA,EAAD,CACEmC,SAAUjC,IAAFqnB,OAMP,SAACC,EAADlmB,KAAqBhB,KAArB,OACC1G,EAAA,cAAA6tB,GAAA,GACEntB,MAAM,wDACNotB,UAAW,WACTF,EAAY,CACV3lB,UAAW,CACT4G,GAAIie,EAAMF,OAEXmB,KAAK,WACNR,QAIJvtB,EAAA,cAAAgL,GAAA,GACE/K,UAAWiE,KAAO8pB,WAClB5sB,KAAK,SACL+f,MAAM,oBAQtBnhB,EAAA,cAAAyrB,GAAA,GACEnkB,MAAO,MACPrH,UAAWiE,KAAO+pB,YAClBvtB,MAAM,qBACNgrB,QAAS,kBAAMjoB,EAAK7F,SAAS,CAAEssB,eAAe,KAC9ClN,QAASvZ,EAAK9F,MAAMusB,eAEpBlqB,EAAA,qBAAKiL,MAAO,CAAEkD,aAAc,KAC1BnO,EAAA,sBAAMC,UAAU,SAAhB,iBACCwD,EAAK9F,MAAMgvB,aAAaE,KAAKtoB,IAAI,SAAAsoB,GAAI,OACpC7sB,EAAA,cAAAuK,GAAA,GAAK9K,IAAKotB,EAAMpiB,MAAM,QACnBoiB,MAIP7sB,EAAA,qBAAKiL,MAAO,CAAEkD,aAAc,KAC1BnO,EAAA,sBAAMC,UAAU,SAAhB,iBACCwD,EAAK9F,MAAMgvB,aAAaI,MAAMxoB,IAAI,SAAAwoB,GAAK,OACtC/sB,EAAA,cAAAuK,GAAA,GAAK9K,IAAKstB,EAAOtiB,MAAM,QACpBsiB,MAIP/sB,EAAA,qBAAKC,UAAWiE,KAAOgqB,gBACpBzqB,EAAK9F,MAAMgvB,aAAaG,MAAMvoB,IAC7B,SAACuoB,EAAYnqB,GACX,OACE3C,EAAA,qBAAKP,IAAKqtB,EAAO7sB,UAAWiE,KAAOiqB,UACjCnuB,EAAA,qBAAKC,UAAWiE,KAAOkqB,YACrBpuB,EAAA,qBAAKC,UAAWiE,KAAOmqB,sBACrBruB,EAAA,cAAAgL,GAAA,GACE/K,UAAWiE,KAAOoqB,YAClBltB,KAAK,MACL+f,MAAM,WACNzf,QAAS,WACP+B,EAAK7F,SAAS,CACZovB,cAAc,EACdC,aAAcH,OAIpB9sB,EAAA,cAACoG,EAAA,EAAD,CACEmC,SAAUjC,IAAFioB,OASP,SAACC,GACA,OACExuB,EAAA,cAAA6tB,GAAA,GACEntB,MAAM,wDACNotB,UAAW,WACTU,EAAgB,CACdvmB,UAAW,CACT4G,GAAIpL,EAAK9F,MAAMgvB,aAAaC,IAC5BjqB,WAEDorB,KAAK,SAACrnB,GACHA,GAAQA,EAAKA,KAAK8nB,kBACpBjB,IACA9pB,EAAK7F,SAAS,SAAAyK,GAAA,IAAGskB,EAAHtkB,EAAGskB,aAAH,MAAuB,CACnCA,aAAalvB,OAAAoS,GAAA,EAAApS,CAAA,GACRkvB,EADO,CAEVG,MAAK,GAAAztB,OAAA5B,OAAA+b,GAAA,EAAA/b,CACAkvB,EAAaG,MAAMnpB,MACpB,EACAhB,IAHClF,OAAA+b,GAAA,EAAA/b,CAKAkvB,EAAaG,MAAMnpB,MACpBhB,EAAQ,eAStB3C,EAAA,cAAAgL,GAAA,GACE/K,UAAWiE,KAAOoqB,YAClBltB,KAAK,SACL+f,MAAM,kBAQnB1d,EAAKypB,MAAMJ,GACV9sB,EAAA,qBAAKI,IAAK0sB,EAAOzsB,IAAG,GAAAhB,OAAK0C,GAAL,KAAA1C,OAAkBytB,KAEtC9sB,EAAA,0BAAO8sB,QAQrB9sB,EAAA,cAAAgN,GAAA,GACEsQ,SAAU,kBAAM7Z,EAAK7F,SAAS,CAAEovB,cAAc,KAC9ChQ,QAASvZ,EAAK9F,MAAMqvB,aACpB3P,OAAQ,KACRpS,MAAO,CAAEyY,UAAW,WAEnBjgB,EAAKypB,MAAMzpB,EAAK9F,MAAMsvB,cACrBjtB,EAAA,qBACEI,IAAKqD,EAAK9F,MAAMsvB,aAChB5sB,IAAG,GAAAhB,OAAK0C,GAAL,KAAA1C,OAAkBoE,EAAK9F,MAAMsvB,gBAGlCjtB,EAAA,0BAAOyD,EAAK9F,MAAMsvB,yBAzNKtsB,iEClC/BsE,eAmCOwpB,GAjCS,WAAM,IAAA7mB,EACkBC,eAAtCC,EADoBF,EACpBE,kBAAmB4mB,EADC9mB,EACD8mB,eACnB5wB,EAAU6wB,EAAYC,eAAtB9wB,MACF+wB,EAAW,eAAAroB,EAAA/I,OAAAqxB,GAAA,EAAArxB,CAAAsxB,GAAAjuB,EAAAkuB,KAAG,SAAAC,IAAA,IAAA3lB,EAAA,OAAAylB,GAAAjuB,EAAAouB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAApE,MAAA,cAAAoE,EAAApE,KAAA,EACG2D,IADH,OACZplB,EADY6lB,EAAAE,KAElBjmB,QAAQC,IAAIvL,GACZA,EAAMwL,EAAOvL,OAHK,wBAAAoxB,EAAAG,SAAAL,MAAH,yBAAAzoB,EAAApH,MAAAV,KAAAE,YAAA,GAKjB,OACEiC,EAAAC,EAAAC,cAACwuB,GAAD,KACE1uB,EAAAC,EAAAC,cAAAiI,GAAA,GAAM/I,UAAWiE,KAAOhH,WACtB2D,EAAAC,EAAAC,cAAAiI,GAAA,EAAM7K,KAAN,KACG2J,EAAkB,QAAlBA,CACCjH,EAAAC,EAAAC,cAAA8I,GAAA,GACEzI,KAAK,WACLouB,OACE3uB,EAAAC,EAAAC,cAAAiK,GAAA,GACEtJ,QAASmtB,EACT5jB,MAAO,CAAEU,OAAQ,WACjBvK,KAAK,aAMfP,EAAAC,EAAAC,cAAA+I,GAAA,GAAQ1I,KAAK,UAAU4W,OAAK,GAA5B,mBCsCO5Z,wBA9C+B,WAAM,IAC1CP,EAAe8wB,EAAYC,eAA3B/wB,WAD0C4xB,EAEpBjR,MAAtB5e,EAF0C6vB,EAE1C7vB,SAAUmN,EAFgC0iB,EAEhC1iB,QACZ2iB,EAAkBC,iBAAO/vB,GAE/BgwB,oBAAU,WAGa,QAAnB7iB,EAAQ8iB,QACNjwB,EAASjC,OAAUiC,EAASjC,MAAMqP,QAEpC0iB,EAAgB3hB,QAAUnO,IAE3B,CAACmN,EAAQ8iB,OAAQjwB,IAEpB,IAAMkwB,KACJlwB,EAASjC,QACTiC,EAASjC,MAAMqP,OACf0iB,EAAgB3hB,UAAYnO,GAG9B,OAAQ/B,EAMNgD,EAAAC,EAAAC,cAAAkI,EAAA,OACEpI,EAAAC,EAAAC,cAACgvB,EAAD,MACAlvB,EAAAC,EAAAC,cAACivB,EAAA,OAAD,CAAQpwB,SAAUkwB,EAAUJ,EAAgB3hB,QAAUnO,GAAtD,IAEEiB,EAAAC,EAAAC,cAACivB,EAAA,MAAD,CAAOC,KAAK,gBAAgBC,UAAW1a,KACvC3U,EAAAC,EAAAC,cAACivB,EAAA,MAAD,CAAOC,KAAK,kBAAkBC,UAAW1L,KACzC3jB,EAAAC,EAAAC,cAACivB,EAAA,MAAD,CAAOC,KAAK,QAAQE,OAAK,EAACD,UAAW/kB,KACrCtK,EAAAC,EAAAC,cAACivB,EAAA,MAAD,CAAOC,KAAK,SAASE,OAAK,EAACD,UAAW7Q,KACtCxe,EAAAC,EAAAC,cAACivB,EAAA,MAAD,CAAOC,KAAK,SAASE,OAAK,EAACD,UAAWrI,KACtChnB,EAAAC,EAAAC,cAACivB,EAAA,MAAD,CAAOC,KAAK,SAASE,OAAK,EAACD,UAAWlG,KACtCnpB,EAAAC,EAAAC,cAACivB,EAAA,MAAD,CAAOC,KAAK,WAAWE,OAAK,EAACD,UAAW/D,KACxCtrB,EAAAC,EAAAC,cAACivB,EAAA,MAAD,CAAOC,KAAK,SAASE,OAAK,EAACD,UAAWxD,KACtC7rB,EAAAC,EAAAC,cAACivB,EAAA,MAAD,CAAOE,UAAW/qB,MAEnB2qB,GAAWjvB,EAAAC,EAAAC,cAACivB,EAAA,MAAD,CAAOC,KAAK,gBAAgBC,UAAWnT,MAnBrDlc,EAAAC,EAAAC,cAACivB,EAAA,OAAD,KACEnvB,EAAAC,EAAAC,cAACivB,EAAA,MAAD,CAAOC,KAAK,IAAIE,OAAK,EAACD,UAAWzB,KACjC5tB,EAAAC,EAAAC,cAACivB,EAAA,SAAD,CAAU7vB,GAAG,SC/BnBoF,IAAO6qB,OAAO,SAEd,IAAMC,GAAS,IAAIC,IAAa,CAC9BC,KAAMC,aAAWC,KAAK,CACpBC,YAAQ,SAAAlqB,GAAqC,IAAlCmqB,EAAkCnqB,EAAlCmqB,cAAeC,EAAmBpqB,EAAnBoqB,aACpBD,GACFA,EAAcpsB,IAAI,SAAAmD,GAAA,IAAGgB,EAAHhB,EAAGgB,QAASmoB,EAAZnpB,EAAYmpB,UAAWZ,EAAvBvoB,EAAuBuoB,KAAvB,OAChB7mB,QAAQC,IAAR,6BAAAhK,OAC+BqJ,EAD/B,gBAAArJ,OACqDwxB,EADrD,YAAAxxB,OACyE4wB,MAIzEW,GACFxnB,QAAQC,IAAR,oBAAAhK,OAAgCuxB,MAGpCE,2BAAiB,CACfC,IxB9BiBlvB,qCwB+BjBmvB,YAAa,kBAGjBC,MAAO,IAAIC,MAqBEC,oLAhBX,OACEnxB,EAAA,cAACE,EAAA,EAAD,KACEF,EAAA,cAAAoxB,EAAA,GAAgBhB,OAAQiB,KACtBrxB,EAAA,cAACoG,EAAA,EAAD,CAAgBiqB,OAAQA,IACtBrwB,EAAA,cAAC2uB,EAAY2C,SAAb,KACEtxB,EAAA,cAAAiJ,EAAA,GAAQhJ,UAAU,MAAMgL,MAAO,CAAEyH,OAAQ,SACvC1S,EAAA,cAACuxB,GAAD,kBARE5wB,oBC9BE6wB,QACW,cAA7B7d,OAAO/T,SAAS6xB,UAEe,UAA7B9d,OAAO/T,SAAS6xB,UAEhB9d,OAAO/T,SAAS6xB,SAASzY,MACvB,2DCZN0Y,IAASzc,OAAOpU,EAAAC,EAAAC,cAAC4wB,GAAD,MAAS1d,SAAS2d,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhE,KAAK,SAAAiE,GACjCA,EAAaC,mCE1InB91B,EAAAC,QAAA,CAAkByoB,eAAA,kEAAAG,UAAA,6DAAAE,cAAA,iEAAAC,kBAAA,qEAAAI,aAAA,gEAAAxE,mBAAA,sEAAAC,QAAA,gFCAlB7kB,EAAAC,QAAA,CAAkBsxB,oBAAA,2EAAAM,WAAA,kEAAAE,eAAA,sEAAAC,SAAA,gEAAAC,WAAA,kEAAAC,qBAAA,4EAAAC,YAAA,wFCAlBnyB,EAAAC,QAAA,CAAkBotB,cAAA,qEAAA7gB,QAAA,+DAAAhC,MAAA,6DAAAijB,eAAA,sEAAAE,UAAA,iEAAAC,SAAA,gEAAAJ,MAAA,6DAAArqB,OAAA,mFCAlBnD,EAAAC,QAAA,CAAkB+H,UAAA,uDAAAM,oBAAA,iEAAAE,iBAAA,8DAAAE,qBAAA,kEAAAvF,OAAA,oDAAAyF,wBAAA,qEAAAvB,OAAA","file":"static/js/main.6b66bb3c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"src-Components-Routes-Home-index-module__content--EeS5E\",\"logoblock\":\"src-Components-Routes-Home-index-module__logoblock--8orY9\",\"topLogo\":\"src-Components-Routes-Home-index-module__topLogo--6O_cc\",\"updateTime\":\"src-Components-Routes-Home-index-module__updateTime--3rliE\",\"cardDivider\":\"src-Components-Routes-Home-index-module__cardDivider--mSeou\",\"beg\":\"src-Components-Routes-Home-index-module__beg--3yezg\",\"postContainer\":\"src-Components-Routes-Home-index-module__postContainer--33_7T\"};","module.exports = __webpack_public_path__ + \"static/media/logo.509ca4a9.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawerTrigger\":\"src-Components-Routes-SkillList-index-module__drawerTrigger--d9igM\",\"skillListContainer\":\"src-Components-Routes-SkillList-index-module__skillListContainer--wrNs-\",\"tagBar\":\"src-Components-Routes-SkillList-index-module__tagBar--C7Pyw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawerTrigger\":\"src-Components-Routes-AbilityList-index-module__drawerTrigger--1ubdu\",\"abilityListContainer\":\"src-Components-Routes-AbilityList-index-module__abilityListContainer--3xfdd\",\"tagBar\":\"src-Components-Routes-AbilityList-index-module__tagBar--15A3_\"};","module.exports = __webpack_public_path__ + \"static/media/pay.f5dab129.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"src-Components-Routes-Login-Login-module__loginForm--3OVxD\"};","import { useState } from 'react';\nimport { createContainer } from 'unstated-next';\n\nfunction useUser() {\n  const [state, setState] = useState(localStorage.getItem('fuck') || '');\n  return {\n    get isLoggedIn() {\n      return (\n        state === 'fuckpulu' ||\n        state === 'fuckbaozitou' ||\n        state === 'fuckmaoxiong' ||\n        state === 'fucktuo'\n      );\n    },\n    login(token: string) {\n      setState(token);\n      localStorage.setItem('fuck', token);\n    },\n  };\n}\n\nexport default createContainer(useUser);\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Layout, Menu } from 'antd';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport logo from '../../logo.png';\n\nconst { Header } = Layout;\nconst { SubMenu, Item } = Menu;\n\ninterface HeaderBarStates {\n  active: string;\n}\n\nexport default withRouter(\n  class HeaderBar extends React.Component<\n    RouteComponentProps<any>,\n    HeaderBarStates\n  > {\n    public state = {\n      active: '/',\n    };\n    public componentDidMount() {\n      this.setState({\n        active: this.props.location.pathname.split('/')[1],\n      });\n    }\n    public componentWillReceiveProps(nextProps: any) {\n      this.setState({\n        active: nextProps.location.pathname.split('/')[1],\n      });\n    }\n    public render() {\n      return (\n        <Header className=\"header\">\n          <Link to=\"/\">\n            <img alt=\"logo\" src={logo} className=\"logo\" />\n          </Link>\n          <Menu\n            mode=\"horizontal\"\n            className=\"headerMenu\"\n            selectedKeys={[this.state.active]}\n          >\n            <Item key=\"unit\">\n              <Link to=\"/unit\">单位</Link>\n            </Item>\n            <Item key=\"quest\">\n              <Link to=\"/quest\">关卡</Link>\n            </Item>\n            <SubMenu title=\"其他属性\">\n              <Item key=\"class\">\n                <Link to=\"/class\">职业</Link>\n              </Item>\n              <Item key=\"skill\">\n                <Link to=\"/skill\">技能</Link>\n              </Item>\n              <Item key=\"ability\">\n                <Link to=\"/ability\">被动</Link>\n              </Item>\n            </SubMenu>\n            <Item key=\"emoji\">\n              <Link to=\"/emoji\">机器狗</Link>\n            </Item>\n          </Menu>\n        </Header>\n      );\n    }\n  },\n);\n","import React from 'react';\nimport { Card } from 'antd';\nimport { CardProps } from 'antd/lib/card';\nimport './Card.less';\n\nexport default class ShadowedCard extends React.Component<\n  CardProps\n> {\n  public render() {\n    return <Card {...this.props} className=\"card\" />;\n  }\n}\n","import * as React from 'react';\nimport './Pill.less';\n\nexport interface PillProps {\n  bordered?: boolean;\n  type?: string;\n  onMouseEnter?: () => void;\n  onMouseLeave?: () => void;\n  onFocus?: () => void;\n  onClick?: () => void;\n}\n\nexport default class Pill extends React.Component<PillProps> {\n  private colorType(type: string | undefined) {\n    switch (type) {\n      case 'danger':\n        return 'pill-color-danger';\n      default:\n        return 'pill-color-default';\n    }\n  }\n  public render() {\n    return (\n      <div\n        className={`pill ${this.props.bordered &&\n          'pill-bordered'} ${this.colorType(this.props.type)}`}\n        onMouseEnter={this.props.onMouseEnter}\n        onMouseLeave={this.props.onMouseLeave}\n        onFocus={this.props.onFocus}\n        onClick={this.props.onClick}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n","import { DefaultGetter } from './utils';\nexport const BASE_SERVER_URL = 'https://aigisapi.naberi.us';\n// export const BASE_SERVER_URL = 'http://localhost:4000';\nexport const BASE_GAME_URL = 'http://assets.millennium-war.net';\nexport const GAME_POSTER_URL = BASE_GAME_URL + '/00/html/image';\nexport const API_URL = BASE_SERVER_URL + '/graphql';\nexport const STATIC_URL = BASE_SERVER_URL + '/static';\nexport const PLAYER_DOT_URL = STATIC_URL + '/playerdot';\nexport const EMOJI_URL = STATIC_URL + '/cqp';\nexport const ICO_URL = STATIC_URL + '/ico';\nexport const ENEMY_DOT_URL = STATIC_URL + '/enemydot';\nexport const ENEMY_CHANGE_COND: { [k: number]: string } = {\n  0: '条件切换',\n  1: '阻挡切换',\n  2: '死亡切换',\n  3: '半血切换',\n  4: '一次性攻击切换',\n  5: '血量99%切换',\n};\nexport const BONUS_TYPE = new DefaultGetter({\n  1: 'HP +',\n  2: '攻击 +',\n  3: '防御 +',\n  4: '射程 +',\n  5: '魔抗 +',\n  6: '后摇 -',\n  7: '技能持续 +',\n  8: '技能再动 -',\n  9: '物理攻击回避 +',\n});\n","export class DefaultGetter {\n  private obj: any;\n  public constructor(obj: any) {\n    this.obj = obj;\n  }\n  public get(index: string | number) {\n    if (index in this.obj) {\n      return this.obj[index];\n    } else {\n      return index;\n    }\n  }\n}\n","import * as React from 'react';\nimport { Radio } from 'antd';\nimport classNames from 'classnames';\nimport styles from './index.module.less';\nimport { GAME_POSTER_URL } from '../../consts';\n\ninterface PosterProps {\n  posters: string[];\n}\n\ninterface PosterStates {\n  selectedPoster: string;\n  selectedYear: string;\n}\n\nclass Poster extends React.Component<PosterProps, PosterStates> {\n  public state = {\n    selectedPoster: '',\n    selectedYear: '',\n  };\n\n  private years: string[] = [];\n\n  public componentDidMount() {\n    const { posters } = this.props;\n    this.setState({\n      selectedPoster: posters[posters.length - 1],\n      selectedYear: posters[posters.length - 1].slice(0, 4),\n    });\n    posters.forEach(poster => {\n      const year = poster.slice(0, 4);\n      if (!this.years.find(y => y === year)) {\n        this.years.push(year);\n      }\n    });\n  }\n\n  private handleYearChange = (e: any) => {\n    this.setState({ selectedYear: e.target.value });\n  };\n\n  private handlePosterChange = (poster: string) => {\n    this.setState({ selectedPoster: poster });\n  };\n\n  public render() {\n    return (\n      <div className={styles.container}>\n        <Radio.Group\n          onChange={this.handleYearChange}\n          value={this.state.selectedYear}\n        >\n          {this.years.map(year => (\n            <Radio.Button value={year} key={year}>\n              {year}\n            </Radio.Button>\n          ))}\n        </Radio.Group>\n        <div className={styles.posterNameContainer}>\n          {this.props.posters\n            .filter(poster => poster.slice(0, 4) === this.state.selectedYear)\n            .map(poster => (\n              <span className={styles.posterBreadcrumb} key={poster}>\n                <span\n                  className={classNames(styles.posterBreadcrumbText, {\n                    [styles.active]: this.state.selectedPoster === poster,\n                  })}\n                  onClick={() => this.handlePosterChange(poster)}\n                >\n                  {poster.slice(4)}\n                </span>\n                <span className={styles.posterBreadcrumbDivider}>/</span>\n              </span>\n            ))}\n        </div>\n        <img\n          className={styles.poster}\n          alt={this.state.selectedPoster}\n          src={`${GAME_POSTER_URL}/event${this.state.selectedPoster}.jpg`}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Poster;\n","import * as React from 'react';\nimport { Layout, Row, Col, Tooltip, Badge, Popover } from 'antd';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport moment from 'moment';\nimport Card from '../../Card';\nimport Pill from '../../Pill';\nimport Poster from '../../Poster';\nimport logo from '../../../logo.png';\nimport payImage from './pay.png';\nimport styles from './index.module.less';\n\nconst { Content } = Layout;\n\nconst status = {\n  0: 'success',\n  1: 'processing',\n  2: 'error',\n};\n\ninterface Data {\n  uploadFiles: Array<{\n    UpdateTime: number;\n    Name: string;\n  }>;\n  serverStatus: number;\n  posters: string[];\n}\n\nexport default class Home extends React.Component {\n  private filesToPills(files: any[]) {\n    return files.map(file => {\n      const time = moment(file.UpdateTime);\n      const outDated = moment.duration(moment().diff(time)).days() >= 6;\n      return (\n        <Col key={file.Name} md={12}>\n          <Tooltip title={time.format('YYYY-MM-DD HH:mm:ss ddd')}>\n            <Pill bordered={!outDated} type={outDated ? 'danger' : 'default'}>\n              {file.Name}\n              <small className={styles.updateTime}>{time.fromNow()}</small>\n            </Pill>\n          </Tooltip>\n        </Col>\n      );\n    });\n  }\n  public render() {\n    return (\n      <Query<Data>\n        query={gql`\n          query {\n            uploadFiles {\n              UpdateTime\n              Name\n            }\n            serverStatus\n            posters\n          }\n        `}\n      >\n        {({ loading, error, data }) => {\n          return (\n            <Content className={styles.content}>\n              <div className={styles.logoblock}>\n                <img alt=\"logo\" src={logo} className={styles.topLogo} />\n                <h1>Naberius</h1>\n              </div>\n              <Card loading={loading}>\n                {!loading && data && (\n                  <div>\n                    <Badge\n                      status={(status as any)[data.serverStatus]}\n                      text=\"状态\"\n                    />\n                    <Row>{this.filesToPills(data.uploadFiles)}</Row>\n                  </div>\n                )}\n              </Card>\n              <div className={styles.beg}>\n                <Popover\n                  placement=\"bottom\"\n                  content={\n                    <img\n                      alt=\"唯一指定邮箱minalinskyx@hotmail.com，您pay吗\"\n                      src={payImage}\n                      width={500}\n                    />\n                  }\n                >\n                  <del>我就不要脸了要饭了你打我啊！</del>\n                </Popover>\n              </div>\n              {!loading && data && data.posters.length !== 0 && (\n                <Poster\n                  posters={data.posters.map((poster: string) =>\n                    poster.replace('event', ''),\n                  )}\n                />\n              )}\n            </Content>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n","import React from 'react';\nimport {\n  Row,\n  Col,\n  Icon,\n  Input,\n  Spin,\n  Popover,\n  Form,\n  Button,\n  message,\n  Tag,\n} from 'antd';\nimport { Mutation, Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport useForm from 'rc-form-hooks';\n\ninterface UnitListCardProps {\n  card: any;\n  showUnit: (cardID: number) => void;\n  setSearch: (search: string, searchType: string) => void;\n}\n\ninterface FormFields {\n  nickName: string;\n  conneName: string;\n}\n\nconst UnitListCard: React.FC<UnitListCardProps> = ({\n  card,\n  showUnit,\n  setSearch,\n}) => {\n  return (\n    <Row className=\"list-card\" onClick={() => showUnit(card.CardID)}>\n      <Col span={1}>{card.CardID}</Col>\n      <Col span={1}>\n        <span className={`gender gender-${card.Kind}`} />\n      </Col>\n      <Col span={1}>\n        <span\n          className={`rarity-circle rarity-circle-${card.Rare} filter`}\n          onClick={e => {\n            e.stopPropagation();\n            setSearch(card.Rare, 'Rare');\n          }}\n        />\n      </Col>\n      <Col span={5} className=\"important\">\n        {card.Name}\n      </Col>\n      <Col span={5} className=\"filter\">\n        {card.Race && (\n          <span\n            onClick={e => {\n              e.stopPropagation();\n              setSearch(card.Race, 'Race');\n            }}\n          >\n            <Tag>{card.Race}</Tag>\n          </span>\n        )}\n        {card.Assign && (\n          <span\n            onClick={e => {\n              e.stopPropagation();\n              setSearch(card.Assign, 'Assign');\n            }}\n          >\n            <Tag color=\"yellow\">{card.Assign}</Tag>\n          </span>\n        )}\n        {card.Identity && (\n          <span\n            onClick={e => {\n              e.stopPropagation();\n              setSearch(card.Identity, 'Identity');\n            }}\n          >\n            <Tag color=\"black\">{card.Identity}</Tag>\n          </span>\n        )}\n      </Col>\n      <Col\n        span={5}\n        className=\"filter\"\n        onClick={e => {\n          e.stopPropagation();\n          setSearch(card.Class.ClassInit.Name, 'Class.ClassInit.Name');\n        }}\n      >\n        {card.Class.ClassInit.Name}\n      </Col>\n      <Col\n        span={5}\n        className=\"filter\"\n        onClick={e => {\n          e.stopPropagation();\n          setSearch(card.Illust, 'Illust');\n        }}\n      >\n        {card.Illust}\n      </Col>\n      <Col span={1}>\n        <Popover\n          trigger=\"click\"\n          placement=\"bottomLeft\"\n          content={<PopoverContent card={card} />}\n        >\n          <Icon\n            style={{ color: 'black' }}\n            onClick={e => e.stopPropagation()}\n            type=\"ellipsis\"\n          />\n        </Popover>\n      </Col>\n    </Row>\n  );\n};\n\nconst PopoverContent: React.FC<{ card: any }> = ({ card }) => {\n  const { getFieldDecorator, getFieldsValue } = useForm<FormFields>();\n  return (\n    <div\n      className={`list-card-addon `}\n      onClick={e => {\n        e.stopPropagation();\n      }}\n    >\n      <Query<any>\n        variables={{ id: card.CardID }}\n        query={gql`\n          query($id: Int!) {\n            card(CardID: $id) {\n              NickName\n              ConneName\n            }\n          }\n        `}\n      >\n        {({ data, loading: queryLoading }) => (\n          <Mutation<\n            null,\n            {\n              CardID: number;\n              ConneName: string;\n              NickName: string[];\n            }\n          >\n            mutation={gql`\n              mutation updateCardMeta(\n                $CardID: Int!\n                $ConneName: String\n                $NickName: [String]\n              ) {\n                updateCardMeta(\n                  CardID: $CardID\n                  ConneName: $ConneName\n                  NickName: $NickName\n                ) {\n                  ConneName\n                  NickName\n                }\n              }\n            `}\n            onCompleted={() => message.success('保存成功')}\n          >\n            {(updateCardMeta, { loading }) => (\n              <Spin spinning={loading || queryLoading}>\n                <Form\n                  layout=\"inline\"\n                  onSubmit={e => {\n                    e.preventDefault();\n                    console.log('qweqweqwe');\n                    const values = getFieldsValue();\n\n                    updateCardMeta({\n                      variables: {\n                        CardID: card.CardID,\n                        ConneName: values.conneName!,\n                        NickName: values.nickName!.split(','),\n                      },\n                    });\n                  }}\n                >\n                  <Form.Item label=\"昵称\">\n                    {getFieldDecorator('nickName', {\n                      initialValue: data.card ? data.card.NickName : '',\n                    })(<Input />)}\n                  </Form.Item>\n                  <Form.Item label=\"圆爹名\">\n                    {getFieldDecorator('conneName', {\n                      initialValue: data.card ? data.card.ConneName : '',\n                    })(<Input />)}\n                  </Form.Item>\n                  <Form.Item>\n                    <Button htmlType=\"submit\" type=\"primary\">\n                      保存\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Spin>\n            )}\n          </Mutation>\n        )}\n      </Query>\n    </div>\n  );\n};\n\nexport default UnitListCard;\n","import React from 'react';\nimport _ from 'lodash';\nimport { RouteComponentProps } from 'react-router-dom';\nimport {\n  Layout,\n  Input,\n  Row,\n  Col,\n  Spin,\n  Icon,\n  Affix,\n  Pagination,\n  Select,\n} from 'antd';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { Card } from './types';\nimport UnitListCard from '../../UnitListCard';\nimport './index.less';\n\nconst { Content } = Layout;\nconst { Search } = Input;\n\ninterface Data {\n  cards: Card[];\n}\n\ninterface UnitListStates {\n  sorter: string;\n  order: boolean;\n  searchType: string;\n  search: string;\n  currentPage: number;\n}\n\nexport default class UnitList extends React.Component<\n  RouteComponentProps,\n  UnitListStates\n> {\n  public readonly state: UnitListStates = {\n    sorter: 'CardID',\n    order: true,\n    searchType: 'all',\n    search: '',\n    currentPage: 1,\n  };\n\n  public shouldComponentUpdate(\n    nextProps: RouteComponentProps<any>,\n    nextStates: UnitListStates,\n  ) {\n    return !_.isEqual(nextStates, this.state);\n  }\n  public setSorter = (sorter: string) => {\n    if (sorter === this.state.sorter) {\n      this.setState({ order: !this.state.order });\n    } else {\n      this.setState({\n        sorter,\n        order: true,\n      });\n    }\n  };\n  public genSorter = (title: string, sorter: string) => {\n    return (\n      <div style={{ cursor: 'pointer' }} onClick={() => this.setSorter(sorter)}>\n        {title}\n        {this.state.sorter === sorter && (\n          <Icon type={this.state.order ? 'caret-down' : 'caret-up'} />\n        )}\n      </div>\n    );\n  };\n\n  public getParam = (target: any, keys: any) => {\n    keys.split('.').forEach((st: string) => (target = target[st]));\n    return target;\n  };\n\n  public cardSorter = (cardA: any, cardB: any) => {\n    const { sorter, order } = this.state;\n    const paramA = this.getParam(cardA, sorter);\n    const paramB = this.getParam(cardB, sorter);\n    if (typeof paramA === 'number') {\n      return order ? paramA - paramB : paramB - paramA;\n    } else {\n      if (paramA > paramB) {\n        return order ? 1 : -1;\n      } else if (paramA < paramB) {\n        return order ? -1 : 1;\n      } else {\n        return 0;\n      }\n    }\n  };\n\n  public cardFilter = (card: any) => {\n    const searchString = this.state.search;\n    const { searchType } = this.state;\n    if (searchType !== 'all') {\n      const sourceValue = this.getParam(card, searchType);\n      let parsedValue: number | string = searchString;\n      if (typeof sourceValue === 'number') {\n        parsedValue = Number.parseInt(searchString, 10);\n      }\n      return sourceValue === parsedValue;\n    }\n\n    return JSON.stringify(card).includes(this.state.search);\n  };\n\n  /**\n   * 点击搜索按钮的回调\n   */\n  public setSearch = (search: string, searchType?: string) => {\n    this.setState(state => ({\n      search,\n      searchType: searchType || state.searchType,\n      currentPage: 1,\n    }));\n  };\n\n  public showUnit = (cardID: number) => {\n    this.props.history.push({\n      pathname: `/unit/${cardID}`,\n      state: { modal: true },\n    });\n  };\n\n  public render() {\n    return (\n      <Query<Data>\n        query={gql`\n          query {\n            cards {\n              CardID\n              Name\n              Rare\n              Kind\n              Illust\n              Race\n              Assign\n              Identity\n              Class {\n                ClassInit {\n                  Name\n                }\n              }\n            }\n          }\n        `}\n      >\n        {({ loading, data }) => {\n          return (\n            <Spin spinning={loading}>\n              <Content className=\"unitListContent\">\n                <Search\n                  placeholder=\"搜索单位\"\n                  value={this.state.search}\n                  onChange={event => {\n                    this.setSearch(event.target.value);\n                  }}\n                  enterButton\n                  addonBefore={\n                    <Select\n                      value={this.state.searchType}\n                      onChange={(value: string) => {\n                        console.log(value);\n                        this.setState({ searchType: value });\n                      }}\n                      style={{ width: 90 }}\n                    >\n                      <Select.Option value=\"all\">全部</Select.Option>\n                      <Select.Option value=\"Rare\">稀有</Select.Option>\n                      <Select.Option value=\"Name\">名称</Select.Option>\n                      <Select.Option value=\"Race\">种族</Select.Option>\n                      <Select.Option value=\"Assign\">出身</Select.Option>\n                      <Select.Option value=\"Identity\">不死</Select.Option>\n                      <Select.Option value=\"Class.ClassInit.Name\">\n                        职业\n                      </Select.Option>\n                      <Select.Option value=\"Illust\">画师</Select.Option>\n                    </Select>\n                  }\n                />\n                <Affix>\n                  <Row className=\"sorter-block\">\n                    <Col span={1}>{this.genSorter('#', 'CardID')}</Col>\n                    <Col span={1}>{this.genSorter('性别', 'Kind')}</Col>\n                    <Col span={1}>{this.genSorter('稀有', 'Rare')}</Col>\n                    <Col span={5}>{this.genSorter('名称', 'Name')}</Col>\n                    <Col span={5}>{this.genSorter('种族', 'Race')}</Col>\n                    <Col span={5}>\n                      {this.genSorter('职业', 'Class.ClassInit.Name')}\n                    </Col>\n                    <Col span={5}>{this.genSorter('画师', 'Illust')}</Col>\n                  </Row>\n                </Affix>\n                {data && data.cards && (\n                  <Pagination\n                    current={this.state.currentPage}\n                    defaultPageSize={50}\n                    onChange={page => this.setState({ currentPage: page })}\n                    total={data.cards.filter(this.cardFilter).length}\n                    style={{ marginBottom: 16 }}\n                  />\n                )}\n                {data &&\n                  data.cards &&\n                  data.cards\n                    .slice()\n                    .sort(this.cardSorter)\n                    .filter(this.cardFilter)\n                    .slice(\n                      50 * (this.state.currentPage - 1),\n                      50 * this.state.currentPage,\n                    )\n                    .map((card: any) => {\n                      return (\n                        <UnitListCard\n                          key={card.CardID}\n                          card={card}\n                          showUnit={this.showUnit}\n                          setSearch={this.setSearch}\n                        />\n                      );\n                    })}\n                {data && data.cards && (\n                  <Pagination\n                    current={this.state.currentPage}\n                    defaultPageSize={50}\n                    onChange={page => this.setState({ currentPage: page })}\n                    total={data.cards.filter(this.cardFilter).length}\n                  />\n                )}\n              </Content>\n            </Spin>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n","import * as React from 'react';\n\nconst SkillInfluenceTable = ({ skill, influences }: any) => (\n  <div className=\"ant-table ant-table-bordered ant-table-middle\">\n    <div className=\"ant-table-content\">\n      <div className=\"ant-table-body\">\n        <table>\n          <thead className=\"ant-table-thead\">\n            <tr>\n              <th>类型</th>\n              <th>効果%</th>\n              <th>差分%</th>\n              <th>固定%</th>\n              <th>効果加算</th>\n              <th>固定%上限</th>\n              <th>条件式</th>\n              <th>発動条件式</th>\n              <th>冲突</th>\n              <th>冲突状态</th>\n              <th>対象</th>\n            </tr>\n          </thead>\n          <tbody className=\"ant-table-tbody\">\n            {skill.InfluenceConfig.map((config: any, index: number) => {\n              // no configs in unit page\n              const description = influences\n                ? influences.find(\n                    (influence: any) =>\n                      influence.ID === config.Data_InfluenceType,\n                  )\n                : config;\n              return (\n                <tr key={index}>\n                  <td>\n                    {config.Data_InfluenceType}\n                    {description &&\n                      description.Description &&\n                      ` / ${description.Description}`}\n                  </td>\n                  <td>{config.Data_MulValue}</td>\n                  <td>{config.Data_MulValue2}</td>\n                  <td>{config.Data_MulValue3}</td>\n                  <td>{config.Data_AddValue}</td>\n                  <td>{config._HoldRatioUpperLimit}</td>\n                  <td>{config._Expression}</td>\n                  <td>{config._ExpressionActivate}</td>\n                  <td>{config.Type_Collision}</td>\n                  <td>{config.Type_CollisionState}</td>\n                  <td>{config.Data_Target}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n);\n\nexport default SkillInfluenceTable;\n","import * as React from 'react';\n\nconst AbilityConfigTable = ({ configs, configMetas, style }: any) => (\n  <div\n    className=\"ant-table ant-table-bordered ant-table-middle\"\n    style={{ ...style }}\n  >\n    <div className=\"ant-table-content\">\n      <div className=\"ant-table-body\">\n        <table>\n          <thead className=\"ant-table-thead\">\n            <tr>\n              <th>类型</th>\n              <th>p1</th>\n              <th>p2</th>\n              <th>p3</th>\n              <th>p4</th>\n              <th>cmd</th>\n              <th>発動条件</th>\n              <th>発動種別</th>\n              <th>対象種別</th>\n            </tr>\n          </thead>\n          <tbody className=\"ant-table-tbody\">\n            {configs.map((config: any, index: number) => {\n              // no configs in unit page\n              const description = configMetas\n                ? configMetas.find((c: any) => c.ID === config._InfluenceType)\n                : config;\n              return (\n                <tr key={index}>\n                  <td>\n                    {config._InfluenceType}\n                    {description &&\n                      description.Description &&\n                      ` / ${description.Description}`}\n                  </td>\n                  <td>{config._Param1}</td>\n                  <td>{config._Param2}</td>\n                  <td>{config._Param3}</td>\n                  <td>{config._Param4}</td>\n                  <td>{config._Command}</td>\n                  <td>{config._ActivateCommand}</td>\n                  <td>{config._InvokeType}</td>\n                  <td>{config._TargetType}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n);\n\nexport default AbilityConfigTable;\n","import * as React from 'react';\nimport { Tooltip } from 'antd';\nimport * as GIF from 'gif.js';\nimport { PLAYER_DOT_URL } from '../../consts';\n\ninterface DotAnimationSingleEntryProps {\n  dot: any;\n  image: string;\n  EntryID: number;\n  cardID: number;\n}\n\nclass DotAnimationSingleEntry extends React.Component<\n  DotAnimationSingleEntryProps\n> {\n  public canvas?: HTMLCanvasElement;\n  public gif: any;\n  public componentDidMount() {\n    let top = 0;\n    let bottom = 0;\n    let left = 0;\n    let right = 0;\n    let canvasWidth = 0;\n    let canvasHeight = 0;\n    let blankWidth = 99999;\n    let blankHeight = 99999;\n    const tickNum: number = this.props.dot.Length;\n    interface Sprite {\n      X: number;\n      Y: number;\n      Width: number;\n      Height: number;\n      OriginX: number;\n      OriginY: number;\n    }\n    const sprites: Sprite[] = this.props.dot.Entries[\n      this.props.EntryID\n    ].Sprites.map((sprite: any) => ({\n      X: sprite.X,\n      Y: sprite.Y,\n      Width: sprite.Width,\n      Height: sprite.Height,\n      OriginX: sprite.OriginX > 1000 ? 0 : sprite.OriginX,\n      OriginY: sprite.OriginY > 1000 ? 0 : sprite.OriginY,\n    }));\n\n    // map sprite to frames\n    let frames: Array<{\n      Sprite: Sprite;\n      Time: number;\n    }> = this.props.dot.Entries[this.props.EntryID].PatternNo.map(\n      (pat: any) => {\n        return { Sprite: sprites[pat.Data], Time: pat.Time };\n      },\n    );\n\n    // get frame length\n    frames = frames\n      .map((pat, index) => ({\n        ...pat,\n        Time:\n          index === frames.length - 1\n            ? tickNum - pat.Time\n            : frames[index + 1].Time - pat.Time,\n      }))\n      .filter(pat => pat.Time !== 0);\n\n    // count the container size of images\n    sprites.forEach(sprite => {\n      left = Math.max(left, sprite.OriginX);\n      right = Math.min(right, sprite.OriginX - sprite.Width);\n\n      top = Math.max(top, sprite.OriginY);\n      bottom = Math.min(bottom, sprite.OriginY - sprite.Height);\n    });\n    canvasWidth = left - right;\n    canvasHeight = top - bottom;\n\n    // count the top-left blank block size\n    sprites.forEach(sprite => {\n      blankWidth = Math.min(blankWidth, canvasWidth - sprite.OriginX);\n      blankHeight = Math.min(blankHeight, canvasHeight - sprite.OriginY);\n    });\n    this.canvas!.width = canvasWidth;\n    this.canvas!.height = canvasHeight;\n\n    // use #08D422 as transparent color\n    // just a random color\n    this.gif = new GIF({\n      workers: 2,\n      quality: 1,\n      workerScript: '/gif.worker.js',\n      width: canvasWidth,\n      height: canvasHeight,\n      background: '#08D422',\n      transparent: '0x08D422',\n    });\n\n    // load image\n    const image = new Image();\n    image.crossOrigin = 'anonymous';\n    image.src = this.props.image;\n    const ctx = this.canvas!.getContext('2d') as CanvasRenderingContext2D;\n\n    let currentTick = 0;\n    let currentFrame = -1;\n\n    let gifStatus = true;\n\n    const imageLoop = () => {\n      // request next tick\n      window.requestAnimationFrame(imageLoop);\n      let frameChanged = false;\n      // when tick goes 0, shift to next frame\n      if (currentTick === 0) {\n        currentFrame += 1;\n        frameChanged = true;\n        if (currentFrame === frames.length) {\n          currentFrame = 0;\n          gifStatus = false;\n        }\n        // set tick to frame length\n        currentTick = frames[currentFrame].Time;\n      }\n      // minus in every tick\n      currentTick--;\n      // draw the sprite\n      const sprite = frames[currentFrame].Sprite;\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.drawImage(\n        image,\n        sprite.X,\n        sprite.Y,\n        sprite.Width,\n        sprite.Height,\n        canvasWidth - sprite.OriginX - blankWidth,\n        canvasHeight - sprite.OriginY - blankHeight,\n        sprite.Width,\n        sprite.Height,\n      );\n      if (gifStatus && frameChanged) {\n        // copy canvas image to a temp canvas and add background\n        const tempCanvas = document.createElement('canvas');\n        tempCanvas.height = canvasHeight;\n        tempCanvas.width = canvasWidth;\n        const tempCtx = tempCanvas.getContext('2d') as CanvasRenderingContext2D;\n        // fill the 'transparent' background\n        tempCtx.fillStyle = '#08D422';\n        tempCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n        tempCtx.drawImage(this.canvas!, 0, 0);\n        this.gif.addFrame(tempCtx, {\n          copy: true,\n          delay: frames[currentFrame].Time * (1000 / 60),\n        });\n      }\n    };\n\n    image.onload = imageLoop;\n  }\n\n  public render() {\n    return (\n      <div>\n        <Tooltip title=\"点击下载gif\">\n          <canvas\n            onClick={() => {\n              this.gif.on('finished', (blob: Blob) => {\n                // crate a anchor\n                const url: string = URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                a.href = url;\n                a.style.display = 'none';\n                a.download = `${this.props.cardID}-${this.props.dot.Name}-${\n                  this.props.EntryID\n                }.gif`;\n                // and click it\n                a.click();\n              });\n              this.gif.render();\n            }}\n            style={{ cursor: 'pointer' }}\n            ref={ref => ref && (this.canvas = ref)}\n          />\n        </Tooltip>\n      </div>\n    );\n  }\n}\n\ninterface DotAnimationProps {\n  dot: any;\n  cardID: number;\n}\n\nexport default class DotAnimation extends React.Component<DotAnimationProps> {\n  public render() {\n    return (\n      <div>\n        {this.props.dot.Entries.map((entry: any, index: number) => (\n          <DotAnimationSingleEntry\n            key={entry.Name}\n            dot={this.props.dot}\n            image={PLAYER_DOT_URL + `/${this.props.cardID}.png`}\n            cardID={this.props.cardID}\n            EntryID={index}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Query } from 'react-apollo';\nimport { Spin, Popover, Layout, Tabs, Divider, Button, Icon } from 'antd';\nimport _ from 'lodash';\nimport Slider from 'react-slick';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport SkillInfluenceTable from '../../SkillInfluenceTable';\nimport AbilityConfigTable from '../../AbilityConfigTable';\nimport DotAnimation from '../../DotAnimation';\nimport {\n  BASE_GAME_URL,\n  ICO_URL,\n  PLAYER_DOT_URL,\n  BONUS_TYPE,\n} from '../../../consts';\nimport './index.less';\n\nconst { Content } = Layout;\nconst { TabPane } = Tabs;\n\ninterface ClassData {\n  ClassID: number;\n  Name: string;\n  InitHP: number;\n  AttackType: number;\n  MaxHP: number;\n  InitDef: number;\n  MaxDef: number;\n  InitAtk: number;\n  MaxAtk: number;\n  AtkArea: number;\n  BlockNum: number;\n  MaxLevel: number;\n  MaxLevelUnit: number;\n  Explanation: string;\n  Cost: number;\n  AttackWait: string;\n  ClassAbilityConfig1: Array<{\n    _InvokeType: number;\n    _TargetType: number;\n    _InfluenceType: number;\n    _Param1: number;\n    _Param2: number;\n    _Param3: number;\n    _Param4: number;\n    _Command: string;\n    _ActivateCommand: string;\n    Description: string;\n  }>;\n  ClassAbilityPower1: number;\n  BattleStyle?: {\n    Data_ID: number;\n    Type_BattleStyle: number;\n    _Param_01: number;\n    _Param_02: number;\n    _Range_01: number;\n    _Range_02: number;\n    _Range_03: number;\n    _Range_04: number;\n    _Range_05: number;\n  };\n}\n\ninterface SkillData {\n  SkillName: string;\n  WaitTime: number;\n  ContTimeMax: number;\n  PowerMax: number;\n  LevelMax: number;\n  Text: string;\n  InfluenceConfig: {\n    Type_Collision: number;\n    Type_CollisionState: number;\n    Type_ChangeFunction: number;\n    Data_Target: number;\n    Data_InfluenceType: number;\n    Data_MulValue: number;\n    Data_MulValue2: number;\n    Data_MulValue3: number;\n    Data_AddValue: number;\n    _HoldRatioUpperLimit: number;\n    _Expression: string;\n    _ExpressionActivate: string;\n    Description: string;\n  };\n}\n\ninterface AbilityData {\n  AbilityID: number;\n  Text: string;\n  AbilityName: string;\n  Config: {\n    _InvokeType: number;\n    _TargetType: number;\n    _InfluenceType: number;\n    _Param1: number;\n    _Param2: number;\n    _Param3: number;\n    _Param4: number;\n    _Command: string;\n    _ActivateCommand: string;\n    Description: string;\n  };\n}\n\ninterface Data {\n  card: {\n    CardID: number;\n    _AwakePattern: number;\n    HarlemTextR: string[];\n    HarlemTextA: string[];\n    Name: number;\n    Rare: number;\n    Kind: number;\n    MaxHPMod: number;\n    AtkMod: number;\n    DefMod: number;\n    CostModValue: number;\n    CostDecValue: number;\n    MagicResistance: number;\n    BonusType: number;\n    BonusNum: number;\n    BonusType2: number;\n    BonusNum2: number;\n    BonusType3: number;\n    BonusNum3: number;\n    Race: number;\n    Assign: number;\n    Identity: number;\n    Illust: number;\n    Dots: Array<{\n      Name: string;\n      Length: number;\n      Entries: Array<{\n        Name: string;\n        Sprites: Array<{\n          X: number;\n          Y: number;\n          Width: number;\n          Height: number;\n          OriginX: number;\n          OriginY: number;\n        }>;\n        PatternNo: {\n          Time: number;\n          Data: number;\n        };\n      }>;\n      Image: string;\n    }>;\n    Class: {\n      ClassInit: ClassData;\n      ClassCC: ClassData;\n      ClassEvo: ClassData;\n      ClassEvo2a: ClassData;\n      ClassEvo2b: ClassData;\n    };\n    ImageCG: string[];\n    ImageStand: string[];\n    AbilityEvoInfo: AbilityData;\n    AbilityInitInfo: AbilityData;\n    ClassLV0SkillID: number;\n    ClassLV1SkillID: number;\n    SkillInit: SkillData[];\n    SkillCC: SkillData[];\n    SkillEvo: SkillData[];\n  };\n}\n\ninterface UnitStates {\n  tabActiveKey: string;\n}\n\nexport default class Unit extends React.Component<\n  RouteComponentProps<{ CardID: string }>,\n  UnitStates\n> {\n  public state: UnitStates = {\n    tabActiveKey: '',\n  };\n  public getStatus = (card: Data['card']) => {\n    const hpMod = card.MaxHPMod / 100;\n    const atkMod = card.AtkMod / 100;\n    const defMod = card.DefMod / 100;\n    const { CostDecValue: costDec, CostModValue: costMod } = card;\n    const { BattleStyle } = card.Class.ClassInit;\n    let ranges = [0, 0, 0, 0, 0];\n    if (BattleStyle) {\n      ranges = [\n        BattleStyle._Range_01,\n        BattleStyle._Range_02,\n        BattleStyle._Range_03,\n        BattleStyle._Range_04,\n        BattleStyle._Range_05,\n      ];\n    }\n    // const rarity = card.Rare;\n    const status = [\n      {\n        stat: '初始',\n        data: classDataToUnit(card.Class.ClassInit, 0),\n      },\n    ];\n    if (card.Class.ClassCC) {\n      status.push({\n        stat: 'CC',\n        data: classDataToUnit(card.Class.ClassCC, 1),\n      });\n    }\n    if (card.Class.ClassEvo) {\n      status.push({\n        stat: '觉醒',\n        data: classDataToUnit(card.Class.ClassEvo, 2),\n      });\n    }\n    if (\n      card.Class.ClassEvo2a &&\n      (card._AwakePattern === 1 || card._AwakePattern === 3)\n    ) {\n      status.push({\n        stat: '第二觉醒A',\n        data: classDataToUnit(card.Class.ClassEvo2a, 3),\n      });\n    }\n    if (\n      card.Class.ClassEvo2b &&\n      (card._AwakePattern === 2 || card._AwakePattern === 3)\n    ) {\n      status.push({\n        stat: '第二觉醒B',\n        data: classDataToUnit(card.Class.ClassEvo2b, 4),\n      });\n    }\n    return status;\n    function classDataToUnit(\n      {\n        InitHP,\n        MaxHP,\n        InitAtk,\n        MaxAtk,\n        InitDef,\n        MaxDef,\n        MaxLevel,\n        MaxLevelUnit,\n        Cost: cost,\n        AtkArea: range,\n        BlockNum: block,\n        Name: className,\n        Explanation,\n        MaxLevelUnit: maxLevelUnit,\n        AttackWait,\n        ClassID,\n      }: ClassData,\n      rangeId: number,\n    ) {\n      function countMinMax(\n        min: number,\n        max: number,\n        maxLevel: number,\n        maxLevelUnit: number,\n        mod: number,\n      ) {\n        return [\n          Math.ceil(mod * (min + (max - min) * (1 / maxLevel))),\n          Math.ceil(mod * (min + (max - min) * (maxLevelUnit / maxLevel))),\n        ];\n      }\n      return {\n        hp: countMinMax(InitHP, MaxHP, MaxLevel, MaxLevelUnit, hpMod),\n        atk: countMinMax(InitAtk, MaxAtk, MaxLevel, MaxLevelUnit, atkMod),\n        def: countMinMax(InitDef, MaxDef, MaxLevel, MaxLevelUnit, defMod),\n        cost: [cost + costMod, cost + costMod - costDec],\n        range:\n          ranges[rangeId] === 0\n            ? ClassID < 10000 || ClassID >= 100000\n              ? 0\n              : range\n            : ranges[rangeId],\n        block,\n        className,\n        maxLevelUnit,\n        Explanation,\n        AttackWait,\n      };\n    }\n  };\n  public getGender = (kind: number) => {\n    if (kind === 1) {\n      return <span className=\"gender genderFemale\" />;\n    } else if (kind === 0) {\n      return <span className=\"gender genderMale\" />;\n    } else {\n      return <span className=\"gender genderUnknown\" />;\n    }\n  };\n\n  public handleTabChange = (tabActiveKey: string) => {\n    this.setState({\n      tabActiveKey,\n    });\n  };\n\n  public render() {\n    const id = this.props.match.params.CardID;\n    return (\n      <Query<Data>\n        query={gql`\n          query($id: Int!) {\n            card(CardID: $id) {\n              CardID\n              _AwakePattern\n              HarlemTextR\n              HarlemTextA\n              Name\n              Rare\n              Kind\n              MaxHPMod\n              AtkMod\n              DefMod\n              CostModValue\n              CostDecValue\n              MagicResistance\n              BonusType\n              BonusNum\n              BonusType2\n              BonusNum2\n              BonusType3\n              BonusNum3\n              Race\n              Assign\n              Identity\n              Illust\n              Dots {\n                Name\n                Length\n                Entries {\n                  Name\n                  Sprites {\n                    X\n                    Y\n                    Width\n                    Height\n                    OriginX\n                    OriginY\n                  }\n                  PatternNo {\n                    Time\n                    Data\n                  }\n                }\n                Image\n              }\n              Class {\n                ClassInit {\n                  ClassID\n                  Name\n                  InitHP\n                  MaxHP\n                  InitDef\n                  MaxDef\n                  InitAtk\n                  MaxAtk\n                  AtkArea\n                  BlockNum\n                  MaxLevel\n                  MaxLevelUnit\n                  Explanation\n                  Cost\n                  AttackWait\n                  ClassAbilityConfig1 {\n                    _InvokeType\n                    _TargetType\n                    _InfluenceType\n                    _Param1\n                    _Param2\n                    _Param3\n                    _Param4\n                    _Command\n                    _ActivateCommand\n                    Description\n                  }\n                  ClassAbilityPower1\n                  BattleStyle {\n                    Data_ID\n                    Type_BattleStyle\n                    _Param_01\n                    _Param_02\n                    _Range_01\n                    _Range_02\n                    _Range_03\n                    _Range_04\n                    _Range_05\n                  }\n                }\n                ClassCC {\n                  ClassID\n                  Name\n                  InitHP\n                  MaxHP\n                  InitDef\n                  MaxDef\n                  InitAtk\n                  MaxAtk\n                  AtkArea\n                  BlockNum\n                  MaxLevel\n                  MaxLevelUnit\n                  Explanation\n                  Cost\n                  AttackWait\n                  ClassAbilityConfig1 {\n                    _InvokeType\n                    _TargetType\n                    _InfluenceType\n                    _Param1\n                    _Param2\n                    _Param3\n                    _Param4\n                    _Command\n                    _ActivateCommand\n                    Description\n                  }\n                  ClassAbilityPower1\n                }\n                ClassEvo {\n                  ClassID\n                  Name\n                  InitHP\n                  MaxHP\n                  InitDef\n                  MaxDef\n                  InitAtk\n                  MaxAtk\n                  AtkArea\n                  BlockNum\n                  MaxLevel\n                  MaxLevelUnit\n                  Explanation\n                  Cost\n                  AttackWait\n                  ClassAbilityConfig1 {\n                    _InvokeType\n                    _TargetType\n                    _InfluenceType\n                    _Param1\n                    _Param2\n                    _Param3\n                    _Param4\n                    _Command\n                    _ActivateCommand\n                    Description\n                  }\n                  ClassAbilityPower1\n                }\n                ClassEvo2a {\n                  ClassID\n                  Name\n                  InitHP\n                  MaxHP\n                  InitDef\n                  MaxDef\n                  InitAtk\n                  MaxAtk\n                  AtkArea\n                  BlockNum\n                  MaxLevel\n                  MaxLevelUnit\n                  Explanation\n                  Cost\n                  AttackWait\n                  ClassAbilityConfig1 {\n                    _InvokeType\n                    _TargetType\n                    _InfluenceType\n                    _Param1\n                    _Param2\n                    _Param3\n                    _Param4\n                    _Command\n                    _ActivateCommand\n                    Description\n                  }\n                  ClassAbilityPower1\n                }\n                ClassEvo2b {\n                  ClassID\n                  Name\n                  InitHP\n                  MaxHP\n                  InitDef\n                  MaxDef\n                  InitAtk\n                  MaxAtk\n                  AtkArea\n                  BlockNum\n                  MaxLevel\n                  MaxLevelUnit\n                  Explanation\n                  Cost\n                  AttackWait\n                  ClassAbilityConfig1 {\n                    _InvokeType\n                    _TargetType\n                    _InfluenceType\n                    _Param1\n                    _Param2\n                    _Param3\n                    _Param4\n                    _Command\n                    _ActivateCommand\n                    Description\n                  }\n                  ClassAbilityPower1\n                }\n              }\n              ImageCG\n              ImageStand\n              AbilityEvoInfo {\n                AbilityID\n                Text\n                AbilityName\n                Config {\n                  _InvokeType\n                  _TargetType\n                  _InfluenceType\n                  _Param1\n                  _Param2\n                  _Param3\n                  _Param4\n                  _Command\n                  _ActivateCommand\n                  Description\n                }\n              }\n              AbilityInitInfo {\n                AbilityID\n                Text\n                AbilityName\n                Config {\n                  _InvokeType\n                  _TargetType\n                  _InfluenceType\n                  _Param1\n                  _Param2\n                  _Param3\n                  _Param4\n                  _Command\n                  _ActivateCommand\n                  Description\n                }\n              }\n              ClassLV0SkillID\n              ClassLV1SkillID\n              SkillInit {\n                SkillName\n                WaitTime\n                ContTimeMax\n                PowerMax\n                LevelMax\n                Text\n                InfluenceConfig {\n                  Type_Collision\n                  Type_CollisionState\n                  Type_ChangeFunction\n                  Data_Target\n                  Data_InfluenceType\n                  Data_MulValue\n                  Data_MulValue2\n                  Data_MulValue3\n                  Data_AddValue\n                  _HoldRatioUpperLimit\n                  _Expression\n                  _ExpressionActivate\n                  Description\n                }\n              }\n              SkillCC {\n                SkillName\n                WaitTime\n                ContTimeMax\n                PowerMax\n                LevelMax\n                Text\n                InfluenceConfig {\n                  Type_Collision\n                  Type_CollisionState\n                  Type_ChangeFunction\n                  Data_Target\n                  Data_InfluenceType\n                  Data_MulValue\n                  Data_MulValue2\n                  Data_MulValue3\n                  Data_AddValue\n                  _HoldRatioUpperLimit\n                  _Expression\n                  _ExpressionActivate\n                  Description\n                }\n              }\n              SkillEvo {\n                SkillName\n                WaitTime\n                ContTimeMax\n                PowerMax\n                LevelMax\n                Text\n                InfluenceConfig {\n                  Type_Collision\n                  Type_CollisionState\n                  Type_ChangeFunction\n                  Data_Target\n                  Data_InfluenceType\n                  Data_MulValue\n                  Data_MulValue2\n                  Data_MulValue3\n                  Data_AddValue\n                  _HoldRatioUpperLimit\n                  _Expression\n                  _ExpressionActivate\n                  Description\n                }\n              }\n            }\n          }\n        `}\n        variables={{ id }}\n      >\n        {({ loading, error, data }) => {\n          return (\n            <Content className=\"unit-containter container\">\n              <Spin\n                spinning={loading}\n                style={{ height: '100%', width: '100%' }}\n              >\n                {data && !_.isEmpty(data) && (\n                  <div>\n                    <h1 className=\"unit-title\">\n                      <Link to={`/quest/${Number.parseInt(id, 10) - 1}`}>\n                        <Icon type=\"left\" />\n                      </Link>\n\n                      <span\n                        className={`rarity-circle rarity-circle-${data.card.Rare}`}\n                      />\n                      <span className={`gender gender-${data.card.Kind}`} />\n                      <span>{data.card.Name}</span>\n                      <Link to={`/unit/${Number.parseInt(id, 10) + 1}`}>\n                        <Icon type=\"right\" />\n                      </Link>\n                    </h1>\n                    <p>\n                      {data.card.Race && <span>&lt;{data.card.Race}&gt;</span>}\n                      {data.card.Assign && (\n                        <span>&lt;{data.card.Assign}&gt;</span>\n                      )}\n                      {data.card.Identity && (\n                        <span>&lt;{data.card.Identity}&gt;</span>\n                      )}\n                    </p>\n                    <div className=\"harem-container\">\n                      <div className=\"ant-carousel\">\n                        <Slider\n                          dots\n                          className={`cg-${data.card.ImageCG.length}`}\n                        >\n                          {[...data.card.ImageStand, ...data.card.ImageCG].map(\n                            (img: string) => (\n                              <div key={img}>\n                                <img alt={img} src={`${BASE_GAME_URL}${img}`} />\n                              </div>\n                            ),\n                          )}\n                        </Slider>\n                      </div>\n                      <Tabs\n                        activeKey={this.state.tabActiveKey}\n                        onChange={this.handleTabChange}\n                        className={\n                          'harlem-text-tabs ' +\n                          (data.card.HarlemTextR &&\n                            `harlem-text-tabs-${data.card.HarlemTextR.length}`)\n                        }\n                        // type=\"card\"\n                      >\n                        {data.card.HarlemTextA &&\n                          data.card.HarlemTextA.map(\n                            (text: string, index: number) => (\n                              <TabPane\n                                tab={`表${index + 1}`}\n                                key={`a-${index}`}\n                              >\n                                <div>\n                                  <Button\n                                    onClick={() => this.handleTabChange('')}\n                                    type=\"danger\"\n                                    shape=\"circle\"\n                                    icon=\"close\"\n                                  />\n                                </div>\n                                <span\n                                  dangerouslySetInnerHTML={{\n                                    __html: text\n                                      .replace(\n                                        /([＠@].*\\r\\n)/g,\n                                        (match, p1) =>\n                                          `<span style=\"font-weight: bold\">${p1}</span>`,\n                                      )\n                                      .replace(/\\r\\n/g, '<br />'),\n                                  }}\n                                />\n                              </TabPane>\n                            ),\n                          )}\n                        {data.card.HarlemTextR &&\n                          data.card.HarlemTextR.map(\n                            (text: string, index: number) => (\n                              <TabPane\n                                tab={`里${index + 1}`}\n                                key={`r-${index}`}\n                              >\n                                <div>\n                                  <Button\n                                    onClick={() => this.handleTabChange('')}\n                                    type=\"danger\"\n                                    shape=\"circle\"\n                                    icon=\"close\"\n                                  />\n                                </div>\n                                <span\n                                  dangerouslySetInnerHTML={{\n                                    __html: text\n                                      .replace(\n                                        /([@＠].*\\r\\n)/g,\n                                        (match, p1) =>\n                                          `<span style=\"font-weight: bold\">${p1}</span>`,\n                                      )\n                                      .replace(/\\r\\n/g, '<br />'),\n                                  }}\n                                />\n                              </TabPane>\n                            ),\n                          )}\n                      </Tabs>\n                      {/* {data.card.HarlemTextR[0]} */}\n                    </div>\n                    <p>\n                      Illust: <strong>{data.card.Illust}</strong>\n                    </p>\n                    <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                      <div className=\"ant-table-title\">\n                        <strong>HP补正:</strong>\n                        {data.card.MaxHPMod / 100}/<strong>攻击补正:</strong>\n                        {data.card.AtkMod / 100}/<strong>防御补正:</strong>\n                        {data.card.DefMod / 100}\n                      </div>\n                      <div className=\"ant-table-content\">\n                        <div className=\"ant-table-body\">\n                          <table>\n                            <thead className=\"ant-table-thead\">\n                              <tr>\n                                <th>状态</th>\n                                <th>职业名</th>\n                                <th>头像</th>\n                                <th>等级</th>\n                                <th>HP</th>\n                                <th>攻击力</th>\n                                <th>防御力</th>\n                                <th>魔抗</th>\n                                <th>射程</th>\n                                <th>档数</th>\n                                <th>Cost</th>\n                              </tr>\n                            </thead>\n                            <tbody className=\"ant-table-tbody\">\n                              {this.getStatus(data.card).map(stat => [\n                                <tr\n                                  className=\"ant-table-row\"\n                                  key={`${stat.stat}-1`}\n                                >\n                                  <td rowSpan={2}>{stat.stat}</td>\n                                  <td rowSpan={2}>{stat.data.className}</td>\n                                  <td rowSpan={2}>\n                                    {(() => {\n                                      let url = ICO_URL;\n                                      switch (stat.stat) {\n                                        case '初始':\n                                          url += '/0';\n                                          break;\n                                        case '觉醒':\n                                          url += '/1';\n                                          break;\n                                        case '第二觉醒A':\n                                          url += '/2';\n                                          break;\n                                        case '第二觉醒B':\n                                          url += '/3';\n                                          break;\n                                        default:\n                                          return null;\n                                      }\n                                      return (\n                                        <img\n                                          alt={data.card.CardID.toString()}\n                                          src={`${url}/${data.card.CardID}.png`}\n                                        />\n                                      );\n                                    })()}\n                                  </td>\n                                  <td>Lv1</td>\n                                  <td>{stat.data.hp[0]}</td>\n                                  <td>{stat.data.atk[0]}</td>\n                                  <td>{stat.data.def[0]}</td>\n                                  <td rowSpan={2}>\n                                    {data.card.MagicResistance}\n                                  </td>\n                                  <td rowSpan={2}>\n                                    {stat.data.range ? stat.data.range : '近战'}\n                                  </td>\n                                  <td rowSpan={2}>{stat.data.block}</td>\n                                  <td rowSpan={2}>\n                                    {stat.data.cost[0]}({stat.data.cost[1]})\n                                  </td>\n                                </tr>,\n                                <tr\n                                  className=\"ant-table-row\"\n                                  key={`${stat.stat}-2`}\n                                >\n                                  <td>\n                                    Lv\n                                    {stat.data.maxLevelUnit}\n                                  </td>\n                                  <td>{stat.data.hp[1]}</td>\n                                  <td>{stat.data.atk[1]}</td>\n                                  <td>{stat.data.def[1]}</td>\n                                </tr>,\n                              ])}\n                            </tbody>\n                          </table>\n                        </div>\n                        <div className=\"ant-table-footer\">\n                          {data.card.BonusType !== 0 && (\n                            <span>\n                              <strong>\n                                {BONUS_TYPE.get(data.card.BonusType)}\n                              </strong>\n                              {Math.ceil(data.card.BonusNum * 1.2)}\n                            </span>\n                          )}\n                          {data.card.BonusType2 !== 0 && (\n                            <span>\n                              <Divider type=\"vertical\" />\n                              <strong>\n                                {BONUS_TYPE.get(data.card.BonusType2)}\n                              </strong>\n                              {Math.ceil(data.card.BonusNum2 * 1.2)}\n                            </span>\n                          )}\n                          {data.card.BonusType3 !== 0 && (\n                            <span>\n                              <Divider>150%</Divider>\n                              <strong>\n                                {BONUS_TYPE.get(data.card.BonusType3)}\n                              </strong>\n                              {Math.ceil(data.card.BonusNum3)}\n                            </span>\n                          )}\n                          {data.card.BonusType === 0 && <span>无好感</span>}\n                        </div>\n                      </div>\n                    </div>\n                    {data.card.AbilityEvoInfo.AbilityID !== 0 && (\n                      <div>\n                        <h2>被动</h2>\n                        <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                          <div className=\"ant-table-content\">\n                            <div className=\"ant-table-body\">\n                              <table>\n                                <thead className=\"ant-table-thead\">\n                                  <tr>\n                                    <th>状态</th>\n                                    <th>名称</th>\n                                    <th>描述</th>\n                                  </tr>\n                                </thead>\n                                <tbody className=\"ant-table-tbody\">\n                                  {[\n                                    {\n                                      ...data.card.AbilityInitInfo,\n                                      Type: '初始',\n                                    },\n                                    {\n                                      ...data.card.AbilityEvoInfo,\n                                      Type: '觉醒',\n                                    },\n                                  ]\n                                    .filter(\n                                      (ability: any) => ability.AbilityID !== 0,\n                                    )\n                                    .map((ability: any) => (\n                                      <Popover\n                                        content={\n                                          <AbilityConfigTable\n                                            configs={ability.Config}\n                                          />\n                                        }\n                                        key={ability.AbilityName}\n                                      >\n                                        <tr key={ability.AbilityName}>\n                                          <td>{ability.Type}</td>\n                                          <td>{ability.AbilityName}</td>\n                                          <td>{ability.Text}</td>\n                                        </tr>\n                                      </Popover>\n                                    ))}\n                                </tbody>\n                              </table>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    {data.card.SkillInit[0].SkillName !== 'なし' && (\n                      <div>\n                        <h2>技能</h2>\n                        <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                          <div className=\"ant-table-content\">\n                            <div className=\"ant-table-body\">\n                              <table>\n                                <thead className=\"ant-table-thead\">\n                                  <tr>\n                                    <th>状态</th>\n                                    <th>技能名</th>\n                                    <th>效果</th>\n                                    <th>持续</th>\n                                    <th>再动</th>\n                                    <th>技能等级</th>\n                                    <th>&lt;POW_I&gt;</th>\n                                  </tr>\n                                </thead>\n                                <tbody className=\"ant-table-tbody\">\n                                  {[\n                                    {\n                                      Data: [...data.card.SkillInit],\n                                      Type: '初始',\n                                    },\n                                    {\n                                      Data: [...data.card.SkillCC],\n                                      Type: 'CC',\n                                    },\n                                    {\n                                      Data: [...data.card.SkillEvo],\n                                      Type: '觉醒',\n                                    },\n                                  ]\n                                    .filter(skills => {\n                                      if (\n                                        skills.Type === 'CC' &&\n                                        data.card.ClassLV0SkillID ===\n                                          data.card.ClassLV1SkillID\n                                      ) {\n                                        return false;\n                                      }\n                                      if (skills.Data[0].SkillName === 'なし') {\n                                        return false;\n                                      }\n                                      return true;\n                                    })\n                                    .map(skills =>\n                                      skills.Data.map((skill: any, index) => (\n                                        <Popover\n                                          key={`skill-${skills.Type}-${index}`}\n                                          content={\n                                            <SkillInfluenceTable\n                                              skill={skill}\n                                            />\n                                          }\n                                        >\n                                          <tr>\n                                            {index === 0 && (\n                                              <td rowSpan={skills.Data.length}>\n                                                {skills.Type}\n                                              </td>\n                                            )}\n                                            <td>{skill.SkillName}</td>\n                                            <td>{skill.Text}</td>\n                                            <td>{skill.ContTimeMax}</td>\n                                            <td>\n                                              {skill.WaitTime - skill.LevelMax}\n                                            </td>\n                                            <td>{skill.LevelMax}</td>\n                                            <td>{skill.PowerMax}</td>\n                                          </tr>\n                                        </Popover>\n                                      )),\n                                    )}\n                                </tbody>\n                              </table>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    <div>\n                      <h2>职业</h2>\n                      <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                        <div className=\"ant-table-content\">\n                          <div className=\"ant-table-body\">\n                            <table>\n                              <thead className=\"ant-table-thead\">\n                                <tr>\n                                  <th>职业</th>\n                                  <th>描述</th>\n                                  <th>后摇</th>\n                                  <th>被动强度</th>\n                                </tr>\n                              </thead>\n                              <tbody className=\"ant-table-tbody\">\n                                {Object.keys(data.card.Class).map(key => {\n                                  if (!(key in data.card.Class)) {\n                                    throw Error('No such key');\n                                  }\n\n                                  const classData =\n                                    data.card.Class[\n                                      key as keyof Data['card']['Class']\n                                    ];\n                                  if (\n                                    !classData ||\n                                    typeof classData !== 'object'\n                                  ) {\n                                    return null;\n                                  }\n                                  return (\n                                    <Popover\n                                      content={\n                                        <AbilityConfigTable\n                                          configs={\n                                            classData.ClassAbilityConfig1\n                                          }\n                                        />\n                                      }\n                                      key={key}\n                                    >\n                                      <tr key={key}>\n                                        <td>{classData.Name}</td>\n                                        <td>{classData.Explanation}</td>\n                                        <td>{classData.AttackWait}</td>\n                                        <td>{classData.ClassAbilityPower1}</td>\n                                      </tr>\n                                    </Popover>\n                                  );\n                                })}\n                              </tbody>\n                            </table>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    {data.card.Dots && (\n                      <div>\n                        <h2>点阵</h2>\n                        <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                          <div className=\"ant-table-content\">\n                            <div className=\"ant-table-body\">\n                              <table>\n                                <tbody className=\"ant-table-tbody\">\n                                  {data.card.Dots.map(\n                                    (dot: any, index: number) => (\n                                      <tr key={index + dot.Name}>\n                                        <td\n                                          style={{\n                                            background: '#f5f6fa',\n                                            fontWeight: 500,\n                                            color: 'rgba(0, 0, 0, 0.85)',\n                                          }}\n                                        >\n                                          {dot.Name}\n                                        </td>\n                                        <td>{dot.Length}f</td>\n                                        <td>\n                                          {dot.Entries.map(\n                                            (\n                                              entry: any,\n                                              entryIndex: number,\n                                            ) => (\n                                              <div key={entryIndex}>\n                                                {entry.Sprites.map(\n                                                  (\n                                                    sprite: any,\n                                                    index: number,\n                                                  ) => {\n                                                    return (\n                                                      <div\n                                                        key={`${entryIndex}-${index}`}\n                                                        style={{\n                                                          display:\n                                                            'inline-block',\n                                                          width: sprite.Width,\n                                                          height: sprite.Height,\n                                                          backgroundImage: `url(\"${PLAYER_DOT_URL}/${data.card.CardID}.png\")`,\n                                                          backgroundPositionX: -sprite.X,\n                                                          backgroundPositionY: -sprite.Y,\n                                                        }}\n                                                      />\n                                                    );\n                                                  },\n                                                )}\n                                              </div>\n                                            ),\n                                          )}\n                                        </td>\n                                        <td>\n                                          <DotAnimation\n                                            dot={dot}\n                                            cardID={data.card.CardID}\n                                          />\n                                        </td>\n                                      </tr>\n                                    ),\n                                  )}\n                                </tbody>\n                              </table>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </Spin>\n            </Content>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Modal } from 'antd';\nimport { RouteComponentProps } from 'react-router-dom';\nimport Unit from '../Unit';\n\ninterface UnitModalStates {\n  visible: boolean;\n}\n\nclass UnitModal extends React.Component<\n  RouteComponentProps<{ CardID: string }>,\n  UnitModalStates\n> {\n  public state = {\n    visible: true,\n  };\n\n  private handleCancel = () => {\n    this.setState(\n      {\n        visible: false,\n      },\n      () => {\n        setTimeout(() => {\n          this.props.history.goBack();\n        }, 500);\n      },\n    );\n  };\n  public render() {\n    const { history, location, match } = this.props;\n    return (\n      <Modal\n        footer={null}\n        width=\"90%\"\n        visible={this.state.visible}\n        onCancel={this.handleCancel}\n      >\n        <Unit history={history} location={location} match={match} />\n      </Modal>\n    );\n  }\n}\n\nexport default UnitModal;\n","export const MISSION_TYPE: { [k: string]: string } = {\n  Assault: '投票讨伐',\n  Story: '主线',\n  Emergency: '<span style=\"color: red\">紧急<span>',\n  Reproduce: '复刻',\n  DailyReproduce: '每日复刻',\n  Subjugation: '大讨伐',\n  DevilAdvent: '魔神',\n  Harlem: '交流',\n  Daily: '曜日',\n  Challenge: '挑战',\n  Tutorial: '教程',\n  Tower: '英杰之塔',\n  Raid: '神兽',\n};\n\nexport interface QuestData {\n  Name: string;\n  QuestID: number;\n  Charisma: number;\n  ActionPoint: number;\n}\n","import React from 'react';\nimport { Spin, Col, Row } from 'antd';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { QuestData } from './types';\nimport useRouter from 'use-react-router';\n\nconst MissionShutter: React.FC<{ mission: any }> = ({ mission }) => {\n  const { history } = useRouter();\n\n  const showQuest = (questID: number) => {\n    history.push(`/quest/${questID}`);\n  };\n  return (\n    <Query<{\n      mission: {\n        Quests: QuestData[];\n      };\n    }>\n      query={gql`\n        query($MissionID: Int!) {\n          mission(MissionID: $MissionID) {\n            Quests {\n              Name\n              QuestID\n              Charisma\n              ActionPoint\n            }\n          }\n        }\n      `}\n      variables={{ MissionID: mission.MissionID }}\n    >\n      {({ loading, error, data }) => {\n        if (loading) {\n          return <Spin />;\n        }\n        if (data && data.mission.Quests.length === 0) {\n          return <div>该战役下没有关卡。</div>;\n        }\n        return (\n          data &&\n          data.mission.Quests.map((quest: any) => (\n            <Row\n              key={quest.QuestID}\n              className=\"list-card quest-list\"\n              onClick={showQuest.bind(null, quest.QuestID)}\n            >\n              <Col span={2}>{quest.QuestID}</Col>\n              <Col span={2} className=\"charisma\">\n                {quest.Charisma}\n              </Col>\n              <Col span={2} className=\"action-point\">\n                {quest.ActionPoint}\n              </Col>\n              <Col className=\"important\" span={18}>\n                {quest.Name}\n              </Col>\n            </Row>\n          ))\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default MissionShutter;\n","import * as React from 'react';\nimport { Query } from 'react-apollo';\nimport { Spin, Layout, Collapse, Row, Col, Affix } from 'antd';\nimport gql from 'graphql-tag';\nimport _ from 'lodash';\nimport { MISSION_TYPE } from './types';\nimport MissionShutter from './MissionShutter';\nimport './index.less';\n\nconst { Content } = Layout;\nconst Panel = Collapse.Panel;\n\nconst QuestList: React.FC = () => {\n  return (\n    <Content className=\"container\">\n      <Affix>\n        <Row className=\"sorter-block\">\n          <Col span={2}>#</Col>\n          <Col span={2}>魅力</Col>\n          <Col span={2}>体力</Col>\n          <Col span={18}>名称</Col>\n        </Row>\n      </Affix>\n      <Query\n        query={gql`\n          query {\n            missions {\n              Name\n              Type\n              MissionID\n            }\n          }\n        `}\n      >\n        {({ loading, error, data }: any) => {\n          return (\n            <div>\n              <Spin spinning={loading}>\n                {!error && data.missions && (\n                  <Content className=\"mission-list-content\">\n                    <Collapse bordered={false} accordion>\n                      {Object.entries(_.groupBy(data.missions, 'Type')).map(\n                        ([missionType, missions]) => (\n                          <Panel\n                            header={\n                              <span\n                                dangerouslySetInnerHTML={{\n                                  __html: MISSION_TYPE[missionType]\n                                    ? MISSION_TYPE[missionType]\n                                    : missionType,\n                                }}\n                              />\n                            }\n                            key={missionType}\n                          >\n                            <Collapse bordered={false}>\n                              {missions.map((mission: any) => (\n                                <Panel\n                                  className=\"mission-panel\"\n                                  key={mission.MissionID}\n                                  header={\n                                    <span>\n                                      <strong>{mission.MissionID}</strong>\n                                      &nbsp;\n                                      {mission.Name}\n                                    </span>\n                                  }\n                                >\n                                  <MissionShutter mission={mission} />\n                                </Panel>\n                              ))}\n                            </Collapse>\n                          </Panel>\n                        ),\n                      )}\n                    </Collapse>\n                  </Content>\n                )}\n              </Spin>\n            </div>\n          );\n        }}\n      </Query>\n    </Content>\n  );\n};\n\nexport default QuestList;\n","import React from 'react';\nimport { Affix, Popover, Icon } from 'antd';\nimport _ from 'lodash';\nimport { ICO_URL, ENEMY_DOT_URL, ENEMY_CHANGE_COND } from '../../../consts';\nimport styles from './index.module.less';\nimport classNames from 'classnames';\n\ninterface EnemyTableRowsProps {\n  enemy: any;\n  drops: string[];\n  isChange?: boolean;\n}\n\ninterface EnemyTableRowsStates {\n  showChange: boolean;\n}\n\nclass EnemyTableRows extends React.Component<\n  EnemyTableRowsProps,\n  EnemyTableRowsStates\n> {\n  public readonly state: EnemyTableRowsStates = {\n    showChange: false,\n  };\n\n  private getAttackSpeed(enemy: any) {\n    // don't know why\n    if (!enemy.DotLength) {\n      return null;\n    }\n    let attackSpeed = enemy.AttackWait * 2 + enemy.DotLength;\n    if (!enemy.ATTACK_RANGE) {\n      attackSpeed += enemy.ATTACK_SPEED;\n    }\n    return attackSpeed;\n  }\n\n  private handleRowClick: () => void = () => {\n    this.setState(state => ({ showChange: !state.showChange }));\n  };\n\n  public render() {\n    const { enemy, drops, isChange = false } = this.props;\n    const { showChange } = this.state;\n    const enemies = (showChange && enemy.Changes) || [enemy];\n    return (\n      <>\n        {enemies.map((e: any, index: number) => (\n          <tr\n            key={index}\n            onClick={enemy.Changes ? this.handleRowClick : undefined}\n            className={classNames({\n              [styles.enemyRowWithChange]: enemy.Changes,\n              [styles.rowShow]: showChange,\n            })}\n          >\n            {index === 0 && (\n              <td rowSpan={enemies.length}>\n                {enemy.Changes && (\n                  <Icon\n                    style={{\n                      transform: showChange ? 'rotate(-90deg)' : undefined,\n                      transition: 'transform 0.3s',\n                    }}\n                    type=\"caret-down\"\n                    theme=\"filled\"\n                  />\n                )}\n              </td>\n            )}\n            <td>\n              <img\n                alt={((e.PatternID >> 8) % 4096).toString()}\n                src={`${ENEMY_DOT_URL}/${(e.PatternID >> 8) % 4096}.png`}\n              />\n            </td>\n            {!isChange && <td>{e.Loop}</td>}\n            <td>{e.Types && e.Types.join(', ')}</td>\n            <td>\n              {e.TypeAttack === 300 ? '真伤' : e.MagicAttack ? '魔法' : '物理'}\n            </td>\n            <td>{this.getAttackSpeed(e)}</td>\n            <td>{e.ATTACK_RANGE ? e.ATTACK_RANGE : '近接'}</td>\n            <td>{e.HP}</td>\n            <td>{e.ATTACK_POWER}</td>\n            <td>{e.ARMOR_DEFENSE}</td>\n            <td>{e.MAGIC_DEFENSE}</td>\n            <td>{e.Param_ResistanceAssassin}</td>\n            <td>\n              {e.PrizeCardID ? (\n                <img\n                  alt={(e.PrizeCardID - 1).toString()}\n                  src={drops[e.PrizeCardID - 1]}\n                />\n              ) : null}\n            </td>\n            <Popover\n              content={\n                <pre>\n                  {JSON.stringify({ ...e, Changes: undefined }, null, 2)}\n                </pre>\n              }\n              placement=\"left\"\n            >\n              <td>\n                {e.Param_ChangeParam ? (\n                  <p>{ENEMY_CHANGE_COND[e.Param_ChangeCondition]}</p>\n                ) : null}\n              </td>\n            </Popover>\n          </tr>\n        ))}\n      </>\n    );\n  }\n}\n\ninterface EnemyTableProps {\n  quest: any;\n  battleTalks: Array<{\n    Message: string;\n    Name: string;\n  }>;\n  onDrop: (treasureDrop: number[][]) => void;\n  showDuplicated: boolean;\n}\n\nclass EnemyTable extends React.Component<EnemyTableProps> {\n  public componentDidMount() {\n    const entries: any = _.find(this.props.quest.Map.Entries, {\n      EntryID: this.props.quest.EntryNo,\n    });\n    const treasureDrop: number[][] = [[], [], [], [], []];\n    entries.Entries.forEach((entry: any, index: number) => {\n      if (entry.PrizeCardID) {\n        treasureDrop[entry.PrizeCardID - 1].push(index);\n      }\n    });\n    this.props.onDrop(treasureDrop);\n  }\n  public render() {\n    const quest = this.props.quest;\n    const enemies = quest.Map.Enemies || quest.Mission.Enemies;\n    const entries: any = _.find(quest.Map.Entries, {\n      EntryID: quest.EntryNo,\n    });\n    const mapLevel = quest.Level;\n    const drops = [\n      quest.Treasure1,\n      quest.Treasure2,\n      quest.Treasure3,\n      quest.Treasure4,\n      quest.Treasure5,\n    ].map((treasure: number, index: number) => `${ICO_URL}/0/${treasure}.png`);\n    const parsedEnemies: any = [];\n    const parseEnemy = (entry: any, enemyID: number = entry.EnemyID - 1) => {\n      const enemy = { ...enemies[enemyID], ...entry, EnemyID: enemyID };\n      if (!enemy.Level) {\n        enemy.Level = 100;\n      }\n      enemy.HP = (enemy.HP * mapLevel * enemy.Level) / 10000;\n      if (!enemy.ATTACK_RANGE) {\n        enemy.ATTACK_POWER =\n          (enemy.ATTACK_POWER * mapLevel * enemy.Level) / 10000;\n      }\n      return enemy;\n    };\n    entries.Entries.forEach((entry: any) => {\n      // ids between 0 and 1000 are true enemies\n      if (entry.EnemyID >= 0 && entry.EnemyID < 1000) {\n        const enemy = parseEnemy(entry);\n        if (\n          !this.props.showDuplicated &&\n          parsedEnemies.find((e: any) => e.EnemyID === enemy.EnemyID)\n        ) {\n          enemy.duplicated = true;\n        }\n        if (enemy.Param_ChangeParam) {\n          const changes = [enemy];\n          while (changes[changes.length - 1].Param_ChangeParam) {\n            const changeFrom = changes[changes.length - 1];\n            const enemyID = changeFrom.Param_ChangeParam - 1;\n            if (_.find(changes, ['EnemyID', enemyID])) {\n              break;\n            }\n            const newEnemy = parseEnemy(entry, enemyID);\n            changes.push(newEnemy);\n          }\n          enemy.Changes = changes;\n        }\n        parsedEnemies.push(enemy);\n      } else {\n        parsedEnemies.push(entry);\n      }\n    });\n    return (\n      <>\n        <Affix>\n          <div className=\"ant-table ant-table-bordered ant-table-middle\">\n            <div className=\"ant-table-content\">\n              <div className=\"ant-table-body\">\n                <table style={{ textAlign: 'center' }}>\n                  <thead className=\"ant-table-thead\" style={{ width: '100%' }}>\n                    <tr>\n                      <th style={{ width: '8%' }} />\n                      <th style={{ width: '13%' }}>点阵</th>\n                      <th style={{ width: '5%' }}>重复</th>\n                      <th style={{ width: '13%' }}>属性</th>\n                      <th style={{ width: '5%' }}>攻击属性</th>\n                      <th style={{ width: '5%' }}>攻速</th>\n                      <th style={{ width: '5%' }}>射程</th>\n                      <th style={{ width: '5%' }}>HP</th>\n                      <th style={{ width: '5%' }}>攻击</th>\n                      <th style={{ width: '5%' }}>防御</th>\n                      <th style={{ width: '5%' }}>魔抗</th>\n                      <th style={{ width: '5%' }}>暗杀补正</th>\n                      <th style={{ width: '13%' }}>掉落</th>\n                      <th style={{ width: '8%' }}>备注</th>\n                    </tr>\n                  </thead>\n                </table>\n              </div>\n            </div>\n          </div>\n        </Affix>\n        <div className=\"ant-table ant-table-bordered ant-table-middle\">\n          <div className=\"ant-table-content\">\n            <div className=\"ant-table-body\">\n              <table style={{ textAlign: 'center' }}>\n                <colgroup style={{ width: '8%' }} />\n                <colgroup style={{ width: '13%' }} />\n                <colgroup style={{ width: '5%' }} />\n                <colgroup style={{ width: '13%' }} />\n                <colgroup style={{ width: '5%' }} />\n                <colgroup style={{ width: '5%' }} />\n                <colgroup style={{ width: '5%' }} />\n                <colgroup style={{ width: '5%' }} />\n                <colgroup style={{ width: '5%' }} />\n                <colgroup style={{ width: '5%' }} />\n                <colgroup style={{ width: '5%' }} />\n                <colgroup style={{ width: '5%' }} />\n                <colgroup style={{ width: '13%' }} />\n                <colgroup style={{ width: '8%' }} />\n\n                <tbody className=\"ant-table-tbody\">\n                  {parsedEnemies.map((enemy: any, index: number) => {\n                    if (enemy.duplicated) {\n                      return null;\n                    }\n                    if (enemy.EnemyID >= 0 && enemy.EnemyID < 1000) {\n                      return (\n                        <EnemyTableRows\n                          enemy={enemy}\n                          drops={drops}\n                          key={index}\n                        />\n                      );\n                    } else if (enemy.EnemyID === -1) {\n                      // wait\n                      return null;\n                    } else if (enemy.EnemyID === 2000) {\n                      // exclution mark\n                      return null;\n                    } else if (enemy.EnemyID >= 1000 && enemy.EnemyID < 2000) {\n                      // quest event text\n                      return (\n                        <tr key={`enemy-table-${index}`}>\n                          <td\n                            style={{\n                              background: '#f5f6fa',\n                              fontWeight: 'bold',\n                              textAlign: 'center',\n                              color: 'rgba(0, 0, 0, 0.85)',\n                            }}\n                          >\n                            {this.props.battleTalks[enemy.EnemyID - 1000].Name}\n                          </td>\n                          <td colSpan={13} style={{ textAlign: 'left' }}>\n                            {\n                              this.props.battleTalks[enemy.EnemyID - 1000]\n                                .Message\n                            }\n                          </td>\n                        </tr>\n                      );\n                    } else if (enemy.EnemyID === 4201) {\n                      // command, play se or call a event, etc\n                      const command = enemy.EntryCommand;\n                      const match = /CallEvent\\(([\\d,]+)\\)/.exec(command);\n                      if (match) {\n                        const list = match[1].split(',');\n                        return list.map((s, index) => {\n                          const recordIndex = Number.parseInt(s, 10);\n                          const talk: any = _.find(\n                            this.props.quest.Mission.BattleTalks,\n                            {\n                              RecordIndex: recordIndex,\n                            },\n                          );\n                          if (!talk) {\n                            return null;\n                          }\n                          return (\n                            <tr\n                              key={`enemy-table-${index}-event-${recordIndex}`}\n                            >\n                              <td\n                                style={{\n                                  background: '#f5f6fa',\n                                  fontWeight: 'bold',\n                                  textAlign: 'center',\n                                  color: 'rgba(0, 0, 0, 0.85)',\n                                }}\n                              >\n                                {talk.Name}\n                              </td>\n                              <td colSpan={12} style={{ textAlign: 'left' }}>\n                                {talk.Message}\n                              </td>\n                              {index === 0 && (\n                                <Popover content={command} placement=\"left\">\n                                  <td rowSpan={list.length} />\n                                </Popover>\n                              )}\n                            </tr>\n                          );\n                        });\n                      }\n                      return (\n                        <tr\n                          style={{ display: 'none' }}\n                          key={`enemy-table-${index}`}\n                        >\n                          <td colSpan={14}>{enemy.EntryCommand}</td>\n                        </tr>\n                      );\n                    } else {\n                      return (\n                        <tr\n                          style={{ display: 'none' }}\n                          key={`enemy-table-${index}`}\n                        >\n                          <td colSpan={14}>{JSON.stringify(enemy)}</td>\n                        </tr>\n                      );\n                    }\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default EnemyTable;\n","import * as React from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { Spin, Layout, Row, Col, Tag, Switch, Tabs, Icon } from 'antd';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport _ from 'lodash';\nimport { ICO_URL } from '../../../consts';\nimport { Data } from './Types';\nimport EnemyTable from './EnemyTable';\nimport styles from './index.module.less';\n\nconst { Content } = Layout;\n\nexport interface QuestStates {\n  treasureDrop: {\n    [key: number]: number[];\n  };\n  showDuplicated: boolean;\n}\n\nexport default class Quest extends React.Component<\n  RouteComponentProps<{ QuestID: string }>,\n  QuestStates\n> {\n  public state = {\n    treasureDrop: { 0: [], 1: [], 2: [], 3: [], 4: [] },\n    showDuplicated: false,\n  };\n\n  public pushDrop = (treasureDrop: number[][]) => {\n    this.setState({\n      treasureDrop,\n    });\n  };\n\n  public handleDuplicatedChange = () => {\n    this.setState(state => ({ showDuplicated: !state.showDuplicated }));\n  };\n\n  public render() {\n    const id = this.props.match.params.QuestID;\n    return (\n      <Query<Data>\n        query={gql`\n          query($id: Int!) {\n            quest(QuestID: $id) {\n              EventArcs {\n                _TalkerName\n                _TalkText\n              }\n              Name\n              Message\n              Charisma\n              EntryNo\n              Level\n              ActionPoint\n              Treasure1\n              Treasure2\n              Treasure3\n              Treasure4\n              Treasure5\n              RankExp\n              Gold\n              Mission {\n                Enemies {\n                  SpecialEffect\n                  PatternID\n                  Types\n                  HP\n                  HP_MAX\n                  ATTACK_POWER\n                  ATTACK_TYPE\n                  ATTACK_RANGE\n                  ATTACK_SPEED\n                  ARMOR_DEFENSE\n                  MAGIC_DEFENSE\n                  SkyFlag\n                  GainCost\n                  EffectHeight\n                  MagicAttack\n                  AttackWait\n                  Param_ResistanceAssassin\n                  Param_ChangeParam\n                  Param_ChangeCondition\n                  TypeAttack\n                  DotLength\n                }\n                BattleTalks {\n                  Message\n                  Name\n                  FaceID\n                  RecordIndex\n                }\n              }\n              MapNo\n              Map {\n                Image\n                Entries {\n                  EntryID\n                  Entries {\n                    EnemyID\n                    Wait\n                    RouteNo\n                    Loop\n                    Level\n                    PrizeEnemySpawnPercent\n                    PrizeCardID\n                    PrizeEnemyDropPercent\n                    RouteOffset\n                    IsAppear\n                    FreeCommand\n                    EntryCommand\n                    DeadCommand\n                  }\n                }\n                Routes {\n                  RouteID\n                  Routes {\n                    OnEvent\n                  }\n                }\n                Enemies {\n                  SpecialEffect\n                  PatternID\n                  Types\n                  Weather\n                  HP\n                  HP_MAX\n                  ATTACK_POWER\n                  ATTACK_TYPE\n                  ATTACK_RANGE\n                  ATTACK_SPEED\n                  ARMOR_DEFENSE\n                  MAGIC_DEFENSE\n                  MOVE_SPEED\n                  SKILL\n                  SkyFlag\n                  GainCost\n                  EffectHeight\n                  MagicAttack\n                  AttackWait\n                  MissileID\n                  DeadEffect\n                  Param_ResistanceAssassin\n                  Param_ChangeParam\n                  Param_ChangeCondition\n                  TypeAttack\n                  HeightOfs_Paralisys\n                  DotLength\n                }\n              }\n            }\n            battleTalks {\n              Message\n              Name\n            }\n          }\n        `}\n        variables={{ id }}\n      >\n        {({ loading, error, data }) => (\n          <Content className={styles.questContainer + ' container'}>\n            <Spin spinning={loading}>\n              {data && data.quest && (\n                <div>\n                  <h1 className={styles.questTitle}>\n                    <Link to={`/quest/${Number.parseInt(id, 10) - 1}`}>\n                      <Icon type=\"left\" />\n                    </Link>\n                    {data.quest.Name}\n                    <Link to={`/quest/${Number.parseInt(id, 10) + 1}`}>\n                      <Icon type=\"right\" />\n                    </Link>\n                  </h1>\n                  <div>\n                    {data.quest.Charisma ? (\n                      <Tag color=\"green\">\n                        魅力：\n                        {data.quest.Charisma}\n                      </Tag>\n                    ) : null}\n                    {data.quest.ActionPoint ? (\n                      <Tag color=\"red\">\n                        体力：\n                        {data.quest.ActionPoint}\n                      </Tag>\n                    ) : null}\n                  </div>\n                  <Row gutter={8} className={styles.questInfo}>\n                    <Col md={12} sm={24}>\n                      <img\n                        alt=\"map\"\n                        style={{ width: '100%' }}\n                        src={data.quest.Map.Image}\n                      />\n                    </Col>\n                    <Col md={12} sm={24}>\n                      <div\n                        dangerouslySetInnerHTML={{\n                          __html: data.quest.Message.replace(/\\n/g, '<br />'),\n                        }}\n                      />\n                      <Row className={styles.questInfoList}>\n                        <Col span={12}>\n                          <span className={styles.questInfoListName}>\n                            经验:\n                          </span>\n                          {data.quest.RankExp}\n                        </Col>\n                        <Col span={12}>\n                          <span className={styles.questInfoListName}>钱:</span>\n                          {data.quest.Gold}\n                        </Col>\n                      </Row>\n                      <table>\n                        <tbody>\n                          <tr>\n                            {[\n                              data.quest.Treasure1,\n                              data.quest.Treasure2,\n                              data.quest.Treasure3,\n                              data.quest.Treasure4,\n                              data.quest.Treasure5,\n                            ].map((treasure: number, index: number) => (\n                              <td\n                                style={{ width: '20%' }}\n                                key={`treasure-${index}`}\n                              >\n                                {treasure ? (\n                                  <div>\n                                    <img\n                                      alt={treasure.toString()}\n                                      style={{ width: '100%' }}\n                                      src={`${ICO_URL}/0/${treasure}.png`}\n                                    />\n                                    {(this.state.treasureDrop as any)[index]\n                                      .length === 0 && (\n                                      <Tag color=\"red\" style={{ margin: 0 }}>\n                                        COM\n                                      </Tag>\n                                    )}\n                                  </div>\n                                ) : null}\n                              </td>\n                            ))}\n                          </tr>\n                        </tbody>\n                      </table>\n                    </Col>\n                  </Row>\n                  <div className={styles.tableActions}>\n                    重复行\n                    <Switch\n                      checked={this.state.showDuplicated}\n                      onChange={this.handleDuplicatedChange}\n                      checkedChildren=\"显示\"\n                      unCheckedChildren=\"隐藏\"\n                    />\n                  </div>\n                  {data && (\n                    <EnemyTable\n                      battleTalks={data.battleTalks}\n                      quest={data.quest}\n                      onDrop={this.pushDrop}\n                      showDuplicated={this.state.showDuplicated}\n                    />\n                  )}\n                  {data && (\n                    <div>\n                      <h2>路线</h2>\n                      <Tabs>\n                        {data.quest.Map.Routes.map(routeWrapper => {\n                          const routes = routeWrapper.Routes.filter(\n                            route => route.OnEvent,\n                          );\n                          if (routes.length === 0) {\n                            return null;\n                          }\n                          return (\n                            <Tabs.TabPane\n                              tab={routeWrapper.RouteID}\n                              key={routeWrapper.RouteID.toString()}\n                            >\n                              <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                                <div className=\"ant-table-content\">\n                                  <div className=\"ant-table-body\">\n                                    <table>\n                                      <tbody className=\"ant-table-tbody\">\n                                        {routes.map((route, index) => {\n                                          console.log(route.OnEvent);\n                                          const match = /CallEvent\\(([\\d, ]+)\\)/.exec(\n                                            route.OnEvent,\n                                          );\n                                          console.log(match);\n                                          let talkTable: any;\n                                          if (match) {\n                                            const list = match[1].split(',');\n                                            talkTable = (\n                                              <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                                                <div className=\"ant-table-content\">\n                                                  <div className=\"ant-table-body\">\n                                                    <table>\n                                                      <tbody className=\"ant-table-tbody\">\n                                                        {list.map(s => {\n                                                          const recordIndex = Number.parseInt(\n                                                            s,\n                                                            10,\n                                                          );\n                                                          const talk: any = _.find(\n                                                            data.quest.Mission\n                                                              .BattleTalks,\n                                                            {\n                                                              RecordIndex: recordIndex,\n                                                            },\n                                                          );\n                                                          if (!talk) {\n                                                            return null;\n                                                          }\n                                                          return (\n                                                            <tr\n                                                              key={`enemy-table-${index}-event-${recordIndex}`}\n                                                            >\n                                                              <td\n                                                                style={{\n                                                                  background:\n                                                                    '#f5f6fa',\n                                                                  fontWeight:\n                                                                    'bold',\n                                                                  textAlign:\n                                                                    'center',\n                                                                  color:\n                                                                    'rgba(0, 0, 0, 0.85)',\n                                                                }}\n                                                              >\n                                                                {talk.Name}\n                                                              </td>\n                                                              <td\n                                                                style={{\n                                                                  textAlign:\n                                                                    'left',\n                                                                }}\n                                                              >\n                                                                {talk.Message}\n                                                              </td>\n                                                            </tr>\n                                                          );\n                                                        })}\n                                                      </tbody>\n                                                    </table>\n                                                  </div>\n                                                </div>\n                                              </div>\n                                            );\n                                          }\n                                          return (\n                                            <tr key={index.toString()}>\n                                              <td>\n                                                {route.OnEvent}\n                                                {talkTable}\n                                              </td>\n                                            </tr>\n                                          );\n                                        })}\n                                      </tbody>\n                                    </table>\n                                  </div>\n                                </div>\n                              </div>\n                            </Tabs.TabPane>\n                          );\n                        })}\n                      </Tabs>\n                    </div>\n                  )}\n                  {data && data.quest.EventArcs.length !== 0 && (\n                    <div>\n                      <h2>过场对话</h2>\n                      <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                        <div className=\"ant-table-content\">\n                          <div className=\"ant-table-body\">\n                            <table>\n                              <tbody className=\"ant-table-tbody\">\n                                {data.quest.EventArcs.map((arc, index) => (\n                                  <tr key={index}>\n                                    <td\n                                      style={{\n                                        background: '#f5f6fa',\n                                        fontWeight: 'bold',\n                                        textAlign: 'center',\n                                        color: 'rgba(0, 0, 0, 0.85)',\n                                      }}\n                                    >\n                                      {arc._TalkerName}\n                                    </td>\n                                    <td>{arc._TalkText}</td>\n                                  </tr>\n                                ))}\n                              </tbody>\n                            </table>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </Spin>\n          </Content>\n        )}\n      </Query>\n    );\n  }\n}\n","import React from 'react';\nimport { Row, Col, Icon, Input, Spin } from 'antd';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport _ from 'lodash';\n\ninterface ClassListCardProps {\n  class: any;\n  classes: any[];\n  // onHashChange: (e: Event) => void;\n}\n\ninterface ClassListCardStates {\n  active: boolean;\n  success: boolean;\n  nickName: string[];\n}\n\nexport default class ClassListCard extends React.Component<\n  ClassListCardProps,\n  ClassListCardStates\n> {\n  public state: ClassListCardStates = {\n    active: false,\n    success: false,\n    nickName: this.props.class.NickName || [],\n  };\n\n  public flashSuccess = () => {\n    this.setState({ success: true });\n    setTimeout(() => {\n      this.setState({ success: false });\n    }, 1000);\n  };\n\n  public getClass(classID: number, genLink = false, index: number) {\n    const unitClass = _.find(this.props.classes, ['ClassID', classID]);\n    if (unitClass) {\n      return (\n        <span key={`link-to-${classID}-${index}`} className=\"label\">\n          {unitClass.Name}\n        </span>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  public render() {\n    const { class: unitClass, ...res } = this.props;\n    return (\n      <Row\n        {...res}\n        id={unitClass.ClassID}\n        className=\"list-card class-list-card\"\n        style={{ cursor: 'default' }}\n      >\n        <Col span={2}>{unitClass.ClassID}</Col>\n        <Col span={3} className={unitClass.notBase ? '' : 'important'}>\n          {unitClass.Name}\n        </Col>\n        <Col span={3}>\n          {unitClass.JobChange\n            ? this.getClass(unitClass.JobChange, true, 0)\n            : null}\n        </Col>\n        <Col span={6}>\n          {[\n            unitClass.JobChangeMaterial1,\n            unitClass.JobChangeMaterial2,\n            unitClass.JobChangeMaterial3,\n          ]\n            .map((mat: number, index: number) =>\n              this.getClass(mat, false, index),\n            )\n            .filter(c => c)}\n        </Col>\n        <Col span={5}>\n          {[unitClass.Data_ExtraAwakeOrb1, unitClass.Data_ExtraAwakeOrb2]\n            .map((mat: number, index: number) =>\n              this.getClass(mat, false, index),\n            )\n            .filter(c => c)}\n        </Col>\n        <Col span={5}>\n          {[unitClass.AwakeType1, unitClass.AwakeType2]\n            .map((mat: number, index: number) =>\n              this.getClass(mat, true, index),\n            )\n            .filter(c => c)}\n        </Col>\n        {!unitClass.notBase && (\n          <div\n            className={\n              `list-card-addon ` +\n              (this.state.active && 'active ') +\n              (this.state.success && 'success')\n            }\n            onClick={e => {\n              e.stopPropagation();\n            }}\n          >\n            <Mutation<{}, { ClassID: number; NickName: string[] }>\n              mutation={gql`\n                mutation updateClassMeta($ClassID: Int!, $NickName: [String]) {\n                  updateClassMeta(ClassID: $ClassID, NickName: $NickName) {\n                    NickName\n                  }\n                }\n              `}\n              onCompleted={this.flashSuccess}\n            >\n              {(updateClassMeta, { loading }) => (\n                <Spin spinning={loading}>\n                  <Row>\n                    <Col span={2}>\n                      <Icon\n                        onClick={() =>\n                          this.setState({ active: !this.state.active })\n                        }\n                        style={{ cursor: 'pointer' }}\n                        type={\n                          this.state.active ? 'right-circle' : 'left-circle'\n                        }\n                        theme=\"outlined\"\n                      />\n                    </Col>\n                    <Col span={20}>\n                      <span className=\"label\">昵称:</span>\n                      <Input\n                        value={this.state.nickName.join(',')}\n                        onChange={e =>\n                          this.setState({\n                            nickName: e.target.value.split(/[,， ]/),\n                          })\n                        }\n                      />\n                    </Col>\n                    <Col span={2}>\n                      <Icon\n                        type=\"check-circle\"\n                        theme=\"filled\"\n                        style={{ cursor: 'pointer' }}\n                        onClick={() =>\n                          updateClassMeta({\n                            variables: {\n                              ClassID: unitClass.ClassID,\n                              NickName: this.state.nickName,\n                            },\n                          })\n                        }\n                      />\n                    </Col>\n                  </Row>\n                </Spin>\n              )}\n            </Mutation>\n          </div>\n        )}\n      </Row>\n    );\n  }\n}\n","import * as React from 'react';\nimport {\n  Layout,\n  Row,\n  Col,\n  Spin,\n  Pagination,\n  Input,\n  Affix,\n  Popover,\n  Alert,\n} from 'antd';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport _ from 'lodash';\nimport ClassListCard from '../../ClassListCard';\nimport AbilityConfigTable from '../../AbilityConfigTable';\n\nconst { Content } = Layout;\nconst { Search } = Input;\n\ninterface Data {\n  classes: Array<{\n    ClassID: number;\n    Name: string;\n    Explanation: string;\n    JobChange: number;\n    JobChangeMaterial1: number;\n    JobChangeMaterial2: number;\n    JobChangeMaterial3: number;\n    Data_ExtraAwakeOrb1: number;\n    Data_ExtraAwakeOrb2: number;\n    AwakeType1: number;\n    AwakeType2: number;\n    NickName: string;\n    ClassAbilityConfig1: {\n      _InvokeType: number;\n      _TargetType: number;\n      _InfluenceType: number;\n      _Param1: number;\n      _Param2: number;\n      _Param3: number;\n      _Param4: number;\n      _Command: string;\n      _ActivateCommand: string;\n    };\n    ClassAbilityPower1: number;\n  }>;\n  abilityConfigMetas: Array<{\n    ID: number;\n    Description: string;\n  }>;\n}\n\ninterface ClassListStates {\n  currentPage: number;\n  search: string;\n}\n\nexport default class ClassList extends React.Component<any, ClassListStates> {\n  public state = {\n    currentPage: 1,\n    search: '',\n  };\n  public classes: any[] = [];\n\n  public setSearch(value: string) {\n    this.setState({ search: value, currentPage: 1 });\n  }\n\n  public classFilter = (unitClass: any) => {\n    return JSON.stringify(unitClass).includes(this.state.search);\n  };\n\n  public render() {\n    return (\n      <Query<Data>\n        query={gql`\n          query {\n            classes {\n              ClassID\n              Name\n              Explanation\n              JobChange\n              JobChangeMaterial1\n              JobChangeMaterial2\n              JobChangeMaterial3\n              Data_ExtraAwakeOrb1\n              Data_ExtraAwakeOrb2\n              AwakeType1\n              AwakeType2\n              NickName\n              ClassAbilityConfig1 {\n                _InvokeType\n                _TargetType\n                _InfluenceType\n                _Param1\n                _Param2\n                _Param3\n                _Param4\n                _Command\n                _ActivateCommand\n              }\n              ClassAbilityPower1\n            }\n            abilityConfigMetas {\n              ID\n              Description\n            }\n          }\n        `}\n      >\n        {({ loading, error, data }) => {\n          if (data && data.classes) {\n            this.classes = data.classes.slice();\n            this.classes.forEach((unitClass: any) => {\n              if (unitClass.JobChange) {\n                const index = _.findIndex(this.classes, [\n                  'ClassID',\n                  unitClass.JobChange,\n                ]);\n                if (index !== 0) {\n                  this.classes[index] = {\n                    ...this.classes[index],\n                    notBase: true,\n                  };\n                }\n              } else if (unitClass.AwakeType1) {\n                const index1 = _.findIndex(this.classes, [\n                  'ClassID',\n                  unitClass.AwakeType1,\n                ]);\n                if (index1 !== 0) {\n                  this.classes[index1] = {\n                    ...this.classes[index1],\n                    notBase: true,\n                  };\n                }\n                const index2 = _.findIndex(this.classes, [\n                  'ClassID',\n                  unitClass.AwakeType2,\n                ]);\n                if (index2 !== 0) {\n                  this.classes[index2] = {\n                    ...this.classes[index2],\n                    notBase: true,\n                  };\n                }\n              }\n            });\n          }\n\n          return (\n            <Content className=\"container\">\n              <Alert\n                message=\"由于职业的被动信息和角色的被动一样（via轴），请去被动页面修改被动描述。\"\n                type=\"warning\"\n                showIcon\n                style={{ marginBottom: 16 }}\n              />\n              <Spin spinning={loading}>\n                <Search\n                  placeholder=\"搜索职业\"\n                  value={this.state.search}\n                  onChange={event => {\n                    this.setSearch(event.target.value);\n                  }}\n                  enterButton\n                />\n                <Affix>\n                  <Row className=\"sorter-block\">\n                    <Col span={2}>#</Col>\n                    <Col span={3}>职业</Col>\n                    <Col span={3}>转职目标</Col>\n                    <Col span={6}>转职素材</Col>\n                    <Col span={5}>珠子</Col>\n                    <Col span={5}>二觉目标</Col>\n                  </Row>\n                </Affix>\n                {data &&\n                  data.classes &&\n                  this.classes\n                    .filter(this.classFilter)\n                    .slice(\n                      50 * (this.state.currentPage - 1),\n                      50 * this.state.currentPage,\n                    )\n                    .map((unitClass: any) => {\n                      return (\n                        <Popover\n                          content={\n                            <div>\n                              <div className=\"ant-table ant-table-bordered ant-table-middle\">\n                                <div className=\"ant-table-content\">\n                                  <div className=\"ant-table-body\">\n                                    <table>\n                                      <thead className=\"ant-table-thead\">\n                                        <tr>\n                                          <th>职业名</th>\n                                          <th>职业描述</th>\n                                          <th>被动强度</th>\n                                        </tr>\n                                      </thead>\n                                      <tbody className=\"ant-table-tbody\">\n                                        <tr>\n                                          <td>{unitClass.Name}</td>\n                                          <td>{unitClass.Explanation}</td>\n                                          <td>\n                                            {unitClass.ClassAbilityPower1}\n                                          </td>\n                                        </tr>\n                                      </tbody>\n                                    </table>\n                                  </div>\n                                </div>\n                              </div>\n                              {unitClass.ClassAbilityConfig1.length > 0 && (\n                                <AbilityConfigTable\n                                  style={{ marginTop: 8 }}\n                                  configs={unitClass.ClassAbilityConfig1}\n                                  configMetas={data.abilityConfigMetas}\n                                />\n                              )}\n                            </div>\n                          }\n                          key={unitClass.ClassID}\n                        >\n                          <ClassListCard\n                            class={unitClass}\n                            classes={this.classes}\n                          />\n                        </Popover>\n                      );\n                    })}\n                {data && data.classes && (\n                  <Pagination\n                    defaultCurrent={1}\n                    defaultPageSize={50}\n                    current={this.state.currentPage}\n                    onChange={page => this.setState({ currentPage: page })}\n                    total={data.classes.filter(this.classFilter).length}\n                  />\n                )}\n              </Spin>\n            </Content>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n","import React from 'react';\nimport { Col, Row, Spin, Icon, Input } from 'antd';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport classNames from 'classnames';\nimport styles from './index.module.less';\n\ninterface DescriptionInputProps {\n  config?: {\n    ID: number;\n    Description: string;\n  };\n  ID: number;\n  mutationFunction: string;\n  // onIDFilterChange: (filter: number[]) => void;\n  // IDFilter: number[];\n  active: boolean;\n  onToggleFilter: () => void;\n}\n\ninterface DescriptionInputStates {\n  value: string;\n  success: boolean;\n  error: boolean;\n  editing: boolean;\n}\n\nexport default class DescriptionInput extends React.Component<\n  DescriptionInputProps,\n  DescriptionInputStates\n> {\n  public state = {\n    value: this.props.config ? this.props.config.Description : '',\n    success: false,\n    error: false,\n    editing: false,\n  };\n\n  private ref?: HTMLElement | null;\n  private update: any;\n\n  private flash = (state: 'success' | 'error') => {\n    this.setState({ [state]: true } as any, () => {\n      window.setTimeout(() => {\n        this.setState({ [state]: false } as any);\n      }, 500);\n    });\n  };\n\n  private enableEdit = () => {\n    this.setState({ editing: true });\n    document.addEventListener('click', this.outerClick);\n  };\n\n  private outerClick = (e: MouseEvent) => {\n    if (\n      this.ref &&\n      !(e.target === this.ref || this.ref.contains(e.target as Node))\n    ) {\n      this.handleUpdate();\n    }\n  };\n\n  private handleUpdate = () => {\n    this.update({\n      variables: {\n        ID: this.props.ID,\n        Description: this.state.value ? this.state.value : undefined,\n      },\n    });\n    this.setState({ editing: false });\n    document.removeEventListener('click', this.outerClick);\n  };\n\n  public render() {\n    const { ID } = this.props;\n    return (\n      <Mutation<\n        {},\n        {\n          ID: number;\n          Description: string;\n        }\n      >\n        key={ID}\n        mutation={gql`\n          mutation updateDescription(\n            $ID: Int!\n            $Description: String\n          ) {\n            ${this.props.mutationFunction} (\n              ID: $ID\n              Description: $Description\n            )\n          }\n        `}\n        onCompleted={this.flash.bind(this, 'success')}\n      >\n        {(updateDescription, { loading }) => {\n          this.update = updateDescription;\n          return (\n            <Spin spinning={loading}>\n              <div\n                ref={ref => (this.ref = ref)}\n                className={classNames(\n                  styles.influenceItem,\n                  { [styles.success]: this.state.success },\n                  { [styles.error]: this.state.error },\n                )}\n              >\n                <Row type=\"flex\" align=\"middle\">\n                  <Col span={6} onClick={this.props.onToggleFilter}>\n                    <span\n                      className={classNames('label', styles.IDTag, {\n                        [styles.active]: this.props.active,\n                      })}\n                    >\n                      {ID}\n                    </span>\n                  </Col>\n                  {this.state.editing ? (\n                    <>\n                      <Col span={16}>\n                        <Input\n                          value={this.state.value}\n                          className={styles.influenceInput}\n                          onChange={e => {\n                            this.setState({ value: e.target.value });\n                          }}\n                          autoFocus\n                        />\n                      </Col>\n                      <Col span={2} className={styles.actionCol}>\n                        <Icon\n                          type=\"check-circle\"\n                          theme=\"twoTone\"\n                          onClick={this.handleUpdate}\n                        />\n                      </Col>\n                    </>\n                  ) : (\n                    <Col\n                      span={18}\n                      onClick={this.enableEdit}\n                      className={styles.valueCol}\n                    >\n                      {this.state.value}\n                    </Col>\n                  )}\n                </Row>\n              </div>\n            </Spin>\n          );\n        }}\n      </Mutation>\n    );\n  }\n}\n","import * as React from 'react';\nimport {\n  Spin,\n  Layout,\n  Col,\n  Row,\n  Pagination,\n  Popover,\n  Input,\n  Tag,\n  Affix,\n  Drawer,\n  Icon,\n} from 'antd';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport classNames from 'classnames';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport DescriptionInput from '../../DescriptionInput';\nimport SkillInfluenceTable from '../../SkillInfluenceTable';\nimport styles from './index.module.less';\n\nconst { Content } = Layout;\nconst { Search } = Input;\n\ninterface Data {\n  skills: Array<{\n    SkillName: string;\n    WaitTime: number;\n    ContTimeMax: number;\n    PowerMax: number;\n    LevelMax: number;\n    Text: string;\n    InfluenceConfig: Array<{\n      Type_Collision: number;\n      Type_CollisionState: number;\n      Type_ChangeFunction: string;\n      Data_Target: number;\n      Data_InfluenceType: number;\n      Data_MulValue: number;\n      Data_MulValue2: number;\n      Data_MulValue3: number;\n      Data_AddValue: number;\n      _HoldRatioUpperLimit: number;\n      _Expression: string;\n      _ExpressionActivate: string;\n    }>;\n    CardHave: Array<{\n      CardID: number;\n      Name: string;\n    }>;\n  }>;\n  skillInfluenceMetas: Array<{\n    ID: number;\n    Description: string;\n  }>;\n}\n\ninterface SkillListStates {\n  currentPage: number;\n  search: string;\n  IDFilter: number[];\n  drawerVisible: boolean;\n}\n\nclass SkillList extends React.Component<any, SkillListStates> {\n  public state: SkillListStates = {\n    currentPage: 1,\n    search: '',\n    IDFilter: [],\n    drawerVisible: false,\n  };\n\n  public handleIDFilterChange = (newFilter: number[]) => {\n    this.setState({ IDFilter: newFilter, currentPage: 1 });\n  };\n\n  public setSearch = (search: string) => {\n    this.setState({ search, currentPage: 1 });\n  };\n\n  public skillFilter = (skill: any) => {\n    if (this.state.IDFilter.length > 0) {\n      for (const ID of this.state.IDFilter) {\n        const index = skill.InfluenceConfig.findIndex(\n          (config: any) => config.Data_InfluenceType === ID,\n        );\n        if (index === -1) {\n          return false;\n        }\n      }\n    }\n    if (\n      this.state.search &&\n      !JSON.stringify(skill).includes(this.state.search)\n    ) {\n      return false;\n    }\n    return true;\n  };\n\n  private findIDindex(ID: number) {\n    return this.state.IDFilter.findIndex(fiteredID => fiteredID === ID);\n  }\n\n  private handleToggleFilter(ID: number) {\n    const index = this.findIDindex(ID);\n    const { IDFilter } = this.state;\n    if (index > -1) {\n      this.setState({\n        IDFilter: [...IDFilter.slice(0, index), ...IDFilter.slice(index + 1)],\n      });\n    } else {\n      this.setState({ IDFilter: [...IDFilter, ID] });\n    }\n  }\n\n  private handleToggleDrawer = () => {\n    this.setState(state => ({ drawerVisible: !state.drawerVisible }));\n  };\n\n  public render() {\n    return (\n      <Query<Data>\n        query={gql`\n          query {\n            skills {\n              SkillName\n              WaitTime\n              ContTimeMax\n              PowerMax\n              LevelMax\n              Text\n              InfluenceConfig {\n                Type_Collision\n                Type_CollisionState\n                Type_ChangeFunction\n                Data_Target\n                Data_InfluenceType\n                Data_MulValue\n                Data_MulValue2\n                Data_MulValue3\n                Data_AddValue\n                _HoldRatioUpperLimit\n                _Expression\n                _ExpressionActivate\n              }\n              CardHave {\n                CardID\n                Name\n              }\n            }\n            skillInfluenceMetas {\n              ID\n              Description\n            }\n          }\n        `}\n      >\n        {({ loading, error, data }) => {\n          let maxInfluenceID = 1;\n          if (data && data.skills) {\n            data.skills.forEach((skill: any) => {\n              skill.InfluenceConfig.forEach((config: any) => {\n                if (config.Data_InfluenceType > maxInfluenceID) {\n                  maxInfluenceID = config.Data_InfluenceType;\n                }\n              });\n            });\n          }\n          return (\n            <>\n              <div\n                className={styles.drawerTrigger}\n                onClick={this.handleToggleDrawer}\n              >\n                <Icon type=\"setting\" />\n              </div>\n              <Drawer\n                visible={this.state.drawerVisible}\n                onClose={this.handleToggleDrawer}\n              >\n                <Spin spinning={loading}>\n                  {data &&\n                    data.skillInfluenceMetas &&\n                    Array.apply(maxInfluenceID).map(\n                      (dummy: any, index: number) => {\n                        const influence: any = _.find(\n                          data.skillInfluenceMetas,\n                          { ID: index + 1 },\n                        );\n\n                        return (\n                          <DescriptionInput\n                            key={index + 1}\n                            ID={index + 1}\n                            config={influence}\n                            mutationFunction=\"updateSkillInfluenceMeta\"\n                            active={this.findIDindex(index + 1) > -1}\n                            onToggleFilter={() =>\n                              this.handleToggleFilter(index + 1)\n                            }\n                          />\n                        );\n                      },\n                    )}\n                </Spin>\n              </Drawer>\n              <Content\n                className={classNames(['container', styles.skillListContainer])}\n              >\n                <Spin spinning={loading}>\n                  <div className={styles.tagBar}>\n                    {this.state.IDFilter.map(filter => (\n                      <Tag\n                        color=\"blue\"\n                        key={filter}\n                        closable\n                        onClose={this.handleToggleFilter.bind(this, filter)}\n                      >\n                        {filter}\n                      </Tag>\n                    ))}\n                  </div>\n                  <Search\n                    placeholder=\"搜索单位\"\n                    value={this.state.search}\n                    onChange={event => {\n                      this.setSearch(event.target.value);\n                    }}\n                    enterButton\n                  />\n                  <Affix>\n                    <Row className=\"sorter-block\">\n                      <Col span={4}>技能名</Col>\n                      <Col span={8}>效果</Col>\n                      <Col span={3}>持续</Col>\n                      <Col span={3}>再动</Col>\n                      <Col span={3}>技能等级</Col>\n                      <Col span={3}>&lt;POW_I&gt;</Col>\n                    </Row>\n                  </Affix>\n                  {data &&\n                    data.skills &&\n                    data.skills\n                      .filter(this.skillFilter)\n                      .slice(\n                        50 * (this.state.currentPage - 1),\n                        50 * this.state.currentPage,\n                      )\n                      .map((skill: any, index: number) => (\n                        <Popover\n                          key={index}\n                          content={\n                            <SkillInfluenceTable\n                              skill={skill}\n                              influences={data.skillInfluenceMetas}\n                            />\n                          }\n                        >\n                          <Row\n                            className=\"list-card\"\n                            style={{ cursor: 'default' }}\n                          >\n                            <Col className=\"important\" span={4}>\n                              {skill.SkillName}\n                            </Col>\n                            <Col className=\"important\" span={8}>\n                              {skill.Text}\n                            </Col>\n                            <Col span={3}>{skill.ContTimeMax}</Col>\n                            <Col span={3}>{skill.WaitTime}</Col>\n                            <Col span={3}>{skill.LevelMax}</Col>\n                            <Col span={3}>{skill.PowerMax}</Col>\n                            <Col span={24}>\n                              {skill.CardHave.map((card: any) => (\n                                <React.Fragment key={card.CardID}>\n                                  <Link to={`/unit/${card.CardID}`}>\n                                    {card.Name}\n                                  </Link>\n                                  &nbsp;\n                                </React.Fragment>\n                              ))}\n                            </Col>\n                          </Row>\n                        </Popover>\n                      ))}\n                  {data && data.skills && (\n                    <Pagination\n                      defaultCurrent={1}\n                      defaultPageSize={50}\n                      current={this.state.currentPage}\n                      onChange={page => this.setState({ currentPage: page })}\n                      total={data.skills.filter(this.skillFilter).length}\n                    />\n                  )}\n                </Spin>\n              </Content>\n            </>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default SkillList;\n","import * as React from 'react';\nimport {\n  Spin,\n  Layout,\n  Col,\n  Row,\n  Pagination,\n  Popover,\n  Input,\n  Tag,\n  Affix,\n  Drawer,\n  Icon,\n} from 'antd';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport classNames from 'classnames';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport DescriptionInput from '../../DescriptionInput';\nimport AbilityConfigTable from '../../AbilityConfigTable';\nimport styles from './index.module.less';\n\nconst { Content } = Layout;\nconst { Search } = Input;\n\ninterface Data {\n  abilities: Array<{\n    AbilityID: number;\n    Text: string;\n    AbilityName: string;\n    Config: {\n      _InvokeType: number;\n      _TargetType: number;\n      _InfluenceType: number;\n      _Param1: number;\n      _Param2: number;\n      _Param3: number;\n      _Param4: number;\n      _Command: string;\n      _ActivateCommand: string;\n    };\n    CardHave: {\n      CardID: number;\n      Name: string;\n    };\n  }>;\n  abilityConfigMetas: Array<{\n    ID: number;\n    Description: string;\n  }>;\n}\n\ninterface AbilityListStates {\n  currentPage: number;\n  search: string;\n  IDFilter: number[];\n  drawerVisible: boolean;\n}\n\nclass AbilityList extends React.Component<any, AbilityListStates> {\n  public state = {\n    currentPage: 1,\n    search: '',\n    IDFilter: [],\n    drawerVisible: false,\n  };\n  public setSearch = (search: string) => {\n    this.setState({ search, currentPage: 1 });\n  };\n  public handleIDFilterChange = (newFilter: number[]) => {\n    this.setState({ IDFilter: newFilter, currentPage: 1 });\n  };\n  public abilityFilter = (ability: any) => {\n    if (this.state.IDFilter.length > 0) {\n      for (const ID of this.state.IDFilter) {\n        const index = ability.Config.findIndex(\n          (config: any) => config._InfluenceType === ID,\n        );\n        if (index === -1) {\n          return false;\n        }\n      }\n    }\n    if (\n      this.state.search &&\n      !JSON.stringify(ability).includes(this.state.search)\n    ) {\n      return false;\n    }\n    return true;\n  };\n\n  private findIDindex(ID: number) {\n    return this.state.IDFilter.findIndex(fiteredID => fiteredID === ID);\n  }\n\n  private handleToggleFilter(ID: number) {\n    const index = this.findIDindex(ID);\n    const { IDFilter } = this.state;\n    if (index > -1) {\n      this.setState({\n        IDFilter: [...IDFilter.slice(0, index), ...IDFilter.slice(index + 1)],\n      });\n    } else {\n      this.setState({ IDFilter: [...IDFilter, ID] });\n    }\n  }\n\n  private handleToggleDrawer = () => {\n    this.setState(state => ({ drawerVisible: !state.drawerVisible }));\n  };\n\n  public render() {\n    return (\n      <Query<Data>\n        query={gql`\n          query {\n            abilities {\n              AbilityID\n              Text\n              AbilityName\n              Config {\n                _InvokeType\n                _TargetType\n                _InfluenceType\n                _Param1\n                _Param2\n                _Param3\n                _Param4\n                _Command\n                _ActivateCommand\n              }\n              CardHave {\n                CardID\n                Name\n              }\n            }\n            abilityConfigMetas {\n              ID\n              Description\n            }\n          }\n        `}\n      >\n        {({ loading, error, data }) => {\n          let maxID = 1;\n          if (data && data.abilities) {\n            data.abilities.forEach((ability: any) => {\n              ability.Config.forEach((config: any) => {\n                if (config._InfluenceType > maxID) {\n                  maxID = config._InfluenceType;\n                }\n              });\n            });\n          }\n          return (\n            <>\n              <div\n                className={styles.drawerTrigger}\n                onClick={this.handleToggleDrawer}\n              >\n                <Icon type=\"setting\" />\n              </div>\n              <Drawer\n                visible={this.state.drawerVisible}\n                onClose={this.handleToggleDrawer}\n              >\n                <Spin spinning={loading}>\n                  {data &&\n                    data.abilityConfigMetas &&\n                    Array.apply(maxID).map((dummy: any, index: number) => {\n                      const config: any = _.find(data.abilityConfigMetas, {\n                        ID: index + 1,\n                      });\n\n                      return (\n                        <DescriptionInput\n                          key={index + 1}\n                          ID={index + 1}\n                          config={config}\n                          mutationFunction=\"updateAbilityConfigMeta\"\n                          active={this.findIDindex(index + 1) > -1}\n                          onToggleFilter={() =>\n                            this.handleToggleFilter(index + 1)\n                          }\n                        />\n                      );\n                    })}\n                </Spin>\n              </Drawer>\n              <Content\n                className={classNames([\n                  'container',\n                  styles.abilityListContainer,\n                ])}\n              >\n                <Spin spinning={loading}>\n                  <div className={styles.tagBar}>\n                    {this.state.IDFilter.map(filter => (\n                      <Tag\n                        color=\"blue\"\n                        key={filter}\n                        closable\n                        onClose={this.handleToggleFilter.bind(this, filter)}\n                      >\n                        {filter}\n                      </Tag>\n                    ))}\n                  </div>\n                  <Search\n                    placeholder=\"搜索单位\"\n                    value={this.state.search}\n                    onChange={event => {\n                      this.setSearch(event.target.value);\n                    }}\n                    enterButton\n                  />\n                  <Affix>\n                    <Row className=\"sorter-block\">\n                      <Col span={8}>名称</Col>\n                      <Col span={16}>描述</Col>\n                    </Row>\n                  </Affix>\n                  {data &&\n                    data.abilities &&\n                    data.abilities\n                      .filter(this.abilityFilter)\n                      .slice(\n                        50 * (this.state.currentPage - 1),\n                        50 * this.state.currentPage,\n                      )\n                      .map((ability: any, index: number) => {\n                        return (\n                          <Popover\n                            key={index}\n                            content={\n                              <AbilityConfigTable\n                                configs={ability.Config}\n                                configMetas={data.abilityConfigMetas}\n                              />\n                            }\n                          >\n                            <Row\n                              className=\"list-card\"\n                              style={{ cursor: 'default' }}\n                            >\n                              <Col className=\"important\" span={8}>\n                                {ability.AbilityName}\n                              </Col>\n                              <Col className=\"important\" span={16}>\n                                {ability.Text}\n                              </Col>\n                              <Col span={24}>\n                                {ability.CardHave.map((card: any) => (\n                                  <Link\n                                    style={{ margin: '0 5px' }}\n                                    to={`/unit/${card.CardID}`}\n                                    key={card.CardID}\n                                  >\n                                    {card.Name}\n                                  </Link>\n                                ))}\n                              </Col>\n                            </Row>\n                          </Popover>\n                        );\n                      })}\n                  {data && data.abilities && (\n                    <Pagination\n                      defaultCurrent={1}\n                      defaultPageSize={50}\n                      current={this.state.currentPage}\n                      onChange={page => this.setState({ currentPage: page })}\n                      total={data.abilities.filter(this.abilityFilter).length}\n                    />\n                  )}\n                </Spin>\n              </Content>\n            </>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default AbilityList;\n","import * as React from 'react';\nimport {\n  Layout,\n  Row,\n  Col,\n  Spin,\n  Icon,\n  Popconfirm,\n  Drawer,\n  Tag,\n  Modal,\n} from 'antd';\nimport { Query, Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport classNames from 'classnames';\nimport styles from './index.module.less';\nimport { EMOJI_URL } from '../../../consts';\n\nconst { Content } = Layout;\n\ninterface Data {\n  emojis: Array<{\n    _id: string;\n    emoji: string;\n    name: string;\n    group: number[];\n  }>;\n}\n\ninterface EmojiListStates {\n  drawerVisible: boolean;\n  currentEmoji: {\n    _id: string;\n    name: string[];\n    emoji: string[];\n    group: number[];\n  };\n  modalVisible: boolean;\n  currentImage: string;\n}\nexport default class EmojiList extends React.Component<any, EmojiListStates> {\n  public state: EmojiListStates = {\n    drawerVisible: false,\n    currentEmoji: {\n      _id: '',\n      name: [],\n      emoji: [],\n      group: [],\n    },\n    modalVisible: false,\n    currentImage: '',\n  };\n\n  public isImg = (img: string) => {\n    const [, ext] = img.split('.');\n    if (['jpg', 'jpeg', 'png', 'gif', 'bmp'].indexOf(ext) !== -1) {\n      return true;\n    }\n    return false;\n  };\n\n  public render() {\n    return (\n      <Query<Data>\n        query={gql`\n          query {\n            emojis {\n              _id\n              emoji\n              name\n              group\n            }\n          }\n        `}\n      >\n        {({ loading, error, data, refetch }) => (\n          <Content className=\"container\">\n            <Spin spinning={loading}>\n              <Row className=\"sorter-block\">\n                <Col span={2}>#</Col>\n                <Col span={7}>名称</Col>\n                <Col span={9}>存在的群</Col>\n                <Col span={6}>数量</Col>\n              </Row>\n            </Spin>\n            {data &&\n              data.emojis &&\n              data.emojis.map((emoji: any, index: number) => (\n                <Row\n                  className=\"list-card\"\n                  key={emoji._id}\n                  onClick={() => {\n                    this.setState({ drawerVisible: true, currentEmoji: emoji });\n                  }}\n                >\n                  <Col span={2}>{index + 1}</Col>\n                  <Col span={7} className=\"important\">\n                    {emoji.name.join(', ')}\n                  </Col>\n                  <Col span={9}>{emoji.group.join(', ')}</Col>\n                  <Col span={6}>{emoji.emoji && emoji.emoji.length}</Col>\n                  <div\n                    className={classNames(\n                      'list-card-addon',\n                      styles.deleteIconContainer,\n                    )}\n                    onClick={e => {\n                      e.stopPropagation();\n                    }}\n                  >\n                    <Mutation\n                      mutation={gql`\n                        mutation removeEmoji($ID: String!) {\n                          removeEmoji(ID: $ID)\n                        }\n                      `}\n                    >\n                      {(removeEmoji: any, { data }: any) => (\n                        <Popconfirm\n                          title=\"是否要删除这个emoji？\"\n                          onConfirm={() => {\n                            removeEmoji({\n                              variables: {\n                                ID: emoji._id,\n                              },\n                            }).then(() => {\n                              refetch();\n                            });\n                          }}\n                        >\n                          <Icon\n                            className={styles.deleteIcon}\n                            type=\"delete\"\n                            theme=\"outlined\"\n                          />\n                        </Popconfirm>\n                      )}\n                    </Mutation>\n                  </div>\n                </Row>\n              ))}\n            <Drawer\n              width={'70%'}\n              className={styles.emojiDrawer}\n              title=\"emojij详情\"\n              onClose={() => this.setState({ drawerVisible: false })}\n              visible={this.state.drawerVisible}\n            >\n              <div style={{ marginBottom: 10 }}>\n                <span className=\"label\">名称:</span>\n                {this.state.currentEmoji.name.map(name => (\n                  <Tag key={name} color=\"blue\">\n                    {name}\n                  </Tag>\n                ))}\n              </div>\n              <div style={{ marginBottom: 10 }}>\n                <span className=\"label\">分组:</span>\n                {this.state.currentEmoji.group.map(group => (\n                  <Tag key={group} color=\"blue\">\n                    {group}\n                  </Tag>\n                ))}\n              </div>\n              <div className={styles.imageContainer}>\n                {this.state.currentEmoji.emoji.map(\n                  (emoji: any, index: number) => {\n                    return (\n                      <div key={emoji} className={styles.imageBox}>\n                        <div className={styles.imageCover}>\n                          <div className={styles.imageActionContainer}>\n                            <Icon\n                              className={styles.imageAction}\n                              type=\"eye\"\n                              theme=\"outlined\"\n                              onClick={() => {\n                                this.setState({\n                                  modalVisible: true,\n                                  currentImage: emoji,\n                                });\n                              }}\n                            />\n                            <Mutation\n                              mutation={gql`\n                                mutation removeEmojiItem(\n                                  $ID: String!\n                                  $index: Int!\n                                ) {\n                                  removeEmojiItem(ID: $ID, index: $index)\n                                }\n                              `}\n                            >\n                              {(removeEmojiItem: any) => {\n                                return (\n                                  <Popconfirm\n                                    title=\"是否要删除这个emoji？\"\n                                    onConfirm={() => {\n                                      removeEmojiItem({\n                                        variables: {\n                                          ID: this.state.currentEmoji._id,\n                                          index,\n                                        },\n                                      }).then((data: any) => {\n                                        if (data && data.data.removeEmojiItem) {\n                                          refetch();\n                                          this.setState(({ currentEmoji }) => ({\n                                            currentEmoji: {\n                                              ...currentEmoji,\n                                              emoji: [\n                                                ...currentEmoji.emoji.slice(\n                                                  0,\n                                                  index,\n                                                ),\n                                                ...currentEmoji.emoji.slice(\n                                                  index + 1,\n                                                ),\n                                              ],\n                                            },\n                                          }));\n                                        }\n                                      });\n                                    }}\n                                  >\n                                    <Icon\n                                      className={styles.imageAction}\n                                      type=\"delete\"\n                                      theme=\"outlined\"\n                                    />\n                                  </Popconfirm>\n                                );\n                              }}\n                            </Mutation>\n                          </div>\n                        </div>\n                        {this.isImg(emoji) ? (\n                          <img alt={emoji} src={`${EMOJI_URL}/${emoji}`} />\n                        ) : (\n                          <span>{emoji}</span>\n                        )}\n                      </div>\n                    );\n                  },\n                )}\n              </div>\n            </Drawer>\n            <Modal\n              onCancel={() => this.setState({ modalVisible: false })}\n              visible={this.state.modalVisible}\n              footer={null}\n              style={{ textAlign: 'center' }}\n            >\n              {this.isImg(this.state.currentImage) ? (\n                <img\n                  alt={this.state.currentImage}\n                  src={`${EMOJI_URL}/${this.state.currentImage}`}\n                />\n              ) : (\n                <span>{this.state.currentImage}</span>\n              )}\n            </Modal>\n          </Content>\n        )}\n      </Query>\n    );\n  }\n}\n","import React from 'react';\nimport { Layout, Input, Form, Button, Icon } from 'antd';\nimport useForm from 'rc-form-hooks';\nimport UserContext from '../../../context/UserContext';\nimport styles from './Login.module.less';\n\nconst { Content } = Layout;\n\nconst Login: React.FC = () => {\n  const { getFieldDecorator, validateFields } = useForm<{ token: string }>();\n  const { login } = UserContext.useContainer();\n  const handleLogin = async () => {\n    const values = await validateFields();\n    console.log(login);\n    login(values.token);\n  };\n  return (\n    <Content>\n      <Form className={styles.loginForm}>\n        <Form.Item>\n          {getFieldDecorator('token')(\n            <Input\n              type=\"password\"\n              prefix={\n                <Icon\n                  onClick={handleLogin}\n                  style={{ cursor: 'default' }}\n                  type=\"lock\"\n                />\n              }\n            />,\n          )}\n        </Form.Item>\n        <Button type=\"primary\" block>\n          登录\n        </Button>\n      </Form>\n    </Content>\n  );\n};\n\nexport default Login;\n","import React, { useEffect, useRef } from 'react';\nimport { Layout } from 'antd';\nimport {\n  withRouter,\n  Switch,\n  Route,\n  RouteComponentProps,\n  Redirect,\n} from 'react-router-dom';\nimport useRouter from 'use-react-router';\nimport UserContext from '../context/UserContext';\nimport Header from './Header';\n\nimport Home from './Routes/Home';\nimport UnitList from './Routes/UnitList';\nimport Unit from './Routes/Unit';\nimport UnitModal from './Routes/UnitModal';\nimport QuestList from './Routes/QuestList';\nimport Quest from './Routes/Quest';\nimport ClassList from './Routes/ClassList';\nimport SkillList from './Routes/SkillList';\nimport AbilityList from './Routes/AbilityList';\nimport EmojiList from './Routes/EmojiList';\nimport Login from './Routes/Login';\n\nconst Router: React.FC<RouteComponentProps> = () => {\n  const { isLoggedIn } = UserContext.useContainer();\n  const { location, history } = useRouter();\n  const prevLocationRef = useRef(location);\n\n  useEffect(() => {\n    // set previousLocation if props.location is not modal\n    if (\n      history.action !== 'POP' &&\n      (!location.state || !location.state.modal)\n    ) {\n      prevLocationRef.current = location;\n    }\n  }, [history.action, location]);\n\n  const isModal = !!(\n    location.state &&\n    location.state.modal &&\n    prevLocationRef.current !== location\n  ); // not initial render\n\n  return !isLoggedIn ? (\n    <Switch>\n      <Route path=\"/\" exact component={Login} />\n      <Redirect to=\"/\" />\n    </Switch>\n  ) : (\n    <Layout>\n      <Header />\n      <Switch location={isModal ? prevLocationRef.current : location}>\n        >\n        <Route path=\"/unit/:CardID\" component={Unit} />\n        <Route path=\"/quest/:QuestID\" component={Quest} />\n        <Route path=\"/unit\" exact component={UnitList} />\n        <Route path=\"/quest\" exact component={QuestList} />\n        <Route path=\"/class\" exact component={ClassList} />\n        <Route path=\"/skill\" exact component={SkillList} />\n        <Route path=\"/ability\" exact component={AbilityList} />\n        <Route path=\"/emoji\" exact component={EmojiList} />\n        <Route component={Home} />\n      </Switch>\n      {isModal && <Route path=\"/unit/:CardID\" component={UnitModal} />}\n    </Layout>\n  );\n};\n\nexport default withRouter(Router);\n","import { Layout } from 'antd';\nimport * as React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { ApolloProvider } from 'react-apollo';\nimport { LocaleProvider } from 'antd';\nimport zhCN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport './App.less';\nimport UserContext from './context/UserContext';\nimport Router from './Components/Router';\nimport { API_URL } from './consts';\n\nmoment.locale('zh-cn');\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n          ),\n        );\n      }\n      if (networkError) {\n        console.log(`[Network error]: ${networkError}`);\n      }\n    }),\n    createUploadLink({\n      uri: API_URL,\n      credentials: 'same-origin',\n    }),\n  ]),\n  cache: new InMemoryCache(),\n});\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <HashRouter>\n        <LocaleProvider locale={zhCN}>\n          <ApolloProvider client={client}>\n            <UserContext.Provider>\n              <Layout className=\"App\" style={{ height: '100%' }}>\n                <Router />\n              </Layout>\n            </UserContext.Provider>\n          </ApolloProvider>\n        </LocaleProvider>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.less';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root') as HTMLElement);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"questContainer\":\"src-Components-Routes-Quest-index-module__questContainer--UjUhn\",\"questInfo\":\"src-Components-Routes-Quest-index-module__questInfo--1FqCx\",\"questInfoList\":\"src-Components-Routes-Quest-index-module__questInfoList--zSeLf\",\"questInfoListName\":\"src-Components-Routes-Quest-index-module__questInfoListName--2kqOB\",\"tableActions\":\"src-Components-Routes-Quest-index-module__tableActions--1H6ZX\",\"enemyRowWithChange\":\"src-Components-Routes-Quest-index-module__enemyRowWithChange--2_I1q\",\"rowShow\":\"src-Components-Routes-Quest-index-module__rowShow--2uBF9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteIconContainer\":\"src-Components-Routes-EmojiList-index-module__deleteIconContainer--Ka13J\",\"deleteIcon\":\"src-Components-Routes-EmojiList-index-module__deleteIcon--396xM\",\"imageContainer\":\"src-Components-Routes-EmojiList-index-module__imageContainer--chkYQ\",\"imageBox\":\"src-Components-Routes-EmojiList-index-module__imageBox--10DU5\",\"imageCover\":\"src-Components-Routes-EmojiList-index-module__imageCover--NtOwb\",\"imageActionContainer\":\"src-Components-Routes-EmojiList-index-module__imageActionContainer--rumP3\",\"imageAction\":\"src-Components-Routes-EmojiList-index-module__imageAction--2P1vd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"influenceItem\":\"src-Components-DescriptionInput-index-module__influenceItem--R7YEY\",\"success\":\"src-Components-DescriptionInput-index-module__success--2rb0i\",\"error\":\"src-Components-DescriptionInput-index-module__error--1rwyo\",\"influenceInput\":\"src-Components-DescriptionInput-index-module__influenceInput--1BTEq\",\"actionCol\":\"src-Components-DescriptionInput-index-module__actionCol--2bm8U\",\"valueCol\":\"src-Components-DescriptionInput-index-module__valueCol--3ltw8\",\"IDTag\":\"src-Components-DescriptionInput-index-module__IDTag--1Zd-8\",\"active\":\"src-Components-DescriptionInput-index-module__active--2Q_fI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"src-Components-Poster-index-module__container--2yGhw\",\"posterNameContainer\":\"src-Components-Poster-index-module__posterNameContainer--L1Wzb\",\"posterBreadcrumb\":\"src-Components-Poster-index-module__posterBreadcrumb--1wH4i\",\"posterBreadcrumbText\":\"src-Components-Poster-index-module__posterBreadcrumbText--2ypfB\",\"active\":\"src-Components-Poster-index-module__active--2HoTE\",\"posterBreadcrumbDivider\":\"src-Components-Poster-index-module__posterBreadcrumbDivider--2xk2k\",\"poster\":\"src-Components-Poster-index-module__poster--3jD7r\"};"],"sourceRoot":""}